//
// Adaptive Vision Library 4.10.0.61766
// This file is a part of Adaptive Vision Library, version 4.10
// Copyright (C) 2018 Future Processing Sp. z o. o.
//
// This file should not be included directly in your program.
// Please, include the main header file of the library instead.
//

// GENERATED BY ENVIRONMENT CREATOR
#ifndef AVL_AMR_GENERATED_H_
#define AVL_AMR_GENERATED_H_

#include "AVL_AMR_Common.h"
#include "AMRSharedLibrary.h"

#define TRIVIAL_SERIALIZATION(x) template<> struct has_trivial_serialization<avl::x>{static const bool value = true;}

namespace avl
{
	// Forward declarations
	struct Anchor3D;
	struct Pixel;
	struct Location;
	struct Box;
	struct Gaussian;
	struct TextureModel;
	struct SynViewImageFormatParams;
	struct SynViewAcquisitionParams;
	struct SynViewAnalogParams;
	struct VimbaImageFormatParams;
	struct VimbaAcquisitionControlParams;
	struct IFMCameraAddress;
	struct Size;
	struct Point2D;
	struct Segment2D;
	struct Point3D;
	struct Vector2D;
	struct Vector3D;
	struct Circle2D;
	struct Arc2D;
	struct Line2D;
	struct Rectangle2D;
	struct CoordinateSystem2D;
	struct StringLabel;
	struct Segment3D;
	struct Line3D;
	struct Plane3D;
	struct Point3DGrid;
	class Surface;
	struct Circle3D;
	struct Box3D;
	struct Sphere3D;
	struct Path;
	class Image;
	class SpatialMap;
	class Matrix;
	struct PCAModel;
	class MlpModel;
	class OrganicModel;
	class CharacterFeatures;
	class OcrMlpModel;
	class OcrCandidate;
	class Region;
	class CharacterSample;
	class IndexValuePair;
	class SvmParameter;
	class SvmModel;
	class OcrSvmModel;
	class KNNModel;
	class Histogram;
	class Profile;
	class GoProfile;
	class GoPointPlot;
	struct LensDistortion;
	struct Position3D;
	class GrayModel;
	class EdgeModel;
	struct GrayGoldenTemplate;
	struct EdgeGoldenTemplate;
	struct GoldenTemplate2Model_Intensity;
	struct Edge1D;
	struct Ridge1D;
	struct Stripe1D;
	struct Gap1D;
	struct SurfaceEdge1D;
	struct SurfaceStripe1D;
	struct DrawingStyle;
	struct EdgeScanParams;
	struct RidgeScanParams;
	struct StripeScanParams;
	struct EdgeScanParams3D;
	struct StripeScanParams3D;
	struct LocalBlindness;
	struct Object2D;
	struct HoughCircle;
	struct DataMatrix;
	struct QRCode;
	struct BarcodeGrades;
	struct DataCode;
	struct DataMatrixCodeParams;
	struct DataMatrixDetectionParams;
	struct ImageFormat;
	struct SurfaceFormat;
	struct ProfileEdge;
	struct ProfileRidge;
	struct ProfileStripe;
	struct ProfileSection;
	struct Extremum2D;
	struct Extremum1D;
	struct LinearFunction;
	struct FeatureClass;
	struct ClassConfidence;
	struct CircleFittingField;
	struct ArcFittingField;
	struct SegmentFittingField;
	struct PathFittingField;
	struct SegmentScanField;
	struct ShapeRegion;
	struct ImageLocalExtremaVerification;
	struct IntensityThresholdParams;
	struct DynamicThresholdParams;
	struct ColorThresholdParams;
	struct BlobSplittingParams;
	struct RegionProcessingParams;
	struct GenAddress;
	struct GocatorFrameInfo;
	class XmlNode;
	struct TextSegmentationMethod;
	struct TextThresholdingMethod;
	struct TextSegmentation;
	class OcrModel;
	class ByteBuffer;
	struct LumeneraImageFormatParams;
	struct LumeneraAcquisitionControlParams;
	struct HilscherDriverInformation;
	struct HilscherDriverBoardInformation;
	struct HilscherDriverChannelInformation;
	struct NDCooccurrenceParams;
	struct NDGaussianMixtureParams;
	struct TexemModel;
}

namespace avs
{
	// Trivial serializers
	TRIVIAL_SERIALIZATION(Anchor3D);
	TRIVIAL_SERIALIZATION(Pixel);
	TRIVIAL_SERIALIZATION(Location);
	TRIVIAL_SERIALIZATION(Box);
	TRIVIAL_SERIALIZATION(Size);
	TRIVIAL_SERIALIZATION(Point2D);
	TRIVIAL_SERIALIZATION(Segment2D);
	TRIVIAL_SERIALIZATION(Point3D);
	TRIVIAL_SERIALIZATION(Vector2D);
	TRIVIAL_SERIALIZATION(Vector3D);
	TRIVIAL_SERIALIZATION(Circle2D);
	TRIVIAL_SERIALIZATION(Arc2D);
	TRIVIAL_SERIALIZATION(Line2D);
	TRIVIAL_SERIALIZATION(Rectangle2D);
	TRIVIAL_SERIALIZATION(CoordinateSystem2D);
	TRIVIAL_SERIALIZATION(Segment3D);
	TRIVIAL_SERIALIZATION(Line3D);
	TRIVIAL_SERIALIZATION(Plane3D);
	TRIVIAL_SERIALIZATION(Circle3D);
	TRIVIAL_SERIALIZATION(Box3D);
	TRIVIAL_SERIALIZATION(Sphere3D);
	TRIVIAL_SERIALIZATION(IndexValuePair);
	TRIVIAL_SERIALIZATION(SvmParameter);
	TRIVIAL_SERIALIZATION(LensDistortion);
	TRIVIAL_SERIALIZATION(Position3D);
	TRIVIAL_SERIALIZATION(Edge1D);
	TRIVIAL_SERIALIZATION(Ridge1D);
	TRIVIAL_SERIALIZATION(Stripe1D);
	TRIVIAL_SERIALIZATION(Gap1D);
	TRIVIAL_SERIALIZATION(SurfaceEdge1D);
	TRIVIAL_SERIALIZATION(SurfaceStripe1D);
	TRIVIAL_SERIALIZATION(EdgeScanParams);
	TRIVIAL_SERIALIZATION(RidgeScanParams);
	TRIVIAL_SERIALIZATION(EdgeScanParams3D);
	TRIVIAL_SERIALIZATION(Object2D);
	TRIVIAL_SERIALIZATION(HoughCircle);
	TRIVIAL_SERIALIZATION(ImageFormat);
	TRIVIAL_SERIALIZATION(ProfileEdge);
	TRIVIAL_SERIALIZATION(ProfileRidge);
	TRIVIAL_SERIALIZATION(ProfileStripe);
	TRIVIAL_SERIALIZATION(ProfileSection);
	TRIVIAL_SERIALIZATION(Extremum2D);
	TRIVIAL_SERIALIZATION(Extremum1D);
	TRIVIAL_SERIALIZATION(LinearFunction);
	TRIVIAL_SERIALIZATION(CircleFittingField);
	TRIVIAL_SERIALIZATION(ArcFittingField);
	TRIVIAL_SERIALIZATION(SegmentFittingField);
	TRIVIAL_SERIALIZATION(SegmentScanField);
	TRIVIAL_SERIALIZATION(ShapeRegion);
	TRIVIAL_SERIALIZATION(ImageLocalExtremaVerification);

	// Automatic and custom serializers
	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::Gaussian& outGaussian);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::Gaussian& inGaussian);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::TextureModel& outTextureModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::TextureModel& inTextureModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::SynViewImageFormatParams& outSynViewImageFormatParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::SynViewImageFormatParams& inSynViewImageFormatParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::SynViewAcquisitionParams& outSynViewAcquisitionParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::SynViewAcquisitionParams& inSynViewAcquisitionParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::SynViewAnalogParams& outSynViewAnalogParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::SynViewAnalogParams& inSynViewAnalogParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::VimbaImageFormatParams& outVimbaImageFormatParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::VimbaImageFormatParams& inVimbaImageFormatParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::VimbaAcquisitionControlParams& outVimbaAcquisitionControlParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::VimbaAcquisitionControlParams& inVimbaAcquisitionControlParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::IFMCameraAddress& outIFMCameraAddress);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::IFMCameraAddress& inIFMCameraAddress);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::StringLabel& outStringLabel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::StringLabel& inStringLabel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::Point3DGrid& outPoint3DGrid);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::Point3DGrid& inPoint3DGrid);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::Surface& outSurface);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::Surface& inSurface);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::Path& outPath);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::Path& inPath);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::Image& outImage);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::Image& inImage);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::SpatialMap& outSpatialMap);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::SpatialMap& inSpatialMap);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::Matrix& outMatrix);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::Matrix& inMatrix);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::PCAModel& outPCAModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::PCAModel& inPCAModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::MlpModel& outMlpModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::MlpModel& inMlpModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::OrganicModel& outOrganicModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::OrganicModel& inOrganicModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::CharacterFeatures& outCharacterFeatures);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::CharacterFeatures& inCharacterFeatures);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::OcrMlpModel& outOcrMlpModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::OcrMlpModel& inOcrMlpModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::OcrCandidate& outOcrCandidate);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::OcrCandidate& inOcrCandidate);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::Region& outRegion);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::Region& inRegion);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::CharacterSample& outCharacterSample);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::CharacterSample& inCharacterSample);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::SvmModel& outSvmModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::SvmModel& inSvmModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::OcrSvmModel& outOcrSvmModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::OcrSvmModel& inOcrSvmModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::KNNModel& outKNNModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::KNNModel& inKNNModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::Histogram& outHistogram);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::Histogram& inHistogram);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::Profile& outProfile);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::Profile& inProfile);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::GoProfile& outGoProfile);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::GoProfile& inGoProfile);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::GoPointPlot& outGoPointPlot);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::GoPointPlot& inGoPointPlot);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::GrayModel& outGrayModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::GrayModel& inGrayModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::EdgeModel& outEdgeModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::EdgeModel& inEdgeModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::GrayGoldenTemplate& outGrayGoldenTemplate);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::GrayGoldenTemplate& inGrayGoldenTemplate);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::EdgeGoldenTemplate& outEdgeGoldenTemplate);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::EdgeGoldenTemplate& inEdgeGoldenTemplate);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::GoldenTemplate2Model_Intensity& outGoldenTemplate2Model_Intensity);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::GoldenTemplate2Model_Intensity& inGoldenTemplate2Model_Intensity);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::DrawingStyle& outDrawingStyle);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::DrawingStyle& inDrawingStyle);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::StripeScanParams& outStripeScanParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::StripeScanParams& inStripeScanParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::StripeScanParams3D& outStripeScanParams3D);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::StripeScanParams3D& inStripeScanParams3D);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::LocalBlindness& outLocalBlindness);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::LocalBlindness& inLocalBlindness);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::DataMatrix& outDataMatrix);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::DataMatrix& inDataMatrix);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::QRCode& outQRCode);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::QRCode& inQRCode);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::BarcodeGrades& outBarcodeGrades);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::BarcodeGrades& inBarcodeGrades);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::DataCode& outDataCode);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::DataCode& inDataCode);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::DataMatrixCodeParams& outDataMatrixCodeParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::DataMatrixCodeParams& inDataMatrixCodeParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::DataMatrixDetectionParams& outDataMatrixDetectionParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::DataMatrixDetectionParams& inDataMatrixDetectionParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::SurfaceFormat& outSurfaceFormat);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::SurfaceFormat& inSurfaceFormat);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::FeatureClass& outFeatureClass);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::FeatureClass& inFeatureClass);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::ClassConfidence& outClassConfidence);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::ClassConfidence& inClassConfidence);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::PathFittingField& outPathFittingField);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::PathFittingField& inPathFittingField);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::IntensityThresholdParams& outIntensityThresholdParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::IntensityThresholdParams& inIntensityThresholdParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::DynamicThresholdParams& outDynamicThresholdParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::DynamicThresholdParams& inDynamicThresholdParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::ColorThresholdParams& outColorThresholdParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::ColorThresholdParams& inColorThresholdParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::BlobSplittingParams& outBlobSplittingParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::BlobSplittingParams& inBlobSplittingParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::RegionProcessingParams& outRegionProcessingParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::RegionProcessingParams& inRegionProcessingParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::GenAddress& outGenAddress);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::GenAddress& inGenAddress);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::GocatorFrameInfo& outGocatorFrameInfo);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::GocatorFrameInfo& inGocatorFrameInfo);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::XmlNode& outXmlNode);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::XmlNode& inXmlNode);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::TextSegmentationMethod& outTextSegmentationMethod);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::TextSegmentationMethod& inTextSegmentationMethod);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::TextThresholdingMethod& outTextThresholdingMethod);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::TextThresholdingMethod& inTextThresholdingMethod);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::TextSegmentation& outTextSegmentation);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::TextSegmentation& inTextSegmentation);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::OcrModel& outOcrModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::OcrModel& inOcrModel);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::ByteBuffer& outByteBuffer);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::ByteBuffer& inByteBuffer);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::LumeneraImageFormatParams& outLumeneraImageFormatParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::LumeneraImageFormatParams& inLumeneraImageFormatParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::LumeneraAcquisitionControlParams& outLumeneraAcquisitionControlParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::LumeneraAcquisitionControlParams& inLumeneraAcquisitionControlParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::HilscherDriverInformation& outHilscherDriverInformation);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::HilscherDriverInformation& inHilscherDriverInformation);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::HilscherDriverBoardInformation& outHilscherDriverBoardInformation);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::HilscherDriverBoardInformation& inHilscherDriverBoardInformation);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::HilscherDriverChannelInformation& outHilscherDriverChannelInformation);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::HilscherDriverChannelInformation& inHilscherDriverChannelInformation);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::NDCooccurrenceParams& outNDCooccurrenceParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::NDCooccurrenceParams& inNDCooccurrenceParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::NDGaussianMixtureParams& outNDGaussianMixtureParams);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::NDGaussianMixtureParams& inNDGaussianMixtureParams);

	AMR_PUBLIC void ReadData(atl::BinaryReader& reader, avl::TexemModel& outTexemModel);
	AMR_PUBLIC void WriteData(atl::BinaryWriter& writer, const avl::TexemModel& inTexemModel);

}

#endif //AVL_AMR_GENERATED_H_
