<?xml version="1.0"?>
<doc>
    <assembly>
        "Avl.Net.TypeSystem"
    </assembly>
    <members>
        <member name="T:AvlNet.TextureModel">
            <summary> Model of texture obtained using texture exemplars method. </summary>
        </member>
        <member name="T:AvlNet.TextSegmentation">
            <summary> How text should be split </summary>
        </member>
        <member name="T:AvlNet.TextThresholdingMethod">
            <summary> Parameters of text extraction algorithm. </summary>
        </member>
        <member name="T:AvlNet.TextSegmentationMethod">
            <summary> Parameters for region segmentation algorithms. </summary>
        </member>
        <member name="T:AvlNet.TexemModel">
            <summary> Model for TEXEM Filter </summary>
        </member>
        <member name="T:AvlNet.SurfaceStripe1D">
            <summary> Represents surface stripes found by [[1DEdgeDetection3D]] functions. </summary>
        </member>
        <member name="P:AvlNet.SurfaceFormat.ZScale">
            <summary>Surface scale in Z axis</summary>
        </member>
        <member name="P:AvlNet.SurfaceFormat.ZOffset">
            <summary>Surface offset in Z axis</summary>
        </member>
        <member name="P:AvlNet.SurfaceFormat.YScale">
            <summary>Surface scale in Y axis</summary>
        </member>
        <member name="P:AvlNet.SurfaceFormat.YOffset">
            <summary>Surface offset in Y axis</summary>
        </member>
        <member name="P:AvlNet.SurfaceFormat.XScale">
            <summary>Surface scale in X axis</summary>
        </member>
        <member name="P:AvlNet.SurfaceFormat.XOffset">
            <summary>Surface offset in X axis</summary>
        </member>
        <member name="P:AvlNet.SurfaceFormat.Type">
            <summary>Type of depth image pixel</summary>
        </member>
        <member name="P:AvlNet.SurfaceFormat.Height">
            <summary>Surface height</summary>
        </member>
        <member name="P:AvlNet.SurfaceFormat.Width">
            <summary>Surface width</summary>
        </member>
        <member name="T:AvlNet.SurfaceFormat">
            <summary> Stores information about dimensions, depth image pixel format, coordinate offsets and scales of a surface. </summary>
        </member>
        <member name="T:AvlNet.SurfaceEdge1D">
            <summary> Represents surface edges found by [[1DEdgeDetection3D]] functions. </summary>
        </member>
        <member name="P:AvlNet.StripeScanParams3D.MaxStripeWidth">
            <summary>Maximum acceptable stripe width</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams3D.MinStripeWidth">
            <summary>Minimum acceptable stripe width</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams3D.StripePolarity">
            <summary>Specifies the type of surface stripes to be detected</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams3D.MaxInnerEdgeMagnitude">
            <summary>Maximum strength of surface edges appearing between the two ends of a surface stripe</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams3D.MinMagnitude">
            <summary>Minimum acceptable surface edge strength</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams3D.SmoothingStdDev">
            <summary>Parameter for gaussian smoothing of the height profile</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams3D.ProfileInterpolation">
            <summary>Selects the method of sub-pixel precise edge detection</summary>
        </member>
        <member name="T:AvlNet.StripeScanParams3D">
            <summary> This structure contains parameters of surface stripe scanning process. Instance of this structure should be customized and passed as a parameter to surface stripe scanning related functions. </summary>
        </member>
        <member name="P:AvlNet.StripeScanParams.MaxStripeWidth">
            <summary>Maximum acceptable stripe width in pixels</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams.MinStripeWidth">
            <summary>Minimum acceptable stripe width in pixels</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams.StripePolarity">
            <summary>Specifies the type of stripes to be detected (Bright, Dark or Any)</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams.MaxInnerEdgeMagnitude">
            <summary>Maximum strength of edges appearing between the two ends of a stripe</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams.MinMagnitude">
            <summary>Minimum acceptable edge strength</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams.SmoothingStdDev">
            <summary>Parameter for gaussian smoothing of the brightness profile</summary>
        </member>
        <member name="P:AvlNet.StripeScanParams.ProfileInterpolation">
            <summary>Selects the method of sub-pixel precise edge detection</summary>
        </member>
        <member name="T:AvlNet.StripeScanParams">
            <summary> This structure contains parameters of stripe scanning process. Instance of this structure should be customized and passed as a parameter to stripe scanning related functions. </summary>
        </member>
        <member name="T:AvlNet.Stripe1D">
            <summary> Represents stripes found by [[1DEdgeDetection]] functions. </summary>
        </member>
        <member name="T:AvlNet.Size">
            <summary> Object contains integer dimensions. </summary>
        </member>
        <member name="T:AvlNet.ShapeRegion">
            <summary> Region defined by its shape. </summary>
        </member>
        <member name="T:AvlNet.SegmentFittingField">
            <summary> The structure defines a rectangular field in which a segment will be fitted. </summary>
        </member>
        <member name="T:AvlNet.SegmentScanField">
            <summary> The structure defines a rectangular field in which a series of scan will be performed. </summary>
        </member>
        <member name="P:AvlNet.RidgeScanParams.RidgePolarity">
            <summary>Specifies the type of ridges to be detected (Bright, Dark or Any)</summary>
        </member>
        <member name="P:AvlNet.RidgeScanParams.MinMagnitude">
            <summary>Minimum acceptable ridge strength</summary>
        </member>
        <member name="P:AvlNet.RidgeScanParams.RidgeOperator">
            <summary>Selects the function used to combine the brightness on the left and on the right side of the ridge</summary>
        </member>
        <member name="P:AvlNet.RidgeScanParams.RidgeMargin">
            <summary>Number of pixels that are sampled outside of the ridge, on both of its sides</summary>
        </member>
        <member name="P:AvlNet.RidgeScanParams.RidgeWidth">
            <summary>Expected thickness of the ridge in pixels</summary>
        </member>
        <member name="P:AvlNet.RidgeScanParams.SmoothingStdDev">
            <summary>Parameter for gaussian smoothing of the brightness profile</summary>
        </member>
        <member name="P:AvlNet.RidgeScanParams.ProfileInterpolation">
            <summary>Selects the method of sub-pixel precise ridge detection</summary>
        </member>
        <member name="T:AvlNet.RidgeScanParams">
            <summary> This structure contains parameters of ridge scanning process. Instance of this structure should be customized and passed as a parameter to ridge scanning related functions. </summary>
        </member>
        <member name="T:AvlNet.Ridge1D">
            <summary> Represents ridges found by [[1DEdgeDetection]] functions. </summary>
        </member>
        <member name="P:AvlNet.RegionProcessingParams.ClosingRadius">
            <summary>Radius of morphological closing of a region</summary>
        </member>
        <member name="P:AvlNet.RegionProcessingParams.OpeningRadius">
            <summary>Radius of morphological opening of a region</summary>
        </member>
        <member name="P:AvlNet.RegionProcessingParams.Kernel">
            <summary>Kernel shape for opening and closing of a region</summary>
        </member>
        <member name="T:AvlNet.RegionProcessingParams">
            <summary> This structure contains parameters for opening and closing of a region. </summary>
        </member>
        <member name="T:AvlNet.QRCode">
            <summary> Holds information about QR code: its position, version and text which is encoded. </summary>
        </member>
        <member name="T:AvlNet.ProfileStripe">
            <summary> Represents stripes found in profile. </summary>
        </member>
        <member name="T:AvlNet.ProfileSection">
            <summary> Represents sections found in profile. </summary>
        </member>
        <member name="T:AvlNet.ProfileRidge">
            <summary> Represents ridges found in profile. </summary>
        </member>
        <member name="T:AvlNet.ProfileEdge">
            <summary> Represents edges found in profile. </summary>
        </member>
        <member name="P:AvlNet.Position3D.Psi">
            <summary>Rotation around Z axis</summary>
        </member>
        <member name="P:AvlNet.Position3D.Theta">
            <summary>Rotation around Y axis</summary>
        </member>
        <member name="P:AvlNet.Position3D.Phi">
            <summary>Rotation around X axis</summary>
        </member>
        <member name="P:AvlNet.PCAModel.StandardDeviationVector">
            <summary>Original data standard deviations. Used to reconstruct data.</summary>
        </member>
        <member name="P:AvlNet.PCAModel.MeansVector">
            <summary>Original data means. Used to reconstruct data.</summary>
        </member>
        <member name="P:AvlNet.PCAModel.FeatureVector">
            <summary>PCA feature matrix.</summary>
        </member>
        <member name="T:AvlNet.PCAModel">
            <summary> Holds information about conducted Principal Components Analysis operation. </summary>
        </member>
        <member name="T:AvlNet.OrganicModel">
            <summary> Compound classifier suited for classification of organic objects. </summary>
        </member>
        <member name="P:AvlNet.OcrCandidate.Score">
            <summary>Score of recognized character</summary>
        </member>
        <member name="T:AvlNet.Object2D">
            <summary> This is output structure for template matching related functions. It groups matched object with its properties. </summary>
        </member>
        <member name="T:AvlNet.NDGaussianMixtureParams">
            <summary> Gaussian Parameters for TEXEM Filter </summary>
        </member>
        <member name="T:AvlNet.NDCooccurrenceParams">
            <summary> Parameters for COM Filter </summary>
        </member>
        <member name="P:AvlNet.LocalBlindness.Fuzziness">
            <summary>Makes effective threshold decrease linearly from 'Threshold' at distance 'Radius - Radius * Fuzziness' to zero at distance 'Radius + Radius * Fuzziness'</summary>
        </member>
        <member name="P:AvlNet.LocalBlindness.Threshold">
            <summary>Defines the fraction of a strong edge magnitude that a weaker edge has to have to be detected</summary>
        </member>
        <member name="P:AvlNet.LocalBlindness.Radius">
            <summary>Defines how far the blindness works</summary>
        </member>
        <member name="T:AvlNet.LocalBlindness">
            <summary> This structure contains parameters of 1D scanning process that can prevent weaker edges in the vicinity of some strong edges from being detected. </summary>
        </member>
        <member name="T:AvlNet.LinearFunction">
            <summary> Represents a linear function. </summary>
        </member>
        <member name="P:AvlNet.Line3D.DeltaZ">
            <summary>Z coordinate of a vector defining the line</summary>
        </member>
        <member name="P:AvlNet.Line3D.DeltaY">
            <summary>Y coordinate of a vector defining the line</summary>
        </member>
        <member name="P:AvlNet.Line3D.DeltaX">
            <summary>X coordinate of a vector defining the line</summary>
        </member>
        <member name="P:AvlNet.Line3D.Z">
            <summary>Z-coordinate of a point on the line</summary>
        </member>
        <member name="P:AvlNet.Line3D.Y">
            <summary>Y-coordinate of a point on the line</summary>
        </member>
        <member name="P:AvlNet.Line3D.X">
            <summary>X-coordinate of a point on the line</summary>
        </member>
        <member name="P:AvlNet.Line2D.C">
            <summary>Parameter C of line equation in general form</summary>
        </member>
        <member name="P:AvlNet.Line2D.B">
            <summary>Parameter B of line equation in general form</summary>
        </member>
        <member name="P:AvlNet.Line2D.A">
            <summary>Parameter A of line equation in general form</summary>
        </member>
        <member name="P:AvlNet.LensDistortion.K3">
            <summary>Radial distortion r^6 coefficient</summary>
        </member>
        <member name="P:AvlNet.LensDistortion.P2">
            <summary>Tangential distortion coefficient</summary>
        </member>
        <member name="P:AvlNet.LensDistortion.P1">
            <summary>Tangential distortion coefficient</summary>
        </member>
        <member name="P:AvlNet.LensDistortion.K2">
            <summary>Radial distortion r^4 coefficient</summary>
        </member>
        <member name="P:AvlNet.LensDistortion.K1">
            <summary>Radial distortion r^2 coefficient</summary>
        </member>
        <member name="P:AvlNet.IntensityThresholdParams.Hysteresis">
            <summary>Defines how much the threshold criteria are lowered for pixels neighboring with other foreground pixels</summary>
        </member>
        <member name="P:AvlNet.IntensityThresholdParams.MaxIntensity">
            <summary>Maximal intensity of a pixel that is considered foreground</summary>
        </member>
        <member name="P:AvlNet.IntensityThresholdParams.MinIntensity">
            <summary>Minimal intensity of a pixel that is considered foreground</summary>
        </member>
        <member name="T:AvlNet.IntensityThresholdParams">
            <summary> This structure contains parameters for thresholding an image. </summary>
        </member>
        <member name="P:AvlNet.ImageLocalExtremaVerification.MinDifference">
            <summary>Defines minimal difference between a local extremum pixel value and verification circle pixels</summary>
        </member>
        <member name="P:AvlNet.ImageLocalExtremaVerification.Radius">
            <summary>Defines radius of verification circle</summary>
        </member>
        <member name="P:AvlNet.ImageLocalExtremaVerification.PointCount">
            <summary>Defines how many of pixel values along verification circle will be checked in order to compute extremum strength</summary>
        </member>
        <member name="T:AvlNet.ImageLocalExtremaVerification">
            <summary> This structure contains parameters for verification of local extrema visible on an image. </summary>
        </member>
        <member name="T:AvlNet.HoughCircle">
            <summary> Aggregates detected circle with its score. </summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.DiagBrightLocations">
            <summary>Locations of sources for threshold values</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.DiagDarkLocations">
            <summary>Locations of sources for threshold values</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.DiagMinImages">
            <summary>Images with allowed dark defects. Only filled in diagnostic mode</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.DiagMaxImages">
            <summary>Images with allowed bright defects. Only filled in diagnostic mode</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.ErodedObjectRoi">
            <summary>Eroded object mask, ROI for defects, defined in cropped image coords</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.ObjectRoi">
            <summary>Object mask, defined in cropped image coords</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.CroppingRectangle">
            <summary>Object bounding rectangle</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.DarkImages">
            <summary>Lower bound for clean images</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.BrightImages">
            <summary>Upper bound for clean images</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.DiagFeatureNames">
            <summary>For each feature, its name</summary>
        </member>
        <member name="P:AvlNet.GoldenTemplate2Model_Intensity.FeatureSizes">
            <summary>For each feature type, its multiplicity</summary>
        </member>
        <member name="P:AvlNet.Gaussian.Dimensions">
            <summary>Number of dimensions.</summary>
        </member>
        <member name="P:AvlNet.Gaussian.Weight">
            <summary>Weight associated with gaussian.</summary>
        </member>
        <member name="P:AvlNet.Gaussian.Sigma">
            <summary>Vector of sigmas.</summary>
        </member>
        <member name="P:AvlNet.Gaussian.Mean">
            <summary>Vector of means</summary>
        </member>
        <member name="T:AvlNet.Gaussian">
            <summary> Describes multinomial gaussian function. </summary>
        </member>
        <member name="T:AvlNet.Gap1D">
            <summary> Represents gaps found by [[1DEdgeDetection]] functions. </summary>
        </member>
        <member name="T:AvlNet.FeatureClass">
            <summary> Represents a single class in supervised deep learning. </summary>
        </member>
        <member name="T:AvlNet.Extremum2D">
            <summary> Represents extremum found in image. </summary>
        </member>
        <member name="T:AvlNet.Extremum1D">
            <summary> Represents extremum found in profile. </summary>
        </member>
        <member name="P:AvlNet.EdgeScanParams3D.EdgeTransition">
            <summary>Specifies the type of surface edges to be detected</summary>
        </member>
        <member name="P:AvlNet.EdgeScanParams3D.MinMagnitude">
            <summary>Minimum acceptable surface edge strength</summary>
        </member>
        <member name="P:AvlNet.EdgeScanParams3D.SmoothingStdDev">
            <summary>Parameter for gaussian smoothing of the height profile</summary>
        </member>
        <member name="P:AvlNet.EdgeScanParams3D.ProfileInterpolation">
            <summary>Selects the method of sub-pixel precise surface edge detection</summary>
        </member>
        <member name="T:AvlNet.EdgeScanParams3D">
            <summary> This structure contains parameters of surface edge scanning process. Instance of this structure should be customized and passed as a parameter to surface edge scanning related functions. </summary>
        </member>
        <member name="P:AvlNet.EdgeScanParams.EdgeTransition">
            <summary>Specifies the type of edges to be detected</summary>
        </member>
        <member name="P:AvlNet.EdgeScanParams.MinMagnitude">
            <summary>Minimum acceptable edge strength</summary>
        </member>
        <member name="P:AvlNet.EdgeScanParams.SmoothingStdDev">
            <summary>Parameter for gaussian smoothing of the brightness profile</summary>
        </member>
        <member name="P:AvlNet.EdgeScanParams.ProfileInterpolation">
            <summary>Selects the method of sub-pixel precise edge detection</summary>
        </member>
        <member name="T:AvlNet.EdgeScanParams">
            <summary> This structure contains parameters of edge scanning process. Instance of this structure should be customized and passed as a parameter to edge scanning related functions. </summary>
        </member>
        <member name="T:AvlNet.Edge1D">
            <summary> Represents edges found by [[1DEdgeDetection]] functions. </summary>
        </member>
        <member name="P:AvlNet.DynamicThresholdParams.Hysteresis">
            <summary>Defines how much the threshold criteria are lowered for pixels neighboring with other foreground pixels</summary>
        </member>
        <member name="P:AvlNet.DynamicThresholdParams.MaxRelativeValue">
            <summary>Maximal relative value of a pixel that is considered foreground</summary>
        </member>
        <member name="P:AvlNet.DynamicThresholdParams.MinRelativeValue">
            <summary>Minimal relative value of a pixel that is considered foreground</summary>
        </member>
        <member name="P:AvlNet.DynamicThresholdParams.Radius">
            <summary>Radius of dynamic threshold internal blur</summary>
        </member>
        <member name="T:AvlNet.DynamicThresholdParams">
            <summary> This structure contains parameters for dynamic thresholding of an image. </summary>
        </member>
        <member name="P:AvlNet.DataMatrixDetectionParams.OutlineStrategy">
            <summary>Specifies precision of outline detection</summary>
        </member>
        <member name="P:AvlNet.DataMatrixDetectionParams.PyramidStrategy">
            <summary>Specifies the step of image downsampling used for finding codes at different scales</summary>
        </member>
        <member name="P:AvlNet.DataMatrixDetectionParams.DetectionMethod">
            <summary>Specifies which feature is used for code detection: the shape of the finder pattern or the blob of the quiet zone</summary>
        </member>
        <member name="P:AvlNet.DataMatrixDetectionParams.ForceIsotropy">
            <summary>Switches to image preprocessing methods that give more stable results for different code rotations</summary>
        </member>
        <member name="P:AvlNet.DataMatrixDetectionParams.NonBinarySegmentation">
            <summary>Assumes that there might be pixels significantly brighter or darker than the foreground or the background modules in near proximity of the quiet zone; use with DetectionMethod=FinderPattern</summary>
        </member>
        <member name="P:AvlNet.DataMatrixDetectionParams.DynamicSNRatio">
            <summary>Signal-to-Noise Ratio that dynamically increases ContrastThreshold; use with low values of ContrastThreshold</summary>
        </member>
        <member name="P:AvlNet.DataMatrixDetectionParams.ContrastPerturbations">
            <summary>Number of perturbations applied to ContrastThreshold for improving possibility of detection when lighting conditions are highly variable</summary>
        </member>
        <member name="P:AvlNet.DataMatrixDetectionParams.ContrastHysteresis">
            <summary>A value dynamically subtracted from ContrastThreshold to improve local segmentation</summary>
        </member>
        <member name="P:AvlNet.DataMatrixDetectionParams.ContrastThreshold">
            <summary>Guaranteed gray level difference between dark and bright modules</summary>
        </member>
        <member name="T:AvlNet.DataMatrixDetectionParams">
            <summary> Specifies how data matrix codes are being detected. </summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.AllowOversizedModules">
            <summary>Allows codes with foreground modules overlapping background modules</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.AllowPerspective">
            <summary>Allows codes with perspective distortion (up to a certain level)</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.MaxSlant">
            <summary>Maximal deviation from the right angle in the corner of the Finder Pattern</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.MaxRectangleRatio">
            <summary>Length ratio between the longer and the shorter side of the code's bounding rectangle</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.ExpectedGapSize">
            <summary>Highest distance between neighboring marks in the Finder Pattern</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.MaxModuleSize">
            <summary>Maximal size of a module in pixels</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.MinModuleSize">
            <summary>Minimal size of a module in pixels</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.MaxColumnCount">
            <summary>Maximal number of module columns</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.MinColumnCount">
            <summary>Minimal number of module columns</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.MaxRowCount">
            <summary>Maximal number of module rows</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.MinRowCount">
            <summary>Minimal number of module rows</summary>
        </member>
        <member name="P:AvlNet.DataMatrixCodeParams.Polarity">
            <summary>Specifies whether code is darker or brighter than the background</summary>
        </member>
        <member name="T:AvlNet.DataMatrixCodeParams">
            <summary> Specifies range of possible data matrix codes. </summary>
        </member>
        <member name="T:AvlNet.DataMatrix">
            <summary> Holds information about DataMatrix: its position and text which is encoded. </summary>
        </member>
        <member name="T:AvlNet.DataCode">
            <summary> Holds information about data code: its position and text which is encoded. </summary>
        </member>
        <member name="P:AvlNet.ColorThresholdParams.Hysteresis">
            <summary>Defines how much the threshold criterion is lowered for pixels neighboring with other foreground pixels</summary>
        </member>
        <member name="P:AvlNet.ColorThresholdParams.MaxDifference">
            <summary>Maximum difference between image pixel and model color</summary>
        </member>
        <member name="P:AvlNet.ColorThresholdParams.ChromaAmount">
            <summary>Proportion of chromatic information in distance computation</summary>
        </member>
        <member name="P:AvlNet.ColorThresholdParams.RgbColor">
            <summary>Color to compare the image to</summary>
        </member>
        <member name="T:AvlNet.ColorThresholdParams">
            <summary> This structure contains parameters for color-based thresholding of an image. </summary>
        </member>
        <member name="T:AvlNet.ClassConfidence">
            <summary> Represents a confidence of given class in Image Classification. </summary>
        </member>
        <member name="T:AvlNet.CircleFittingField">
            <summary> The structure defines a ring-like field in which a circle will be fitted. </summary>
        </member>
        <member name="P:AvlNet.Plane3D.D">
            <summary>Parameter D of plane equation in general form</summary>
        </member>
        <member name="P:AvlNet.Plane3D.C">
            <summary>Parameter C of plane equation in general form</summary>
        </member>
        <member name="P:AvlNet.Plane3D.B">
            <summary>Parameter B of plane equation in general form</summary>
        </member>
        <member name="P:AvlNet.Plane3D.A">
            <summary>Parameter A of plane equation in general form</summary>
        </member>
        <member name="P:AvlNet.BlobSplittingParams.RemoveBoundaryBlobs">
            <summary>Flag indicating whether blobs on border of region should be removed</summary>
        </member>
        <member name="P:AvlNet.BlobSplittingParams.MaxArea">
            <summary>Maximal area of a resulting blob</summary>
        </member>
        <member name="P:AvlNet.BlobSplittingParams.MinArea">
            <summary>Minimal area of a resulting blob</summary>
        </member>
        <member name="P:AvlNet.BlobSplittingParams.Connectivity">
            <summary>Type of connectivity used for splitting region into blobs</summary>
        </member>
        <member name="T:AvlNet.BlobSplittingParams">
            <summary> This structure contains parameters for splitting region into blobs. </summary>
        </member>
        <member name="T:AvlNet.BarcodeGrades">
            <summary> Holds information about Barcode quality. </summary>
        </member>
        <member name="T:AvlNet.ArcFittingField">
            <summary> The structure defines a ring-like field in which an arc will be fitted. </summary>
        </member>
        <member name="P:AvlNet.Anchor3D.AnchorZ">
            <summary>Relative Z coordinate of position</summary>
        </member>
        <member name="P:AvlNet.Anchor3D.AnchorY">
            <summary>Relative Y coordinate of position</summary>
        </member>
        <member name="P:AvlNet.Anchor3D.AnchorX">
            <summary>Relative X coordinate of position</summary>
        </member>
        <member name="T:AvlNet.Anchor3D">
            <summary> Decides about relative position of object in 3D. Exact behaviour depends on filter being used. </summary>
        </member>
        <member name="M:AvlNet.RegionOfInterest.GetPolygon">
            <summary>Gets a AvlNet::Path copy</summary>
        </member>
        <member name="M:AvlNet.RegionOfInterest.GetRegion">
            <summary>Gets a AvlNet::Region copy</summary>
        </member>
        <member name="P:AvlNet.Rectangle2D.Height">
            <summary>Vertical size</summary>
        </member>
        <member name="P:AvlNet.Rectangle2D.Width">
            <summary>Horizontal size</summary>
        </member>
        <member name="P:AvlNet.Rectangle2D.Angle">
            <summary>Rotation angle</summary>
        </member>
        <member name="P:AvlNet.Rectangle2D.Origin">
            <summary>Defines the top-left corner of the rectangle</summary>
        </member>
        <member name="M:AvlNet.Region.SetFrame(System.Int32,System.Int32)">
            <summary>Sets the region's frame.</summary>
        </member>
        <member name="P:AvlNet.Region.Size">
            <summary>Gets the PointRun count</summary>
        </member>
        <member name="P:AvlNet.Region.FrameHeight">
            <summary>Gets and sets the region's frame height</summary>
        </member>
        <member name="P:AvlNet.Region.FrameWidth">
            <summary>Gets and sets the region's frame width</summary>
        </member>
        <member name="P:AvlNet.Image.PixelSize">
            <summary>Gets the pixel size</summary>
        </member>
        <member name="P:AvlNet.Image.Depth">
            <summary>Gets the image depth</summary>
        </member>
        <member name="P:AvlNet.Image.Pitch">
            <summary>Gets the image pitch</summary>
        </member>
        <member name="P:AvlNet.Image.Height">
            <summary>Gets the image height</summary>
        </member>
        <member name="P:AvlNet.Image.Width">
            <summary>Gets the image width</summary>
        </member>
        <member name="P:AvlNet.Image.Data">
            <summary>Gets the pointer to the raw image data</summary>
        </member>
        <member name="M:AvlNet.Image.#ctor(AvlNet.Image)">
            <summary>Creates a new Image instance that is a copy of the passed image.</summary>
        </member>
        <member name="M:AvlNet.Image.#ctor(System.Drawing.Bitmap)">
            <summary>Creates an image using a System.Bitmap instance for supported bitmap formats or throws a NotSupportedException.</summary>
            <param name="bitmap">Instance of the System.Bitmap class.
Supported bitmap formats:
PixelFormat::Format24bppRgb, PixelFormat::Format32bppRgb, PixelFormat::Format32bppArgb, PixelFormat::Format48bppRgb, PixelFormat::Format64bppArgb,
PixelFormat::Format1bppIndexed, PixelFormat::Format4bppIndexed and PixelFormat::Format8bppIndexed
</param>
            <remarks>Supported bitmap formats:
PixelFormat::Format24bppRgb, 
PixelFormat::Format32bppRgb, 
PixelFormat::Format32bppArgb, 
PixelFormat::Format48bppRgb, 
PixelFormat::Format64bppArgb,
PixelFormat::Format1bppIndexed,
PixelFormat::Format4bppIndexed,
PixelFormat::Format8bppIndexed
</remarks>
        </member>
        <member name="M:AvlNet.Image.ConvertSubpixel(System.Void*)">
            <summary>
Reads and converts subpixel (pixel channel) value
</summary>
            <param name="data">Pointer on subpixel</param>
            <returns>Subpoxel color intensity in range 0...255</returns>
        </member>
        <member name="P:AvlNet.Pixel.Aqua">
            <summary> Gets the library-defined RGB color that has an RGB value of #00FFFF </summary>
        </member>
        <member name="P:AvlNet.Pixel.Teal">
            <summary> Gets the library-defined RGB color that has an RGB value of #008080 </summary>
        </member>
        <member name="P:AvlNet.Pixel.Blue">
            <summary> Gets the library-defined RGB color that has an RGB value of #0000FF </summary>
        </member>
        <member name="P:AvlNet.Pixel.Navy">
            <summary> Gets the library-defined RGB color that has an RGB value of #000080 </summary>
        </member>
        <member name="P:AvlNet.Pixel.Yellow">
            <summary> Gets the library-defined RGB color that has an RGB value of #FFFF00 </summary>
        </member>
        <member name="P:AvlNet.Pixel.Olive">
            <summary> Gets the library-defined RGB color that has an RGB value of #808000 </summary>
        </member>
        <member name="P:AvlNet.Pixel.Green">
            <summary> Gets the library-defined RGB color that has an RGB value of #FF00FF00 </summary>
        </member>
        <member name="P:AvlNet.Pixel.DarkGreen">
            <summary> Gets the library-defined RGB color that has an RGB value of #008000 </summary>
        </member>
        <member name="P:AvlNet.Pixel.Fuchsia">
            <summary> Gets the library-defined RGB color that has an RGB value of #FF00FF </summary>
        </member>
        <member name="P:AvlNet.Pixel.Purple">
            <summary> Gets the library-defined RGB color that has an RGB value of #800080 </summary>
        </member>
        <member name="P:AvlNet.Pixel.Red">
            <summary> Gets the library-defined RGB color that has an RGB value of #FF0000 </summary>
        </member>
        <member name="P:AvlNet.Pixel.Maroon">
            <summary> Gets the library-defined RGB color that has an RGB value of #800000 </summary>
        </member>
        <member name="P:AvlNet.Pixel.White">
            <summary> Gets the library-defined RGB color that has an RGB value of #FFFFFFFF </summary>
        </member>
        <member name="P:AvlNet.Pixel.Gray">
            <summary> Gets the library-defined RGB color that has an RGB value of #808080 </summary>
        </member>
        <member name="P:AvlNet.Pixel.Silver">
            <summary> Gets the library-defined RGB color that has an RGB value of #C0C0C0 </summary>
        </member>
        <member name="P:AvlNet.Pixel.Black">
            <summary> Gets the library-defined RGB color that has an RGB value of #000000 </summary>
        </member>
        <member name="P:AvlNet.CoordinateSystem2D.Default">
            <summary> Default CoordinateSystem2D </summary>
        </member>
        <member name="P:AvlNet.ByteBuffer.Size">
            <summary>Gets the current buffer content size in bytes</summary>
        </member>
        <member name="T:AvlNet.ByteBuffer">
            <summary>This type stores a raw binary data of variable length (a continuous stream of bytes).
It is usually used when implementing a non-textual custom communication with external systems and devices,
or when working with non-textual files of arbitrary formats.</summary>
        </member>
        <member name="T:AvlNet.XIMEATriggerMode">
            <summary>Possible trigger modes.</summary>
        </member>
        <member name="T:AvlNet.XIMEAGPOState">
            <summary>Possible states of General Purpose Output ports.</summary>
        </member>
        <member name="T:AvlNet.XIMEAGPIState">
            <summary>Possible states of General Purpose Input ports.</summary>
        </member>
        <member name="T:AvlNet.XIMEAGPIOState">
            <summary>Possible states of GPIO port.</summary>
        </member>
        <member name="T:AvlNet.XIMEAFilterMode">
            <summary>Possible internal filters.</summary>
        </member>
        <member name="T:AvlNet.XiApiTriggerSource">
            <summary>Possible trigger source settings.</summary>
        </member>
        <member name="F:AvlNet.XiApiTriggerSource.TRG_SOFTWARE">
            <summary>Capture is started with software trigger</summary>
        </member>
        <member name="F:AvlNet.XiApiTriggerSource.TRG_EDGE_FALLING">
            <summary>Capture is started on falling edge of selected input</summary>
        </member>
        <member name="F:AvlNet.XiApiTriggerSource.TRG_EDGE_RISING">
            <summary>Capture is started on rising edge of selected input</summary>
        </member>
        <member name="F:AvlNet.XiApiTriggerSource.TRG_OFF">
            <summary>Capture of next image is automatically started after previous</summary>
        </member>
        <member name="T:AvlNet.XiApiImageDataFormat">
            <summary>Possible image formats.</summary>
        </member>
        <member name="F:AvlNet.XiApiImageDataFormat.RAW16">
            <summary>16 bits per pixel raw data from sensor</summary>
        </member>
        <member name="F:AvlNet.XiApiImageDataFormat.RAW8">
            <summary>8 bits per pixel raw data from sensor</summary>
        </member>
        <member name="F:AvlNet.XiApiImageDataFormat.RGB32">
            <summary>RGBA data format (converted BGRA)</summary>
        </member>
        <member name="F:AvlNet.XiApiImageDataFormat.RGB24">
            <summary>RGB data format (converted BGR) </summary>
        </member>
        <member name="F:AvlNet.XiApiImageDataFormat.MONO16">
            <summary>16 bits per pixel [Intensity LSB] [Intensity MSB]</summary>
        </member>
        <member name="F:AvlNet.XiApiImageDataFormat.MONO8">
            <summary>8 bits per pixel [Intensity]</summary>
        </member>
        <member name="T:AvlNet.XiApiGPOMode">
            <summary>Possible roles of General Purpose Output ports.</summary>
        </member>
        <member name="F:AvlNet.XiApiGPOMode.GPO_EXPOSURE_ACTIVE_NEG">
            <summary>Output is off while frame exposure</summary>
        </member>
        <member name="F:AvlNet.XiApiGPOMode.GPO_EXPOSURE_ACTIVE">
            <summary>Output is on while frame exposure</summary>
        </member>
        <member name="F:AvlNet.XiApiGPOMode.GPO_FRAME_ACTIVE_NEG">
            <summary>Output is off while frame exposure,read,transfer</summary>
        </member>
        <member name="F:AvlNet.XiApiGPOMode.GPO_FRAME_ACTIVE">
            <summary>Output is on while frame exposure,read,transfer</summary>
        </member>
        <member name="F:AvlNet.XiApiGPOMode.GPO_ON">
            <summary>Output is on (voltage or switched_on)</summary>
        </member>
        <member name="F:AvlNet.XiApiGPOMode.GPO_OFF">
            <summary>Output is off (zero voltage or switched_off)</summary>
        </member>
        <member name="T:AvlNet.XiApiGPIMode">
            <summary>Possible roles of General Purpose Input ports.</summary>
        </member>
        <member name="F:AvlNet.XiApiGPIMode.GPI_EXT_EVENT">
            <summary>External signal input</summary>
        </member>
        <member name="F:AvlNet.XiApiGPIMode.GPI_TRIGGER">
            <summary>Input can be used for triggering</summary>
        </member>
        <member name="F:AvlNet.XiApiGPIMode.GPI_OFF">
            <summary>Input is off (zero voltage or switched_off)</summary>
        </member>
        <member name="T:AvlNet.XiApiDownsampling">
            <summary>Possible ways of changing image resolution.</summary>
        </member>
        <member name="F:AvlNet.XiApiDownsampling.X4_SKIPPING">
            <summary>4x4 sensor pixels = 1 image pixel, pixels are skipped</summary>
        </member>
        <member name="F:AvlNet.XiApiDownsampling.X2_SKIPPING">
            <summary>2x2 sensor pixels = 1 image pixel, pixels are skipped</summary>
        </member>
        <member name="F:AvlNet.XiApiDownsampling.X1_SKIPPING">
            <summary>1 sensor pixel = 1 image pixel, pixels are skipped</summary>
        </member>
        <member name="F:AvlNet.XiApiDownsampling.X4_BINNING">
            <summary>4x4 sensor pixels = 1 image pixel, pixels are interpolated</summary>
        </member>
        <member name="F:AvlNet.XiApiDownsampling.X2_BINNING">
            <summary>2x2 sensor pixels = 1 image pixel, pixels are interpolated</summary>
        </member>
        <member name="F:AvlNet.XiApiDownsampling.X1_BINNING">
            <summary>1 sensor pixel = 1 image pixel, pixels are interpolated</summary>
        </member>
        <member name="T:AvlNet.WebCameraInputFormat">
            <summary>WebCamera preferred input pixel type.</summary>
        </member>
        <member name="T:AvlNet.VisionBoxTriggerSource">
            <summary>Possible source-signals for Trigger device</summary>
        </member>
        <member name="T:AvlNet.VisionBoxStrobeSource">
            <summary>Possible signal sources for strobe device</summary>
        </member>
        <member name="T:AvlNet.VisionBoxStrobeMode">
            <summary>Possible mode of strobes</summary>
        </member>
        <member name="T:AvlNet.VisionBoxRS422OutSource">
            <summary>Possible sources of VisionBox RS422 outputs.</summary>
        </member>
        <member name="T:AvlNet.VisionBoxMuxSource">
            <summary>Signals possible to connect to internal Multiplexer</summary>
        </member>
        <member name="T:AvlNet.VisionBoxLedMode">
            <summary>Possible to set modes of Light Emitting Diodes of VisionBox computers.</summary>
        </member>
        <member name="T:AvlNet.VisionBoxIOSchedulerEncoderDir">
            <summary>Describes direction of encoder for IO Scheduler of VisionBox.</summary>
        </member>
        <member name="T:AvlNet.VisionBoxIOSchedulerCounter">
            <summary>Possible modes of scheduler counter.</summary>
        </member>
        <member name="T:AvlNet.VisionBoxIOSchedulerCmpSrc">
            <summary>Possible comparison sources for VisionBox IO Scheduler.</summary>
        </member>
        <member name="T:AvlNet.VisionBoxDigitalOutSource">
            <summary>Possible sources for digital output pins.</summary>
        </member>
        <member name="T:AvlNet.VimbaTriggerSelector">
            <summary>Selects the type of trigger to configure.</summary>
        </member>
        <member name="T:AvlNet.VimbaTriggerActivation">
            <summary>Specifies the activation mode of the trigger.</summary>
        </member>
        <member name="T:AvlNet.VimbaPixelFormat">
            <summary>Possible color formats of image.</summary>
        </member>
        <member name="T:AvlNet.VimbaIIDCMode">
            <summary>The IIDC Format.</summary>
        </member>
        <member name="T:AvlNet.VimbaExposureMode">
            <summary>Sets the operation mode of the Exposure.</summary>
        </member>
        <member name="T:AvlNet.VimbaExposureAuto">
            <summary>Automatic exposure mode when ExposureMode is Timed.</summary>
        </member>
        <member name="T:AvlNet.VideoEncoder">
            <summary>Supported video encoders. Note that those encoders are not shipped with the software.</summary>
        </member>
        <member name="F:AvlNet.VideoEncoder.Xvid">
            <summary>Xvid codec</summary>
            <remarks>Popular, modern encoder available at &lt;a href="https://www.xvid.com/"&gt;https://www.xvid.com&lt;/a&gt;</remarks>
        </member>
        <member name="F:AvlNet.VideoEncoder.FFDShow">
            <summary>Implementation of Video for Windows (VFW) codec and a DirectShow filter</summary>
            <remarks>The newest version can be obtained from the website &lt;a href="http://ffdshow-tryout.sourceforge.net"&gt;http://ffdshow-tryout.sourceforge.net&lt;/a&gt;</remarks>
        </member>
        <member name="F:AvlNet.VideoEncoder.Cinepak">
            <summary>Cinepak lossy video codec</summary>
            <remarks>Available on nearly every Windows-based computer.</remarks>
        </member>
        <member name="T:AvlNet.TurnAnglePrecision">
            <summary>Switches between pixel-precise or subpixel-precise operation.</summary>
        </member>
        <member name="T:AvlNet.TurnAngleDirection">
            <summary>Decides which turns are important in operation being performed.</summary>
        </member>
        <member name="F:AvlNet.TurnAngleDirection.All">
            <summary>Both turns are considered.</summary>
        </member>
        <member name="F:AvlNet.TurnAngleDirection.Right">
            <summary>Only right turns are considered.</summary>
        </member>
        <member name="F:AvlNet.TurnAngleDirection.Left">
            <summary>Only left turns are considered.</summary>
        </member>
        <member name="T:AvlNet.TimingMode">
            <summary>Possible configurations of tasks' timing.</summary>
        </member>
        <member name="T:AvlNet.TileTranslationMode">
            <summary>How many translation of a tile should be considered.</summary>
        </member>
        <member name="F:AvlNet.TileTranslationMode.EightDirections">
            <summary>Four basic and four diagonal translations.</summary>
        </member>
        <member name="F:AvlNet.TileTranslationMode.FourDirections">
            <summary>Four basic translations.</summary>
        </member>
        <member name="T:AvlNet.TileSize">
            <summary>Defines tile size used in segmentation.</summary>
        </member>
        <member name="F:AvlNet.TileSize._32x32">
            <summary>Extra large</summary>
        </member>
        <member name="F:AvlNet.TileSize._16x16">
            <summary>Large</summary>
        </member>
        <member name="F:AvlNet.TileSize._8x8">
            <summary>Medium</summary>
        </member>
        <member name="F:AvlNet.TileSize._4x4">
            <summary>Small</summary>
        </member>
        <member name="T:AvlNet.TiffImageCompressionScheme">
            <summary>Available TIFF compression schemes.</summary>
        </member>
        <member name="F:AvlNet.TiffImageCompressionScheme.Packbits">
            <summary>PackBits (or Macintosh RLE, or Apple Macintosh PackBits) is a fast lossless compression scheme. Is a form of RLE compression.</summary>
        </member>
        <member name="F:AvlNet.TiffImageCompressionScheme.LZW">
            <summary>The Lempelâ€“Zivâ€“Welch (LSW) is an improved lossless implementation of the LZ78 compression algorithm.</summary>
        </member>
        <member name="F:AvlNet.TiffImageCompressionScheme.DeflateAdobe">
            <summary>A lossless deflate compression algorithm provided by Adobe.</summary>
        </member>
        <member name="F:AvlNet.TiffImageCompressionScheme.Deflate">
            <summary>Default lossless compression scheme which uses Deflate data compression algorithm. It is a combination of the LZ77 algorithm and Huffman coding.</summary>
        </member>
        <member name="F:AvlNet.TiffImageCompressionScheme.JPEG">
            <summary>A lossy JPEG compression scheme.</summary>
        </member>
        <member name="F:AvlNet.TiffImageCompressionScheme.None">
            <summary>Without any compression.</summary>
        </member>
        <member name="T:AvlNet.ThresholdSelectionMethod">
            <summary>Possible methods of selecting of the threshold automatically.</summary>
        </member>
        <member name="F:AvlNet.ThresholdSelectionMethod.HistogramIntermodes">
            <summary>Assuming the image histogram is bimodal, smooths it until there are only two local maxima and returns their average.</summary>
        </member>
        <member name="F:AvlNet.ThresholdSelectionMethod.Entropy">
            <summary>Depends on image histogram's entropy. Best for images with only a few foreground pixels.</summary>
        </member>
        <member name="F:AvlNet.ThresholdSelectionMethod.ClusteringOtsu">
            <summary>Otsu clustering</summary>
            <remarks>See &lt;a href="https://en.wikipedia.org/wiki/Otsu's_method"&gt;Otsu method on Wikipedia&lt;/a&gt;. Fast and best method for most images.</remarks>
        </member>
        <member name="F:AvlNet.ThresholdSelectionMethod.ClusteringKMeans">
            <summary>KMeans clustering</summary>
            <remarks>See &lt;a href="https://en.wikipedia.org/wiki/K-means_clustering"&gt;K-means clustering on Wikipedia &lt;/a&gt;.</remarks>
        </member>
        <member name="F:AvlNet.ThresholdSelectionMethod.ClusteringKittler">
            <summary>Minimum error thresholding.</summary>
        </member>
        <member name="T:AvlNet.ThresholdingAlgorithm">
            <summary>Which algorithm should be used to extract image from the background.</summary>
        </member>
        <member name="T:AvlNet.ThresholdDynamicReferenceMethod">
            <summary>Possible methods of calculating dynamic threshold values. See SmoothImage filter family.</summary>
        </member>
        <member name="T:AvlNet.ThorlabsTriggerPolarity">
            <summary>Defines trigger polarity for Thorlabs cameras.</summary>
        </member>
        <member name="F:AvlNet.ThorlabsTriggerPolarity.ACTIVE_LOW">
            <summary>Trigger on low state or on falling edge</summary>
        </member>
        <member name="F:AvlNet.ThorlabsTriggerPolarity.ACTIVE_HIGH">
            <summary>Trigger on high state or on rising edge</summary>
        </member>
        <member name="T:AvlNet.ThorlabsTaps">
            <summary>Defines number of taps for Thorlabs cameras.</summary>
        </member>
        <member name="T:AvlNet.ThorlabsReadoutSpeed">
            <summary>Defines sensor readout speed for Thorlabs cameras.</summary>
        </member>
        <member name="T:AvlNet.TheilSenVariant">
            <summary>Defines a specific method of the Theil-Sen family.</summary>
        </member>
        <member name="F:AvlNet.TheilSenVariant.Siegel">
            <summary>Siegel's improvement assuring 50% breakdown point.</summary>
        </member>
        <member name="F:AvlNet.TheilSenVariant.TheilSen">
            <summary>The original Theil-Sen method.</summary>
        </member>
        <member name="T:AvlNet.TestImageId">
            <summary>Type of test image.</summary>
        </member>
        <member name="T:AvlNet.SynViewUserOutputs">
            <summary>Possible user outputs.</summary>
        </member>
        <member name="T:AvlNet.SynViewTriggerSource">
            <summary>Possible trigger sources.</summary>
        </member>
        <member name="T:AvlNet.SynViewTriggerActivation">
            <summary>Activation mode of trigger.</summary>
        </member>
        <member name="T:AvlNet.SynViewTimerTriggerSource">
            <summary>Possible timer trigger source.</summary>
        </member>
        <member name="T:AvlNet.SynViewTimerSelector">
            <summary>Possible timers.</summary>
        </member>
        <member name="T:AvlNet.SynViewStrobeEnable">
            <summary>Selects the LED clusters of the strobe light.</summary>
        </member>
        <member name="T:AvlNet.SynViewLineSource">
            <summary>Selects which internal signal will drive output signal.</summary>
        </member>
        <member name="T:AvlNet.SynViewColorFormat">
            <summary>Possible color formats of image.</summary>
        </member>
        <member name="T:AvlNet.SynViewAutoMode">
            <summary>Possible exposure settings.</summary>
        </member>
        <member name="T:AvlNet.SvmType">
            <summary>Possible Support Vector Machine types.</summary>
        </member>
        <member name="T:AvlNet.SvmKernelType">
            <summary>Available Support Vector Machine kernels.</summary>
        </member>
        <member name="T:AvlNet.SurfaceStripePolarity">
            <summary>Determines which pixel values will be taken under consideration in processing in surface edge detection related operations.</summary>
        </member>
        <member name="F:AvlNet.SurfaceStripePolarity.AnyValidInvalid">
            <summary>Stripe with no Z values or all existing Z values.</summary>
        </member>
        <member name="F:AvlNet.SurfaceStripePolarity.Valid">
            <summary>Stripe with existing Z values.</summary>
        </member>
        <member name="F:AvlNet.SurfaceStripePolarity.Invalid">
            <summary>Stripe with no Z values.</summary>
        </member>
        <member name="F:AvlNet.SurfaceStripePolarity.AnyLowHigh">
            <summary>Stripe with high or low Z values.</summary>
        </member>
        <member name="F:AvlNet.SurfaceStripePolarity.Low">
            <summary>Stripe with low Z values.</summary>
        </member>
        <member name="F:AvlNet.SurfaceStripePolarity.High">
            <summary>Stripe with high Z values.</summary>
        </member>
        <member name="T:AvlNet.SurfaceEdgeTransition">
            <summary>Decides what is considered a surface edge.</summary>
        </member>
        <member name="F:AvlNet.SurfaceEdgeTransition.AnyValidInvalid">
            <summary>Any change in points validity is going to be considered a surface edge.</summary>
        </member>
        <member name="F:AvlNet.SurfaceEdgeTransition.ValidToInvalid">
            <summary>Change from valid points to invalid ones is considered a surface edge.</summary>
        </member>
        <member name="F:AvlNet.SurfaceEdgeTransition.InvalidToValid">
            <summary>Change from invalid points to valid ones is considered a surface edge.</summary>
        </member>
        <member name="F:AvlNet.SurfaceEdgeTransition.AnyLowHigh">
            <summary>Any change in points height is going to be considered a surface edge.</summary>
        </member>
        <member name="F:AvlNet.SurfaceEdgeTransition.LowToHigh">
            <summary>Change from lower points to higher ones is considered a surface edge.</summary>
        </member>
        <member name="F:AvlNet.SurfaceEdgeTransition.HighToLow">
            <summary>Change from higher points to lower ones is considered a surface edge.</summary>
        </member>
        <member name="T:AvlNet.StreamMode">
            <summary>Describes, how to interpret file stream.</summary>
        </member>
        <member name="F:AvlNet.StreamMode.Text">
            <summary>File is being treated as set of letters.</summary>
        </member>
        <member name="F:AvlNet.StreamMode.Binary">
            <summary>File is being treated as stream of bytes.</summary>
        </member>
        <member name="T:AvlNet.SplitDirection">
            <summary>Describes a direction in which a box or a rectangle can be split.</summary>
        </member>
        <member name="T:AvlNet.SpinnakerPixelFormat">
            <summary>Sets captured image pixel format.</summary>
        </member>
        <member name="T:AvlNet.SpinnakerBayerConverter">
            <summary>Bayer to RGB converter. Used only when Bayer pixel format selected</summary>
        </member>
        <member name="F:AvlNet.SpinnakerBayerConverter.DirectionalFiltering">
            <summary>Best quality but much faster than rigorous</summary>
        </member>
        <member name="F:AvlNet.SpinnakerBayerConverter.Ipp">
            <summary>Multi-threaded with similar results to edge sensing</summary>
        </member>
        <member name="F:AvlNet.SpinnakerBayerConverter.Rigorous">
            <summary>Slowest but produces good results</summary>
        </member>
        <member name="F:AvlNet.SpinnakerBayerConverter.HQLinear">
            <summary>Well-balanced speed and quality</summary>
        </member>
        <member name="F:AvlNet.SpinnakerBayerConverter.EdgeSensing">
            <summary>Weights surrounding pixels based on localized edge orientation</summary>
        </member>
        <member name="F:AvlNet.SpinnakerBayerConverter.NearestNeighbour">
            <summary>Fastest but lowest quality</summary>
        </member>
        <member name="F:AvlNet.SpinnakerBayerConverter.NoColorProcessing">
            <summary>No color processing</summary>
        </member>
        <member name="F:AvlNet.SpinnakerBayerConverter.Default">
            <summary>Spinnaker Default method</summary>
        </member>
        <member name="F:AvlNet.SpinnakerBayerConverter.AVLConverter">
            <summary>Bayer converter from Adaptive Vision Library</summary>
        </member>
        <member name="T:AvlNet.SpinnakerAutoSettings">
            <summary>Automatic control mode configuration.</summary>
        </member>
        <member name="T:AvlNet.SortingOrder">
            <summary>Decides whether objects should be sorted in ascendant or descendant order.</summary>
        </member>
        <member name="T:AvlNet.SmoothImageMedianKernel">
            <summary>Describes kernel shape to be used during median image smoothing.</summary>
        </member>
        <member name="T:AvlNet.ShiftType">
            <summary>Describes ways of object shifting</summary>
        </member>
        <member name="F:AvlNet.ShiftType.Vertical">
            <summary>Shifts are performed along Vertical, or Y axis.</summary>
        </member>
        <member name="F:AvlNet.ShiftType.Horizontal">
            <summary>Shifts are performed along horizontal, or X axis.</summary>
        </member>
        <member name="F:AvlNet.ShiftType.Any">
            <summary>Object is shifted along both axes.</summary>
        </member>
        <member name="T:AvlNet.ShiftDirection">
            <summary>Direction that vertices of the path will be moved in.</summary>
        </member>
        <member name="T:AvlNet.ShapeMomentType">
            <summary>Shape moments are shapes' mathematical features computed as integrals over shape points, where \(p_x\) and \(p_y\) denotes x and y coordinate of a point.</summary>
        </member>
        <member name="F:AvlNet.ShapeMomentType._20">
            <summary>Sum of squares of integral point y-coordinates in the Region</summary>
            <remarks>\(Moment_{0,2}(S) = \int_{S} p_y^2\)</remarks>
        </member>
        <member name="F:AvlNet.ShapeMomentType._11">
            <summary>Sum of shape integral point x-coordinate and y-coordinate products</summary>
            <remarks>\(Moment_{1,1}(S) = \int_{S} p_x p_y\)</remarks>
        </member>
        <member name="F:AvlNet.ShapeMomentType._02">
            <summary>Sum of squares of integral point x-coordinates in the shape</summary>
            <remarks>\(Moment_{2,0}(S) = \int_{S} p_x^2\)</remarks>
        </member>
        <member name="T:AvlNet.SerialPortStopBits">
            <summary>Describes possible numbers of stop bits.</summary>
        </member>
        <member name="T:AvlNet.SerialPortParity">
            <summary>Possible values of parity.</summary>
        </member>
        <member name="T:AvlNet.SerialPortFlowControl">
            <summary>Possible flow control settings.</summary>
        </member>
        <member name="T:AvlNet.Selection">
            <summary>Describes which result will be reported as filter output.</summary>
        </member>
        <member name="T:AvlNet.SegmentationAlgorithm">
            <summary>The way in which text should be split int characters.</summary>
        </member>
        <member name="T:AvlNet.SamplingDensity">
            <summary>Predefined sampling density.</summary>
        </member>
        <member name="T:AvlNet.RotationSizeMode">
            <summary>Describes image size change when rotating is performed.</summary>
        </member>
        <member name="F:AvlNet.RotationSizeMode.Preserve">
            <summary>Size of image will be preserved, so that part of transformed image may be lost.</summary>
        </member>
        <member name="F:AvlNet.RotationSizeMode.Fit">
            <summary>Image size will be extended to fit transformed image.</summary>
        </member>
        <member name="T:AvlNet.RotationDirection">
            <summary>Decides about direction of rotation when operation of angle measuring or vector interpolation are considered.</summary>
        </member>
        <member name="T:AvlNet.RoseekWorkingMode">
            <summary>Working mode of image acquisition.</summary>
        </member>
        <member name="T:AvlNet.RoseekResolutionMode">
            <summary>Sets resolution of image.</summary>
        </member>
        <member name="F:AvlNet.RoseekResolutionMode.FullHD">
            <summary>This parameter stands for FullHD. After taking effect, the camera resolution is 1920x1080.</summary>
        </member>
        <member name="F:AvlNet.RoseekResolutionMode.ROI">
            <summary>It stands for ROI.</summary>
        </member>
        <member name="F:AvlNet.RoseekResolutionMode.AllPixel">
            <summary>It stands for full resolution.</summary>
        </member>
        <member name="T:AvlNet.RoseekLEDStatus">
            <summary>Device LED state.</summary>
        </member>
        <member name="T:AvlNet.RoseekLEDDriverType">
            <summary>LED driver type.</summary>
        </member>
        <member name="T:AvlNet.RoseekLEDDriverMode">
            <summary>Configures LED driver mode.</summary>
        </member>
        <member name="T:AvlNet.RoseekImageFormat">
            <summary>Sets captured image pixel format.</summary>
        </member>
        <member name="T:AvlNet.RoseekExposureMode">
            <summary>Working mode of image acquisition.</summary>
        </member>
        <member name="T:AvlNet.RidgeOperator">
            <summary>Method of the ridge magnitude measuring.</summary>
        </member>
        <member name="T:AvlNet.ResizeProfileInterpolation">
            <summary>Methods of interpolation during profile resizing.</summary>
        </member>
        <member name="F:AvlNet.ResizeProfileInterpolation.Linear">
            <summary>An algorithm, which linearly interpolates between input profiles' values distanced by step, given as \(\frac{newSize}{oldSize}\). Values on that range borders are preserved.</summary>
        </member>
        <member name="F:AvlNet.ResizeProfileInterpolation.NearestNeighbour">
            <summary>Nearest corresponding value from input profile is selected as output profile value. This method is strongly optimized for profile sizes which are its multiplicity.</summary>
        </member>
        <member name="T:AvlNet.ResizeMethod">
            <summary>Interpolation method used when image resizing is considered.</summary>
        </member>
        <member name="F:AvlNet.ResizeMethod.Area">
            <summary>The most precise, but computationally expensive.</summary>
        </member>
        <member name="F:AvlNet.ResizeMethod.Bilinear">
            <summary>Precise and fast.</summary>
        </member>
        <member name="F:AvlNet.ResizeMethod.NearestNeighbour">
            <summary>The simplest and the fastest method.</summary>
        </member>
        <member name="T:AvlNet.RemoteGrabberPixelFormat">
            <summary>Possible color formats of image.</summary>
        </member>
        <member name="T:AvlNet.RegionSkeletonMethod">
            <summary>Available methods for region skeletonization operation.</summary>
        </member>
        <member name="F:AvlNet.RegionSkeletonMethod.TwelveConnected">
            <summary>This method uses twelve-neighborhood, which is larger kernel than in EightConnected method.</summary>
        </member>
        <member name="F:AvlNet.RegionSkeletonMethod.EightConnected">
            <summary>Structuring elements comes from Golay alphabet.</summary>
        </member>
        <member name="T:AvlNet.RegionMomentType">
            <summary>Region mathematical feature computed as sum of region pixel coordinates</summary>
            <remarks>Region moments are regions' mathematical features computed as sums over region pixels, where \(p_x\) and \(p_y\) denotes x and y coordinate of a pixel.</remarks>
        </member>
        <member name="F:AvlNet.RegionMomentType._20">
            <summary>Sum of squares of pixel y-coordinates in the region</summary>
            <remarks>\(Moment_{0,2}(R) = \sum_{p \in R} p_y^2\)</remarks>
        </member>
        <member name="F:AvlNet.RegionMomentType._11">
            <summary>Sum of region pixel x-coordinate and y-coordinate products</summary>
            <remarks>\(Moment_{1,1}(R) = \sum_{p \in R} p_x p_y\)</remarks>
        </member>
        <member name="F:AvlNet.RegionMomentType._02">
            <summary>Sum of squares of pixel x-coordinates in the region</summary>
            <remarks>\(Moment_{2,0}(R) = \sum_{p \in R} p_x^2\)</remarks>
        </member>
        <member name="T:AvlNet.RegionFeature">
            <summary>Determines which region feature value to compute.</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.Rectangularity">
            <summary>Ratio of region area to its bounding rectangle area. For details, see [[RegionRectangularity]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.PerimeterLength">
            <summary>Length or region perimeter. Read more: [[RegionPerimeterLength]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.NumberOfHoles_FourDirections">
            <summary>Number of region holes computed using FourDirections connectivity by [[RegionNumberOfHoles]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.NumberOfHoles_EightDirections">
            <summary>Number of region holes computed using EightDirections connectivity by [[RegionNumberOfHoles]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.MinorAxisLength">
            <summary>Length of the region minor elliptic axis. Region axes can be determined by [[RegionEllipticAxes]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.MajorAxisLength">
            <summary>Length of the region major elliptic axis. Region axes can be determined by [[RegionEllipticAxes]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.MassCenterY">
            <summary>OY coordinate of region mass center. Mass center of a region can be calculated by [[RegionMassCenter]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.MassCenterX">
            <summary>OX coordinate of region mass center. Mass center of a region can be calculated by [[RegionMassCenter]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.Elongation">
            <summary>Ratio of region length to its width. For details, see [[RegionElongation]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.DiameterLength">
            <summary>Length of region diameter. Read more: [[RegionDiameter]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.Convexity">
            <summary>Ratio of region area to area of its convex hull. For details, see [[RegionConvexity]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.Circularity_RadiusPreserving">
            <summary>Ratio of region area to area of circular region with the same radius as in source region. This feature can by calculated by [[RegionCircularity]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.Circularity_PerimeterPreserving">
            <summary>Ratio of region area to area of circular region with the same perimeter as in source region. This feature can by calculated by [[RegionCircularity]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.Circularity_BoundingCirclePreserving">
            <summary>Ratio of region area to area of its minimal bounding circle. This feature can by calculated by [[RegionCircularity]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.BoundingBoxWidth">
            <summary>Width of region bounding box. Bounding box of a region can by obtained by [[RegionBoundingBox]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.BoundingBoxTop">
            <summary>Top position of region bounding box. Bounding box of a region can by obtained by [[RegionBoundingBox]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.BoundingBoxRight">
            <summary>Right position of region bounding box. Bounding box of a region can by obtained by [[RegionBoundingBox]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.BoundingBoxLeft">
            <summary>Left position of region bounding box. Bounding box of a region can by obtained by [[RegionBoundingBox]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.BoundingBoxHeight">
            <summary>Height of region bounding box. Bounding box of a region can by obtained by [[RegionBoundingBox]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.BoundingBoxBottom">
            <summary>Bottom position of region bounding box. Bounding box of a region can by obtained by [[RegionBoundingBox]].</summary>
        </member>
        <member name="F:AvlNet.RegionFeature.Area">
            <summary>Total area of region. This feature can be computed by [[RegionArea]].</summary>
        </member>
        <member name="T:AvlNet.RegionContourMode">
            <summary>Decides what kind of paths will be result of RegionContour filter.</summary>
        </member>
        <member name="F:AvlNet.RegionContourMode.PixelEdges">
            <summary>Paths will run along boundary regions' pixels.</summary>
        </member>
        <member name="F:AvlNet.RegionContourMode.PixelCenters">
            <summary>Calculated paths will pass through centers of boundary pixels.</summary>
        </member>
        <member name="T:AvlNet.RegionConnectivity">
            <summary>Decides how to understand, which pixels are connected.</summary>
        </member>
        <member name="F:AvlNet.RegionConnectivity.FourDirections">
            <summary>Only top, down, left and right neighbouring pixels will be tested.</summary>
        </member>
        <member name="F:AvlNet.RegionConnectivity.EightDirections">
            <summary>All pixels around currently examined one will be tested.</summary>
        </member>
        <member name="T:AvlNet.RectangularRoiMask">
            <summary>Describes what shape the ROI inside rectangle will have.</summary>
        </member>
        <member name="T:AvlNet.RectangleOrientation">
            <summary>Describes how to adjust rectangle's orientation.</summary>
        </member>
        <member name="F:AvlNet.RectangleOrientation.Any">
            <summary>Depending on other parameters will minimize one of marked corner coordinates.</summary>
        </member>
        <member name="F:AvlNet.RectangleOrientation.Vertical">
            <summary>Rectangle's height will be not shorter than its width.</summary>
        </member>
        <member name="F:AvlNet.RectangleOrientation.Horizontal">
            <summary>Rectangle's width will be not shorter than its height.</summary>
        </member>
        <member name="T:AvlNet.PylonUserOutput">
            <summary>Selects one of available outputs.</summary>
        </member>
        <member name="T:AvlNet.PylonTriggerSource">
            <summary>Decides which agent will trigger capture of the image.</summary>
        </member>
        <member name="T:AvlNet.PylonTriggerActivation">
            <summary>Decides about input signal state which is treated as a trigger.</summary>
        </member>
        <member name="T:AvlNet.PylonImageFormat">
            <summary>Sets captured image pixel format.</summary>
        </member>
        <member name="T:AvlNet.ProjectionMode">
            <summary>Possible combinations of values in projection operations.</summary>
        </member>
        <member name="T:AvlNet.ProjectionDirection">
            <summary>Possible directions of projection operations.</summary>
        </member>
        <member name="T:AvlNet.ProfileInterpolationMethod">
            <summary>Possible values of ProfileInterpolationMethod:</summary>
        </member>
        <member name="F:AvlNet.ProfileInterpolationMethod.Quadratic4">
            <summary>Interpolation that fits a parabola to 4 consecutive points.</summary>
            <remarks>Interpolation that fits a parabola to 4 consecutive points. Allows subpixel feature extraction - with precision up to 1/23 px for gaussian edges and infinite precision for ideal step edges.   It is worse than Quadratic_3 only if several edges occur close to each other - with distances less than 3 pixels.</remarks>
        </member>
        <member name="F:AvlNet.ProfileInterpolationMethod.Quadratic3">
            <summary>Interpolation that fits a parabola to 3 consecutive points.</summary>
            <remarks>Interpolation that fits a parabola to 3 consecutive points. Allows subpixel feature extraction - with precision up to 1/6 px.</remarks>
        </member>
        <member name="F:AvlNet.ProfileInterpolationMethod.Linear">
            <summary>Linear interpolation between consecutive points of the profile.</summary>
            <remarks>Linear interpolation between consecutive points of the profile. Results in pixel-precise feature extraction.</remarks>
        </member>
        <member name="T:AvlNet.PolarSpaceType">
            <summary>Image transformation space.</summary>
            <remarks>Decides which formula use to transform image. Parameters \(m\) and \(k\) are set to values which allow to fit source image in output image.</remarks>
        </member>
        <member name="F:AvlNet.PolarSpaceType.LogPolar">
            <summary>Log-Polar space</summary>
            <remarks>Uses following equation: \[ \rho = k \log{\sqrt{x^2+y^2} }, \phi = \arctan(\frac{y}{x}) \]</remarks>
        </member>
        <member name="F:AvlNet.PolarSpaceType.Polar">
            <summary>Polar space</summary>
            <remarks>Uses following equation: \[ \rho = m \sqrt{x^2 + y^2} , \phi = \arctan(\frac{y}{x}) \]</remarks>
        </member>
        <member name="T:AvlNet.Polarity">
            <summary>Determines which pixel values will be taken under consideration in processing in edge detection related operations.</summary>
        </member>
        <member name="F:AvlNet.Polarity.Any">
            <summary>Bright pixels and dark pixels will be both considered in results.</summary>
        </member>
        <member name="F:AvlNet.Polarity.Dark">
            <summary>Pixel with low values is considered as dark.</summary>
        </member>
        <member name="F:AvlNet.Polarity.Bright">
            <summary>Pixel with high values is considered as bright.</summary>
        </member>
        <member name="T:AvlNet.PolarInterpolationMethod">
            <summary>Possible pixel interpolation methods for polar transform:</summary>
        </member>
        <member name="F:AvlNet.PolarInterpolationMethod.Lanczos4">
            <summary>Lanczos interpolation over 8x8 neighbourhood.</summary>
        </member>
        <member name="F:AvlNet.PolarInterpolationMethod.Area">
            <summary>Pixel area interpolation.</summary>
        </member>
        <member name="F:AvlNet.PolarInterpolationMethod.Cubic">
            <summary>Bicubic interpolation.</summary>
        </member>
        <member name="F:AvlNet.PolarInterpolationMethod.Nearest">
            <summary>Nearest neighbour interpolation. It is the simplest and fastest method.</summary>
        </member>
        <member name="F:AvlNet.PolarInterpolationMethod.Linear">
            <summary>Bilinear interpolation.</summary>
        </member>
        <member name="T:AvlNet.PointShape">
            <summary>Possible points' shapes to draw.</summary>
        </member>
        <member name="F:AvlNet.PointShape.Square">
            <summary>Square shape</summary>
            <remarks>Example image produced by DrawPoints:&lt;br/&gt;&lt;img src="$ImgPath$filters/DrawPoints2.jpg"  /&gt;</remarks>
        </member>
        <member name="F:AvlNet.PointShape.Cross">
            <summary>Cross shape</summary>
            <remarks>Example image produced by DrawPoints:&lt;br/&gt;&lt;img src="$ImgPath$filters/DrawPoints3.jpg"  /&gt; </remarks>
        </member>
        <member name="F:AvlNet.PointShape.Circle">
            <summary>Circle shape</summary>
            <remarks>Example image produced by DrawPoints:&lt;br/&gt; &lt;img src="$ImgPath$filters/DrawPoints1.jpg"  /&gt; </remarks>
        </member>
        <member name="T:AvlNet.PointGreyTriggerMode">
            <summary>Sets kind of trigger source.</summary>
        </member>
        <member name="F:AvlNet.PointGreyTriggerMode.HardwareTrigger">
            <summary>Device is controlled by external signals.</summary>
        </member>
        <member name="F:AvlNet.PointGreyTriggerMode.SoftwareTrigger">
            <summary>Device can be controlled by application.</summary>
        </member>
        <member name="F:AvlNet.PointGreyTriggerMode.TriggerOff">
            <summary>Trigger feature is disabled.</summary>
        </member>
        <member name="T:AvlNet.PointGreyColorMode">
            <summary>Sets whether captured image will be colorful or in grayscale.</summary>
        </member>
        <member name="T:AvlNet.Point3DFileFormat">
            <summary>Available formats.</summary>
        </member>
        <member name="F:AvlNet.Point3DFileFormat.PLY">
            <summary>Polygon file format. File name extension is .ply.</summary>
        </member>
        <member name="F:AvlNet.Point3DFileFormat.STL">
            <summary>Stereolithography format. File name extension is .stl.</summary>
        </member>
        <member name="T:AvlNet.PeriodPrecisionMethod">
            <summary>Determines if and how sub-point accuracy is achieved</summary>
        </member>
        <member name="F:AvlNet.PeriodPrecisionMethod.Flex">
            <summary>Sub-point accuracy, most efficient for small periods</summary>
        </member>
        <member name="F:AvlNet.PeriodPrecisionMethod.Quadratic4">
            <summary>Sub-point accuracy, most efficient for big periods</summary>
        </member>
        <member name="F:AvlNet.PeriodPrecisionMethod.Basic">
            <summary>Results in whole-point accuracy</summary>
        </member>
        <member name="T:AvlNet.PathSegmentationMode">
            <summary>Describes possible output of segmentation operation.</summary>
        </member>
        <member name="F:AvlNet.PathSegmentationMode.Segments">
            <summary>Segmentation will result with straight segments only.</summary>
        </member>
        <member name="F:AvlNet.PathSegmentationMode.SegmentsAndArcs">
            <summary>Segmented parts will contain fitted segments as well as arcs.</summary>
        </member>
        <member name="T:AvlNet.PathOrientationAlignment">
            <summary>Determines how to align paths orientation.</summary>
        </member>
        <member name="F:AvlNet.PathOrientationAlignment.None">
            <summary>Orientation alignment step of algorithm is omitted.</summary>
        </member>
        <member name="F:AvlNet.PathOrientationAlignment.EllipticAxes">
            <summary>Processed path is rotated by an angle which is difference between input and reference paths' orientations.</summary>
        </member>
        <member name="T:AvlNet.PathFilter">
            <summary>Determines which paths will be taken into account.</summary>
        </member>
        <member name="T:AvlNet.PathFeature">
            <summary>Determines which path feature value to compute.</summary>
        </member>
        <member name="F:AvlNet.PathFeature.Size">
            <summary>Number of characteristic points on path returned by [[PathSize]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.ShapeRectangularity">
            <summary>Ratio of shape area to it bounding rectangle area. See more: [[ShapeRectangularity]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.ShapeMinorAxisLength">
            <summary>Length of the path minor elliptic axis. Shape axes can determined by [[ShapeEllipticAxes]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.ShapeMajorAxisLength">
            <summary>Length of the path major elliptic axis. Shape axes can determined by [[ShapeEllipticAxes]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.ShapeElongation">
            <summary>Ratio of shape height to its width, calculated as in [[ShapeElongation]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.ShapeConvexity">
            <summary>Ratio of shape area to area of its convex hull. For details, see [[ShapeConvexity]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.ShapeCircularity_RadiusPreserving">
            <summary>Circularity computed by [[ShapeCircularity]] with RadiusPreserving method.</summary>
        </member>
        <member name="F:AvlNet.PathFeature.ShapeCircularity_PerimeterPreserving">
            <summary>Circularity computed by [[ShapeCircularity]] with PerimeterPreserving method.</summary>
        </member>
        <member name="F:AvlNet.PathFeature.ShapeCircularity_BoundingCirclePreserving">
            <summary>Circularity computed by [[ShapeCircularity]] with BoundingCirclePreserving method.</summary>
        </member>
        <member name="F:AvlNet.PathFeature.ShapeArea">
            <summary>Area of a closed path (shape). Read more: [[ShapeArea]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.MassCenterY">
            <summary>OY coordinate of path mass center. Mass center of a path is computed by [[PathMassCenter]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.MassCenterX">
            <summary>OX coordinate of path mass center. Mass center of a path is computed by [[PathMassCenter]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.Length">
            <summary>Total length of path, computed by [[PathLength]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.DiameterLength">
            <summary>Length of path diameter, which can be also calculated by [[PathDiameter]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.BoundingBoxTop">
            <summary>Top position of region bounding box. Bounding box of a path can by obtained by [[PathBoundingBox]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.BoundingBoxRight">
            <summary>Right position of region bounding box. Bounding box of a path can by obtained by [[PathBoundingBox]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.BoundingBoxLeft">
            <summary>Left position of region bounding box. Bounding box of a path can by obtained by [[PathBoundingBox]].</summary>
        </member>
        <member name="F:AvlNet.PathFeature.BoundingBoxBottom">
            <summary>Bottom position of region bounding box. Bounding box of a path can by obtained by [[PathBoundingBox]].</summary>
        </member>
        <member name="T:AvlNet.PathDistanceMode">
            <summary>Method of distance between path computation.</summary>
        </member>
        <member name="F:AvlNet.PathDistanceMode.PointToSegment">
            <summary>Distance is measured to nearest segments adjacent to the nearest characteristic point of other path. This method is more precise.</summary>
        </member>
        <member name="F:AvlNet.PathDistanceMode.PointToPoint">
            <summary>Distance is measured to nearest characteristic point of other path.</summary>
        </member>
        <member name="T:AvlNet.OrganicFeature">
            <summary>Organic object descriptors.</summary>
        </member>
        <member name="T:AvlNet.OcrModelType">
            <summary>OCR classifier type used to determine characters</summary>
        </member>
        <member name="T:AvlNet.NumberSystemBase">
            <summary>Specifies the base of the number system.</summary>
        </member>
        <member name="T:AvlNet.NonMaximaMethod">
            <summary>Defines the way non-maxima are detected.</summary>
        </member>
        <member name="F:AvlNet.NonMaximaMethod.Quadruple">
            <summary>Checks the two nearest of the four basic directions, but also not straight.</summary>
        </member>
        <member name="F:AvlNet.NonMaximaMethod.Double">
            <summary>Checks the two nearest of the four basic directions.</summary>
        </member>
        <member name="F:AvlNet.NonMaximaMethod.Nearest">
            <summary>Checks the nearest of the four basic direction: horizontal, vertical and two diagonals.</summary>
        </member>
        <member name="F:AvlNet.NonMaximaMethod.Interpolated">
            <summary>Checks one precise direction, interpolating pixel values.</summary>
        </member>
        <member name="T:AvlNet.NeousysWatchdogTimerUnit">
            <summary>Possible watchdog timer tick units on a Neousys computer.</summary>
        </member>
        <member name="T:AvlNet.MvIMPACTTriggerSource">
            <summary>Possible trigger signal sources.</summary>
        </member>
        <member name="T:AvlNet.MvIMPACTTriggerActivation">
            <summary>Signal state to be considered as active.</summary>
        </member>
        <member name="T:AvlNet.MVGenTLPixelFormat">
            <summary>Sets captured image pixel format.</summary>
        </member>
        <member name="T:AvlNet.MultiCamOutputStyle">
            <summary>Electrical style of I/O lines used as outputs</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.SSRLY">
            <summary>The output line behaves as a solid-state relay</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.OPTO">
            <summary>The output line is an isolated photo transistor output</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.DIFF">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.LVDS">
            <summary>The output line is differential LVDS, RS-422 or RS-485 compatible</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.OC">
            <summary>The output line issues a TTL compliant signal actively tied to the low state and passively tied to the high state</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.LED">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.RELAY">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.IOE">
            <summary>The output line is an isolated TTL compliant signal actively tied to the high state and passively tied to the low state through a 2000 Î© pull-down resistor</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.IOC">
            <summary>The output line is an isolated TTL compliant signal actively tied to the low state and passively tied to the high state through a 3000 Î© pull-up resistor</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.ITTL">
            <summary>The output line issues an isolated TTL compliant signal actively tied to the high or low state</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputStyle.TTL">
            <summary>The output line issues a TTL compliant signal</summary>
        </member>
        <member name="T:AvlNet.MultiCamOutputState">
            <summary>Possible state of output pin.</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputState.TOGGLE">
            <summary>A logic state opposite to the present one is issued</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputState.HIGH">
            <summary>A high logic state is issued or the solid-state relay is open</summary>
        </member>
        <member name="F:AvlNet.MultiCamOutputState.LOW">
            <summary>A low logic state is issued or the solid-state relay is closed</summary>
        </member>
        <member name="T:AvlNet.MultiCamInputStyle">
            <summary>Possible electric styles of Input/Output ports.</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.POWERSTATE">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.ISO">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.DTTL">
            <summary>The input line is differential TTL compliant with a differential termination resistor</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.RS485">
            <summary>The input line is differential RS422 and RS485 compliant with a differential termination resistor</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.TTLPD">
            <summary>The input line is single-ended TTL compliant with a pull-down resistor</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.TTLHiz">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle._12V">
            <summary>A CMOS driver is connected to the input lines</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle._5V">
            <summary>A 5 V TTL or CMOS driver is connected to the input lines</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.RELAY">
            <summary>A relay contact is connected to the input lines</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.AUTO">
            <summary>The state of the input line is automatically interpreted. Setting InputStyle to a precise value yields better electrical performance, such as better common mode rejection ratio</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.CMOS">
            <summary>The input line is CMOS 5 V compliant with a pull-up resistor</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.CHANNELLINK">
            <summary>The input line is a signal embedded in Channel Link</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.DIFF">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.LVDS">
            <summary>The input line is differential LVDS compliant with a differential termination resistor</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.RS422">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.I12V">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.ITTL">
            <summary>The input line is isolated and TTL compliant</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputStyle.TTL">
            <summary>The input line is TTL compliant with a pull-up resistor</summary>
        </member>
        <member name="T:AvlNet.MultiCamInputState">
            <summary>Possible state of input pin.</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputState.OPEN">
            <summary>The line is in an open state. The impedance is above 10 kÎ©.</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputState.DISCONNECTED">
            <summary>Parameter is not documented in Multicam documentation</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputState.WENTHIGH">
            <summary>In the HIGH state, but was in the LOW state during the last InputState reading</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputState.WENTLOW">
            <summary>In the LOW state, but was in the HIGH state during the last InputState reading</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputState.HIGH">
            <summary>The line is in a high state</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputState.LOW">
            <summary>The line is in a low state</summary>
        </member>
        <member name="F:AvlNet.MultiCamInputState.NONE">
            <summary>Corresponding InputFunction parameter is UNKNOWN</summary>
        </member>
        <member name="T:AvlNet.MultiCamDestinationClass">
            <summary>Describes classes of devices, which can be configured.</summary>
        </member>
        <member name="T:AvlNet.MultiCamColorFormat">
            <summary>Supported image color formats.</summary>
        </member>
        <member name="T:AvlNet.MultiCamAcquisitionMode">
            <summary>Possible methods of acquiring images.</summary>
        </member>
        <member name="T:AvlNet.MorphologyKernel">
            <summary>Describes shape and size of kernel used during morphological operation.</summary>
        </member>
        <member name="T:AvlNet.ModbusDataFormat">
            <summary>Describes possible data formats.</summary>
        </member>
        <member name="T:AvlNet.MlpPreprocessing">
            <summary>Sets additional normalization process.</summary>
        </member>
        <member name="F:AvlNet.MlpPreprocessing.Normalization">
            <summary>Normally not normalized features are being normalized before learning process.</summary>
        </member>
        <member name="F:AvlNet.MlpPreprocessing.None">
            <summary>No additional normalization is being performed.</summary>
        </member>
        <member name="T:AvlNet.MirrorDirection">
            <summary>Describes possible directions of image mirroring.</summary>
        </member>
        <member name="T:AvlNet.MetricUnit">
            <summary>Represents available metric units for drawing dimensions on image.</summary>
        </member>
        <member name="T:AvlNet.Metric3D">
            <summary>Specifies method of calculating distance between two points in 3D.</summary>
        </member>
        <member name="F:AvlNet.Metric3D.Z">
            <summary>The difference in Z axis.</summary>
        </member>
        <member name="F:AvlNet.Metric3D.Euclidean">
            <summary>Euclidean metric distance</summary>
            <remarks>More on Euclidean metric distance: &lt;a href="https://en.wikipedia.org/wiki/Euclidean_geometry"&gt;https://en.wikipedia.org/wiki/Euclidean_geometry&lt;/a&gt;</remarks>
        </member>
        <member name="F:AvlNet.Metric3D.Maximum">
            <summary>Chebyshev distance</summary>
            <remarks>See &lt;a href="https://en.wikipedia.org/wiki/Chebyshev_distance"&gt;https://en.wikipedia.org/wiki/Chebyshev_distance&lt;/a&gt;</remarks>
        </member>
        <member name="F:AvlNet.Metric3D.Taxi">
            <summary>Rectilinear distance</summary>
            <remarks>See &lt;a href="https://en.wikipedia.org/wiki/Taxicab_geometry"&gt;https://en.wikipedia.org/wiki/Taxicab_geometry&lt;/a&gt;</remarks>
        </member>
        <member name="T:AvlNet.Metric">
            <summary>Two-point distance calculation method</summary>
            <remarks>Specifies method of calculating distance between two points.</remarks>
        </member>
        <member name="F:AvlNet.Metric.Euclidean">
            <summary>Euclidean metric distance</summary>
            <remarks>More on Euclidean metric distance: &lt;a href="https://en.wikipedia.org/wiki/Euclidean_geometry"&gt;https://en.wikipedia.org/wiki/Euclidean_geometry&lt;/a&gt;</remarks>
        </member>
        <member name="F:AvlNet.Metric.Maximum">
            <summary>Chebyshev distance</summary>
            <remarks>See &lt;a href="https://en.wikipedia.org/wiki/Chebyshev_distance"&gt;https://en.wikipedia.org/wiki/Chebyshev_distance&lt;/a&gt;</remarks>
        </member>
        <member name="F:AvlNet.Metric.Taxi">
            <summary>Rectilinear distance</summary>
            <remarks>See &lt;a href="https://en.wikipedia.org/wiki/Taxicab_geometry"&gt;https://en.wikipedia.org/wiki/Taxicab_geometry&lt;/a&gt;</remarks>
        </member>
        <member name="T:AvlNet.MEstimator">
            <summary>Defines how to suppress the influence of values far from most others on the result.</summary>
        </member>
        <member name="F:AvlNet.MEstimator.Tukey">
            <summary>Eliminates values distant enough completely.</summary>
        </member>
        <member name="F:AvlNet.MEstimator.Huber">
            <summary>Suppresses values distant enough linearly according to the distances.</summary>
        </member>
        <member name="T:AvlNet.MeasureObjectMethod">
            <summary>Possible methods of measuring width of an object.</summary>
        </member>
        <member name="F:AvlNet.MeasureObjectMethod.MaximumDistance">
            <summary>Maximum distance between found pair of edges is returned.</summary>
        </member>
        <member name="F:AvlNet.MeasureObjectMethod.MinimumDistance">
            <summary>Minimum distance between found pair of edges is returned.</summary>
        </member>
        <member name="F:AvlNet.MeasureObjectMethod.MedianDistance">
            <summary>Median of the distances between found pair of edges is returned.</summary>
        </member>
        <member name="F:AvlNet.MeasureObjectMethod.AverageDistance">
            <summary>Average distance between found pair of edges is returned.</summary>
        </member>
        <member name="F:AvlNet.MeasureObjectMethod.FittedSegmentDistance">
            <summary>Distance between two fitted segments is returned.</summary>
        </member>
        <member name="T:AvlNet.MeanKernel">
            <summary>Describes shape and size of structuring element used during smoothing.</summary>
        </member>
        <member name="T:AvlNet.MatchingCriterion">
            <summary>Methods of classifying an object as a member of group.</summary>
        </member>
        <member name="F:AvlNet.MatchingCriterion.Inclusion">
            <summary>Object has to be fully included in region to be grouped.</summary>
        </member>
        <member name="F:AvlNet.MatchingCriterion.Intersection">
            <summary>Object has to have at least one common point with region being processed to be grouped.</summary>
        </member>
        <member name="T:AvlNet.MarkerType">
            <summary>Segment line cap shapes drawn at the segment ends.</summary>
            <remarks>Possible segments' marker shapes to draw. All images created with &lt;span class="InOutParam"&gt;inMarkerType&lt;/span&gt; equal to 7.0.</remarks>
        </member>
        <member name="F:AvlNet.MarkerType.Square">
            <summary>Squares on both segment ends</summary>
            <remarks>&lt;br/&gt; &lt;img src="$ImgPath$filters/DrawSegments_square.jpg"  /&gt;</remarks>
        </member>
        <member name="F:AvlNet.MarkerType.Cross">
            <summary>Crosses on both segment ends</summary>
            <remarks>&lt;br/&gt; &lt;img src="$ImgPath$filters/DrawSegments_cross.jpg"  /&gt;</remarks>
        </member>
        <member name="F:AvlNet.MarkerType.Circle">
            <summary>Circles on both segment ends</summary>
            <remarks>&lt;br/&gt; &lt;img src="$ImgPath$filters/DrawSegments_circle.jpg"  /&gt;</remarks>
        </member>
        <member name="F:AvlNet.MarkerType.TwoArrows">
            <summary>Arrows on both segment ends</summary>
            <remarks>&lt;br/&gt; &lt;img src="$ImgPath$filters/DrawSegments_twoarrows.jpg"  /&gt;</remarks>
        </member>
        <member name="F:AvlNet.MarkerType.None">
            <summary>No caps on neither segment ends</summary>
            <remarks>&lt;br/&gt; &lt;img src="$ImgPath$filters/DrawSegments_none.jpg"  /&gt;</remarks>
        </member>
        <member name="F:AvlNet.MarkerType.Arrow">
            <summary>Arrow on the segment end</summary>
            <remarks>&lt;br/&gt; &lt;img src="$ImgPath$filters/DrawSegments_arrow.jpg"  /&gt;</remarks>
        </member>
        <member name="T:AvlNet.MagnitudeMeasure">
            <summary>Method of estimation of the vectors' magnitude.</summary>
        </member>
        <member name="F:AvlNet.MagnitudeMeasure.Hypot">
            <summary>Hypot estimation</summary>
            <remarks>\(A_{Hypot}=\frac{\sqrt{x^{2}+y^{2} } }{4}\)</remarks>
        </member>
        <member name="F:AvlNet.MagnitudeMeasure.Maximum">
            <summary>Maximum estimation</summary>
            <remarks>\(A_{Maximum}=\frac{Max(|x|,|y|)}{4}\)</remarks>
        </member>
        <member name="F:AvlNet.MagnitudeMeasure.Sum">
            <summary>Sum estimation</summary>
            <remarks>\(A_{Sum}=Saturate({\frac{|x|+|y|}{4} })\)</remarks>
        </member>
        <member name="F:AvlNet.MagnitudeMeasure.Average">
            <summary>Average estimation</summary>
            <remarks>\(A_{Average}=\frac{|x|+|y|}{8}\)</remarks>
        </member>
        <member name="F:AvlNet.MagnitudeMeasure.Vertical">
            <summary>Vertical estimation</summary>
            <remarks>\(A_{Vertical}=\frac{|y|}{4}\)</remarks>
        </member>
        <member name="F:AvlNet.MagnitudeMeasure.Horizontal">
            <summary>Horizontal estimation</summary>
            <remarks>\(A_{Horizontal}=\frac{|x|}{4}\)</remarks>
        </member>
        <member name="T:AvlNet.LumeneraProperties">
            <summary>Image properties</summary>
        </member>
        <member name="T:AvlNet.LumeneraPixelFormat">
            <summary>Pixel format returned by the camera</summary>
        </member>
        <member name="T:AvlNet.LinePeakDetectionMethod">
            <summary>Determines exact line peak position extraction method.</summary>
        </member>
        <member name="F:AvlNet.LinePeakDetectionMethod.BrightMassCenter">
            <summary>The mass center of all bright pixels is a result.</summary>
        </member>
        <member name="F:AvlNet.LinePeakDetectionMethod.BrightRegionCenter">
            <summary>The center of all bright pixels region is a result.</summary>
        </member>
        <member name="F:AvlNet.LinePeakDetectionMethod.MaximalPixel">
            <summary>Brightest pixel is a result.</summary>
        </member>
        <member name="F:AvlNet.LinePeakDetectionMethod.LastBrightPixel">
            <summary>Bright pixel with biggest y coordinate is a result.</summary>
        </member>
        <member name="F:AvlNet.LinePeakDetectionMethod.FirstBrightPixel">
            <summary>Bright pixel with smallest y coordinate is a result.</summary>
        </member>
        <member name="T:AvlNet.LinearBinaryPatternType">
            <summary>Linear Binary Pattern kind.</summary>
        </member>
        <member name="T:AvlNet.LawsFilterType">
            <summary>Possible types of Laws filter.</summary>
        </member>
        <member name="T:AvlNet.LawsFilterSize">
            <summary>Possible size of Laws texture filter.</summary>
        </member>
        <member name="T:AvlNet.KMeansClusteringMethod">
            <summary>Possible methods of KMeans clustering.</summary>
        </member>
        <member name="F:AvlNet.KMeansClusteringMethod.KMeansPlusPlus">
            <summary>Generates candidate centroids using KMeans++ method, and passes them to Lloyds algorithm.</summary>
        </member>
        <member name="F:AvlNet.KMeansClusteringMethod.KMeans">
            <summary>Plain - uses Lloyds algorithm.</summary>
        </member>
        <member name="T:AvlNet.KernelShape">
            <summary>Describes structuring element shape.</summary>
        </member>
        <member name="T:AvlNet.JoinDirection">
            <summary>Describes in which direction join should be performed.</summary>
        </member>
        <member name="T:AvlNet.InterpolationMethod">
            <summary>Possible pixel interpolation methods:</summary>
        </member>
        <member name="F:AvlNet.InterpolationMethod.Bilinear">
            <summary>Computationally expensive, but more precise than NearestNeighbour.</summary>
        </member>
        <member name="F:AvlNet.InterpolationMethod.NearestNeighbour">
            <summary>Simple and fast method.</summary>
        </member>
        <member name="T:AvlNet.ImageMomentType">
            <summary>Possible image moment descriptors.</summary>
        </member>
        <member name="F:AvlNet.ImageMomentType._20">
            <summary>Sum of products of pixel squared x-coordinate and it's value over the Roi</summary>
            <remarks>\(Moment_{2,0}(Image,Roi) = \sum_{p \in Roi} Image(p_x,p_y) \cdot p_x^2 \)</remarks>
        </member>
        <member name="F:AvlNet.ImageMomentType._11">
            <summary>Sum of products of pixel both coordinates and it's value over the Roi</summary>
            <remarks>\(Moment_{1,1}(Image,Roi) = \sum_{p \in Roi} Image(p_x,p_y) \cdot p_x p_y \)</remarks>
        </member>
        <member name="F:AvlNet.ImageMomentType._02">
            <summary>Sum of products of pixel squared y-coordinate and it's value over the Roi</summary>
            <remarks>\(Moment_{0,2}(Image,Roi) = \sum_{p \in Roi} Image(p_x,p_y) \cdot p_y^2 \)</remarks>
        </member>
        <member name="F:AvlNet.ImageMomentType._10">
            <summary>Sum of products of pixel x-coordinate and it's value over the Roi</summary>
            <remarks>\(Moment_{1,0}(Image,Roi) = \sum_{p \in Roi} Image(p_x,p_y) \cdot p_x \)</remarks>
        </member>
        <member name="F:AvlNet.ImageMomentType._01">
            <summary>Sum of products of pixel y-coordinate and it's value over the Roi</summary>
            <remarks>\(Moment_{0,1}(Image,Roi) = \sum_{p \in Roi} Image(p_x,p_y) \cdot p_y \)</remarks>
        </member>
        <member name="F:AvlNet.ImageMomentType._00">
            <summary>Sum of pixels in Roi</summary>
            <remarks>\(Moment_{0,0}(Image,Roi) = \sum_{p \in Roi} Image(p_x,p_y) \cdot 1\)</remarks>
        </member>
        <member name="T:AvlNet.ImageFileFormat">
            <summary>Available formats.</summary>
        </member>
        <member name="F:AvlNet.ImageFileFormat.TIFF">
            <summary>Older format used in desktop publishing, with lossless and lossy compression. File name extension are .tif and .tiff. </summary>
        </member>
        <member name="F:AvlNet.ImageFileFormat.PNG">
            <summary>The most widely used lossless compression bitmap format. File name extension is .png. </summary>
        </member>
        <member name="F:AvlNet.ImageFileFormat.JPEG">
            <summary>The most popular lossy compression image format. File name extensions are .jpg, .jpeg, .jpe or .jfif.</summary>
        </member>
        <member name="F:AvlNet.ImageFileFormat.BMP">
            <summary>Standard compression-less bitmap. Possible file name extensions are .bmp and .dib.</summary>
        </member>
        <member name="T:AvlNet.IFMTriggerMode">
            <summary>Possible trigger modes of IFM device.</summary>
        </member>
        <member name="T:AvlNet.IFMResolution">
            <summary>Possible resolutions of IFM device.</summary>
        </member>
        <member name="T:AvlNet.IDSTriggerMode">
            <summary>Defines trigger mode for IDS cameras.</summary>
        </member>
        <member name="T:AvlNet.IDSMirror">
            <summary>Defines mirror modes for IDS cameras.</summary>
        </member>
        <member name="T:AvlNet.IDSGPIOConfiguration">
            <summary>Defines GPIO configurations IDS cameras.</summary>
        </member>
        <member name="F:AvlNet.IDSGPIOConfiguration.GPIO_I2C">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:AvlNet.IDSGPIOConfiguration.GPIO_TRIGGER">
            <summary>USB 3 uEye CP/ML/LE and GigE uEye LE/RE PoE only: GPIO is used for trigger.</summary>
        </member>
        <member name="F:AvlNet.IDSGPIOConfiguration.GPIO_MULTI_INTEGRATION_MODE">
            <summary>GPIO is used for multi integration mode.</summary>
        </member>
        <member name="F:AvlNet.IDSGPIOConfiguration.GPIO_COMPORT_TX">
            <summary>Windows only: GPIO is used as serial interface. More details in IDS documentation.</summary>
        </member>
        <member name="F:AvlNet.IDSGPIOConfiguration.GPIO_COMPORT_RX">
            <summary>Windows only: GPIO is used as serial interface. More details in IDS documentation.</summary>
        </member>
        <member name="F:AvlNet.IDSGPIOConfiguration.GPIO_PWM">
            <summary>GPIO is used for pulse width modulation.</summary>
        </member>
        <member name="F:AvlNet.IDSGPIOConfiguration.GPIO_FLASH">
            <summary>GPIO is used for flash.</summary>
        </member>
        <member name="F:AvlNet.IDSGPIOConfiguration.GPIO_OUTPUT">
            <summary>GPIO is used as output.</summary>
        </member>
        <member name="F:AvlNet.IDSGPIOConfiguration.GPIO_INPUT">
            <summary>GPIO is used as input.</summary>
        </member>
        <member name="T:AvlNet.IDSBinning">
            <summary>Defines binning modes for IDS cameras.</summary>
        </member>
        <member name="T:AvlNet.ICubeTriggerMode">
            <summary>Available modes of triggering.</summary>
        </member>
        <member name="F:AvlNet.ICubeTriggerMode.HW_START_2">
            <summary>GRR mode</summary>
        </member>
        <member name="F:AvlNet.ICubeTriggerMode.SW_START_2">
            <summary>GRR mode</summary>
        </member>
        <member name="F:AvlNet.ICubeTriggerMode.STOP">
            <summary>stops soft/hardware trigger mode</summary>
        </member>
        <member name="F:AvlNet.ICubeTriggerMode.HW_START">
            <summary>starts the hardware trigger mode</summary>
        </member>
        <member name="F:AvlNet.ICubeTriggerMode.SW_DO">
            <summary>get one software triggered frame</summary>
        </member>
        <member name="F:AvlNet.ICubeTriggerMode.SW_START">
            <summary>starts the software trigger mode</summary>
        </member>
        <member name="T:AvlNet.ICubeResolutionMode">
            <summary>Graphics mode of acquired image.</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.WQUXGA">
            <summary>3840x2748</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.QSXGA">
            <summary>2592x1944</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.QXGA">
            <summary>2048x1536</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.UXGA">
            <summary>1600x1200</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.SXGA">
            <summary>1280x1024</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.XGA">
            <summary>1024x768</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.SVGA">
            <summary>800x600</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.WVGA">
            <summary>752x480</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.VGA">
            <summary>640x480</summary>
        </member>
        <member name="F:AvlNet.ICubeResolutionMode.QVGA">
            <summary>320x240</summary>
        </member>
        <member name="T:AvlNet.ICubeGrabMode">
            <summary>Describes grabbing methods.</summary>
        </member>
        <member name="T:AvlNet.ICubeBinSkip">
            <summary>Possible methods of pixel skipping.</summary>
        </member>
        <member name="T:AvlNet.ICImagingControlColorFormat">
            <summary>Sets captured frame pixel format.</summary>
        </member>
        <member name="T:AvlNet.HSxColorModel">
            <summary>Color models used in given operation.</summary>
        </member>
        <member name="T:AvlNet.HikvisionTriggerSource">
            <summary>Possible trigger source for Hikvision camera.</summary>
        </member>
        <member name="T:AvlNet.HikvisionTriggerActivation">
            <summary>Possible trigger polarity for Hikvision camera.</summary>
        </member>
        <member name="T:AvlNet.HikvisionPixelFormat">
            <summary>Possible pixel formats for Hikvision camera.</summary>
        </member>
        <member name="T:AvlNet.HikvisionLine">
            <summary>Possible output line for strobe for Hikvision camera.</summary>
        </member>
        <member name="T:AvlNet.HikvisionEvent">
            <summary>Possible triggering or strobe event for Hikvision camera.</summary>
        </member>
        <member name="T:AvlNet.GradientOperator">
            <summary>Describes which operator use to compute image gradient.</summary>
        </member>
        <member name="T:AvlNet.GradientMaskOperator">
            <summary>Describes methods of image gradient computing.</summary>
        </member>
        <member name="F:AvlNet.GradientMaskOperator.Forward">
            <summary>Only one direct neighbour of a pixel is used for computing</summary>
        </member>
        <member name="F:AvlNet.GradientMaskOperator.Central">
            <summary>Only two direct neighbours of a pixel are used for computing</summary>
        </member>
        <member name="F:AvlNet.GradientMaskOperator.Prewitt">
            <summary>Prewitt operator</summary>
            <remarks>See more: &lt;a href="https://en.wikipedia.org/wiki/Prewitt"&gt;Prewitt operator on Wikipedia&lt;/a&gt;</remarks>
        </member>
        <member name="F:AvlNet.GradientMaskOperator.Sobel">
            <summary>Sobel operator</summary>
            <remarks>See more: &lt;a href="https://en.wikipedia.org/wiki/Sobel_operator"&gt;Sobel operator on Wikipedia&lt;/a&gt;</remarks>
        </member>
        <member name="T:AvlNet.GradientAngleRange">
            <summary>Range of image gradient angles to choose from</summary>
        </member>
        <member name="F:AvlNet.GradientAngleRange._0_180">
            <summary>New gradient will range from 0 to 180 degrees.</summary>
        </member>
        <member name="F:AvlNet.GradientAngleRange._0_90">
            <summary>New gradient will range from 0 to 90 degrees.</summary>
        </member>
        <member name="T:AvlNet.GocatorTriggerSource">
            <summary>Represents a trigger.</summary>
        </member>
        <member name="F:AvlNet.GocatorTriggerSource.Software">
            <summary>The sensor will be software triggered.</summary>
        </member>
        <member name="F:AvlNet.GocatorTriggerSource.Input">
            <summary>The sensor will be digital input triggered.</summary>
        </member>
        <member name="F:AvlNet.GocatorTriggerSource.Encoder">
            <summary>The sensor will be encoder triggered.</summary>
        </member>
        <member name="F:AvlNet.GocatorTriggerSource.Time">
            <summary>The sensor will be time triggered.</summary>
        </member>
        <member name="T:AvlNet.GocatorDecisionCode">
            <summary>Represents the possible measurement decision codes.</summary>
        </member>
        <member name="F:AvlNet.GocatorDecisionCode.InvalidValue">
            <summary>The measurement value is invalid.</summary>
        </member>
        <member name="F:AvlNet.GocatorDecisionCode.InvalidAnchor">
            <summary>The tool associated with the measurement is anchored is has received invalid measurement data from its anchoring source(s).</summary>
        </member>
        <member name="F:AvlNet.GocatorDecisionCode.OK">
            <summary>The measurement value is valid and it falls outside the defined passing decision range.</summary>
        </member>
        <member name="T:AvlNet.GenICamParameterScope">
            <summary>Identifies module in GenICam GenTL software stack when accessing GenAPI setting sets.</summary>
        </member>
        <member name="F:AvlNet.GenICamParameterScope.SystemModule">
            <summary>Targets GenTL System Module</summary>
        </member>
        <member name="F:AvlNet.GenICamParameterScope.InterfaceModule">
            <summary>Targets GenTL Interface Module</summary>
        </member>
        <member name="F:AvlNet.GenICamParameterScope.DeviceStreamModule">
            <summary>Targets GenTL Stream Module (local software level settings of image stream).</summary>
        </member>
        <member name="F:AvlNet.GenICamParameterScope.DeviceModule">
            <summary>Targets GenTL Device Module (software level settings of device connection).</summary>
        </member>
        <member name="F:AvlNet.GenICamParameterScope.Device">
            <summary>Targets device settings.</summary>
        </member>
        <member name="T:AvlNet.GenActivationMode">
            <summary>Specifies how Genicam command execution filters reacts on activation input.</summary>
        </member>
        <member name="F:AvlNet.GenActivationMode.OnAnyEdge">
            <summary>Executes command every time when value on activation input changes.</summary>
        </member>
        <member name="F:AvlNet.GenActivationMode.OnFallingEdge">
            <summary>Executes command when value on activation input changes from True to False.</summary>
        </member>
        <member name="F:AvlNet.GenActivationMode.OnRisingEdge">
            <summary>Executes command when value on activation input changes from False to True.</summary>
        </member>
        <member name="F:AvlNet.GenActivationMode.WhenFalse">
            <summary>Executes command when value on activation input is equal False.</summary>
        </member>
        <member name="F:AvlNet.GenActivationMode.WhenTrue">
            <summary>Executes command when value on activation input is equal True.</summary>
        </member>
        <member name="T:AvlNet.GaussKernel">
            <summary>Possible dimensions of gaussian kernel used to smooth image.</summary>
        </member>
        <member name="T:AvlNet.FitType">
            <summary>Possibilities of solution fitting.</summary>
        </member>
        <member name="F:AvlNet.FitType.BestFit">
            <summary>Best possible solution is being looked for.</summary>
        </member>
        <member name="F:AvlNet.FitType.FirstFit">
            <summary>An algorithm stops as soon, as first fit is found.</summary>
        </member>
        <member name="T:AvlNet.FileSortingOrder">
            <summary>Criterion to take into account when sorting files.</summary>
        </member>
        <member name="F:AvlNet.FileSortingOrder.NameNatural">
            <summary>Sorts by file name using natural order.</summary>
        </member>
        <member name="T:AvlNet.FileAccessMode">
            <summary>Possible ways of accessing files.</summary>
        </member>
        <member name="F:AvlNet.FileAccessMode.CreateOrErase">
            <summary>If file doesn't exist, it is created, otherwise, it is erased.</summary>
        </member>
        <member name="F:AvlNet.FileAccessMode.CreateOrAppend">
            <summary>If file does exist, content is appended at its end. If file doesn't exist, it is created.</summary>
        </member>
        <member name="T:AvlNet.ExtremumType">
            <summary>Decides what kind of extremum is returned.</summary>
        </member>
        <member name="F:AvlNet.ExtremumType.Any">
            <summary>Both, Minima and Maxima will be returned.</summary>
        </member>
        <member name="T:AvlNet.EquidistanceType">
            <summary>Methods of maintaining equal distance in corner cases.</summary>
        </member>
        <member name="F:AvlNet.EquidistanceType.OutputPathEquidistance">
            <summary>Algorithm will maintain equal distance between outputs path characteristic point at all cost.</summary>
        </member>
        <member name="F:AvlNet.EquidistanceType.InputPathEquidistance">
            <summary>Algorithm will try to maintain input path length, sacrificing equal distances, when necessary.</summary>
        </member>
        <member name="T:AvlNet.ElectricalMode">
            <summary>Possible electrical modes of analog port.</summary>
        </member>
        <member name="T:AvlNet.EdgeTransition">
            <summary>Decides what is considered as an edge in the image.</summary>
        </member>
        <member name="F:AvlNet.EdgeTransition.Any">
            <summary>Any change in pixels intensity is going to be considered as an edge.</summary>
        </member>
        <member name="F:AvlNet.EdgeTransition.DarkToBright">
            <summary>Change from dark pixels to bright ones is considered as an edge.</summary>
        </member>
        <member name="F:AvlNet.EdgeTransition.BrightToDark">
            <summary>Change from bright pixels to dark ones is considered as an edge.</summary>
        </member>
        <member name="T:AvlNet.EdgeMaskFilter">
            <summary>Non-recursive filters for gradient computing.</summary>
        </member>
        <member name="F:AvlNet.EdgeMaskFilter.Prewitt">
            <summary>Prewitt filter</summary>
            <remarks>See more &lt;a href="https://en.wikipedia.org/wiki/Prewitt"&gt;Prewitt operator on Wikipedia&lt;/a&gt;</remarks>
        </member>
        <member name="F:AvlNet.EdgeMaskFilter.Sobel">
            <summary>Sobel filter</summary>
            <remarks>See more: &lt;a href="https://en.wikipedia.org/wiki/Sobel_operator"&gt;Sobel operator on Wikipedia&lt;/a&gt;</remarks>
        </member>
        <member name="T:AvlNet.EdgeFilter">
            <summary>Determines which method is used to compute image gradients.</summary>
        </member>
        <member name="F:AvlNet.EdgeFilter.Lanser">
            <summary>Recursive method.</summary>
        </member>
        <member name="F:AvlNet.EdgeFilter.Deriche">
            <summary>Recursive method, modified version of Cannys filter.</summary>
        </member>
        <member name="F:AvlNet.EdgeFilter.Canny">
            <summary>Standard, non-recursive filter.</summary>
        </member>
        <member name="T:AvlNet.DrawingMode">
            <summary>Methods of drawing on the image.</summary>
        </member>
        <member name="F:AvlNet.DrawingMode.Fast">
            <summary>Faster and less sophisticated drawing method.</summary>
        </member>
        <member name="F:AvlNet.DrawingMode.HighQuality">
            <summary>Produces precise and good-looking drawings.</summary>
        </member>
        <member name="T:AvlNet.DownsampleRegionMode">
            <summary>Decides what method will be used by DownsampleRegion filter.</summary>
        </member>
        <member name="F:AvlNet.DownsampleRegionMode.All">
            <summary>All of 4 pixels should be present.</summary>
        </member>
        <member name="F:AvlNet.DownsampleRegionMode.Any">
            <summary>Any of 4 pixels should be present.</summary>
        </member>
        <member name="T:AvlNet.DistanceMeasure">
            <summary>Method to use when measuring distance between two objects like Profiles, Histograms or Images.</summary>
        </member>
        <member name="F:AvlNet.DistanceMeasure.MeanSquaredError">
            <summary>The result is average squared difference between corresponding values.</summary>
        </member>
        <member name="F:AvlNet.DistanceMeasure.MeanError">
            <summary>The result is average difference between corresponding values.</summary>
        </member>
        <member name="T:AvlNet.DirectionMode">
            <summary>Selects direction of port being configured.</summary>
        </member>
        <member name="T:AvlNet.DifferentiationMethod">
            <summary>Methods of profile differentiation.</summary>
        </member>
        <member name="T:AvlNet.DelimiterHandling">
            <summary>Delimiting sequence handling mode.</summary>
        </member>
        <member name="F:AvlNet.DelimiterHandling.LeaveInBuffer">
            <summary>Delimiter will stay in buffer.</summary>
        </member>
        <member name="F:AvlNet.DelimiterHandling.Discard">
            <summary>Delimiter will be discarded both from read sequence and buffer.</summary>
        </member>
        <member name="F:AvlNet.DelimiterHandling.Include">
            <summary>Delimiter will be included in read sequence.</summary>
        </member>
        <member name="T:AvlNet.DataPreprocessing">
            <summary>Method to use when preprocessing data.</summary>
        </member>
        <member name="T:AvlNet.DataMatrixType">
            <summary>Determines datamatrix code type.</summary>
        </member>
        <member name="T:AvlNet.DataMatrixPyramidStrategy">
            <summary>Specifies the step of image downsampling used for finding codes at different scales.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixPyramidStrategy.Strict">
            <summary>Images for different scales are created with downsampling step 1.26</summary>
        </member>
        <member name="F:AvlNet.DataMatrixPyramidStrategy.Precise">
            <summary>Images for different scales are created with downsampling step 1.41</summary>
        </member>
        <member name="F:AvlNet.DataMatrixPyramidStrategy.Fast">
            <summary>Images for different scales are created with downsampling step 2.0</summary>
        </member>
        <member name="T:AvlNet.DataMatrixOutlineStrategy">
            <summary>Specifies precision of outline detection.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixOutlineStrategy.Extended">
            <summary>As Strict, but also adds a method for contaminated Quite Zone.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixOutlineStrategy.Strict">
            <summary>Combines Fast and Precise methods.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixOutlineStrategy.Precise">
            <summary>Precise outline detection. Also requires clean Quite Zone, but produces more precise outline.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixOutlineStrategy.Fast">
            <summary>Fast outline detection. Good enough when Quite Zone is not contaminated.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixOutlineStrategy.SuperFast">
            <summary>Very fast outline detection. Useful for very good quality codes.</summary>
        </member>
        <member name="T:AvlNet.DataMatrixGapSize">
            <summary>Specifies the distance between neighboring modules.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixGapSize.Large">
            <summary>Gaps can be up to 75% of the module size.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixGapSize.Medium">
            <summary>Gaps can be up to 50% of the module size.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixGapSize.Small">
            <summary>Gaps can be up to 25% of the module size.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixGapSize.Zero">
            <summary>There are no gaps between modules.</summary>
        </member>
        <member name="T:AvlNet.DataMatrixDetectionMethod">
            <summary>Specifies how code candidates are located.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixDetectionMethod.FinderPattern">
            <summary>Locates code candidates by looking for L-shaped finder patterns.</summary>
        </member>
        <member name="F:AvlNet.DataMatrixDetectionMethod.QuietZone">
            <summary>Locates code candidates by looking for rectangular quiet zones.</summary>
        </member>
        <member name="T:AvlNet.DataMatrixCodeType">
            <summary>Determines which datamatrix code type is decoded.</summary>
        </member>
        <member name="T:AvlNet.DAQNaviTrigger">
            <summary>Decides which state of input lines will request interrupt.</summary>
        </member>
        <member name="T:AvlNet.DAQmxTerminalConfig">
            <summary>Signal transmission method</summary>
            <remarks>Possible methods of transmitting signal over wires. Please refer to manufacturer manual for details. Helpful article can be found here &lt;a href="http://www.ni.com/white-paper/3344/en/"&gt;http://www.ni.com/white-paper/3344/en/&lt;/a&gt;.</remarks>
        </member>
        <member name="F:AvlNet.DAQmxTerminalConfig.NRSE">
            <summary>Non-Referenced Single-Ended</summary>
        </member>
        <member name="F:AvlNet.DAQmxTerminalConfig.RSE">
            <summary>Referenced Single-Ended</summary>
        </member>
        <member name="T:AvlNet.DAQmxShuntResistorLoc">
            <summary>Selects where shunting resistor is located in DAQmx device.</summary>
        </member>
        <member name="T:AvlNet.DAQmxSampleMode">
            <summary>Methods of signal sampling for DAQmx devices.</summary>
        </member>
        <member name="T:AvlNet.DAQmxPulseWidthUnit">
            <summary>Possible pulse width units for DAQmx devices.</summary>
        </member>
        <member name="T:AvlNet.DAQmxIdleState">
            <summary>Chooses idle state for configured terminal.</summary>
        </member>
        <member name="T:AvlNet.DAQmxFrequencyUnit">
            <summary>Possible frequency units for DAQmx devices.</summary>
        </member>
        <member name="T:AvlNet.DAQmxCountDirection">
            <summary>Selects how to count signal edges.</summary>
        </member>
        <member name="T:AvlNet.DAQmxActiveEdge">
            <summary>Sets signal' active edge.</summary>
        </member>
        <member name="T:AvlNet.CvThresholdType">
            <summary>OpenCV methods of thresholding operation.</summary>
        </member>
        <member name="T:AvlNet.CvTerminationCriteria">
            <summary>Termination criteria for iterative algorithms.</summary>
        </member>
        <member name="T:AvlNet.CvTemplateMatchingMethod">
            <summary>Describes template matching algorithms in OpenCV.</summary>
        </member>
        <member name="T:AvlNet.CvStructuringShape">
            <summary>Available OpenCV kernels for morphological operations (MorphShapes).</summary>
        </member>
        <member name="T:AvlNet.CvShapeMatchingMethod">
            <summary>OpenCV shape matching algorithms.</summary>
        </member>
        <member name="T:AvlNet.CvMorphologicalOperation">
            <summary>Types of OpenCV morphological operations. (MorphTypes)</summary>
        </member>
        <member name="T:AvlNet.CvInterpolationMethod">
            <summary>Interpolation methods available for OpenCV operations. (InterpolationFlags)</summary>
        </member>
        <member name="T:AvlNet.CvInpaintMethod">
            <summary>Available OpenCV inpaint algorithms.</summary>
        </member>
        <member name="T:AvlNet.CvHoughMethod">
            <summary>Available Hough Transform methods in OpenCV function.</summary>
        </member>
        <member name="T:AvlNet.CvGrabCutMode">
            <summary>Modes of OpenCV GrabCut algorithm.</summary>
        </member>
        <member name="T:AvlNet.CvFontType">
            <summary>Fonts available in OpenCV.</summary>
        </member>
        <member name="T:AvlNet.CvDistanceType">
            <summary>Available OpenCV distance measure types (DistanceTypes).</summary>
        </member>
        <member name="T:AvlNet.CvConversionCode">
            <summary>Available image conversions in OpenCV.</summary>
        </member>
        <member name="T:AvlNet.CvContourRetrievalMode">
            <summary>Methods of OpenCV contour retrieving.</summary>
        </member>
        <member name="T:AvlNet.CvContourApproximationMethod">
            <summary>Methods of approximation available for OpenCV contour detection.</summary>
        </member>
        <member name="T:AvlNet.CvColorMap">
            <summary>Color palette used in cvApplyColorMap</summary>
        </member>
        <member name="T:AvlNet.CvBorderType">
            <summary>OpenCV border type (BorderTypes).</summary>
        </member>
        <member name="T:AvlNet.CvAdaptiveMethod">
            <summary>Methods for OpenCV Adaptive Threshold operation. (AdaptiveThresholdTypes)</summary>
        </member>
        <member name="T:AvlNet.CropScaleMode">
            <summary>Chooses scale for the output image.</summary>
        </member>
        <member name="F:AvlNet.CropScaleMode.AlignedScale">
            <summary>Rescale according to the input alignment scale.</summary>
        </member>
        <member name="F:AvlNet.CropScaleMode.InputScale">
            <summary>Keep the scale unchanged.</summary>
        </member>
        <member name="T:AvlNet.CorrelationMeasure">
            <summary>Ways of computing image correlation.</summary>
        </member>
        <member name="F:AvlNet.CorrelationMeasure.CrossCorrelation">
            <summary>Result is the normalized sum of products of corresponding pixel values of the images. This value always lies in closed interval \([-1,1]\), with \(1\) indicating the images ideal correlation.</summary>
        </member>
        <member name="F:AvlNet.CorrelationMeasure.NormalizedCrossCorrelation">
            <summary>Result is the sum of products of corresponding pixel values of the images.</summary>
        </member>
        <member name="T:AvlNet.CornerResponseMethod">
            <summary>Corner detection method</summary>
            <remarks>Corner response is calculated with regard to convolution matrix, given as \[M = \left(\begin{array}{ccc} \sum g_r^2   &amp; \sum g_c g_r \\ \sum g_c g_r &amp; \sum g_c^2 \end{array} \right)\]</remarks>
        </member>
        <member name="F:AvlNet.CornerResponseMethod.Harris">
            <summary>Harris and Stephens corner detector</summary>
            <remarks>Harris' corner response is calculated as follows: \(H = \mathrm{det}(M) - k \mathrm{tr}^2(M)\) where \(M\) denotes convolution matrix.</remarks>
        </member>
        <member name="F:AvlNet.CornerResponseMethod.KanadeTomasi">
            <summary>Kanade-Tomasi corner detector</summary>
            <remarks>\(KT = \mathrm{min}(\lambda_1, \lambda_2)\), where \(\lambda_1, \lambda_2\) are eigenvalues of convolution matrix.</remarks>
        </member>
        <member name="T:AvlNet.ColorPalette">
            <summary>Describes which color palette will be used by the ColorizeImage filter.</summary>
        </member>
        <member name="T:AvlNet.CircularityMeasure">
            <summary>When calculating circularity one may choose to use different reference circular region.</summary>
        </member>
        <member name="F:AvlNet.CircularityMeasure.RadiusPreserving">
            <summary>Circular region that has radius equal to input regions' radius.</summary>
        </member>
        <member name="F:AvlNet.CircularityMeasure.PerimeterPreserving">
            <summary>Circular region with perimeter length equal to input region.</summary>
        </member>
        <member name="F:AvlNet.CircularityMeasure.BoundingCirclePreserving">
            <summary>Minimal bounding circle.</summary>
        </member>
        <member name="T:AvlNet.CircleFittingMethod">
            <summary>Possible methods of fitting a circle to a set of points.</summary>
        </member>
        <member name="F:AvlNet.CircleFittingMethod.GeometricLandau">
            <summary>Iterative method improving an initial guess basing on distances between the result circle and the given points.</summary>
        </member>
        <member name="F:AvlNet.CircleFittingMethod.AlgebraicTaubin">
            <summary>Minimizes the average squared distance between the result circle and the given points.</summary>
        </member>
        <member name="F:AvlNet.CircleFittingMethod.AlgebraicPratt">
            <summary>Minimizes the average squared distance between the result circle and the given points.</summary>
        </member>
        <member name="F:AvlNet.CircleFittingMethod.AlgebraicKasa">
            <summary>Minimizes the average squared pseudo-distance between the result circle and the given points. It is the fastest method, but may be less accurate when the input points are sampled along small arc only.</summary>
        </member>
        <member name="T:AvlNet.CharacterSortingOrder">
            <summary>Decides whether and how to sort character regions in optical character recognition related filters.</summary>
        </member>
        <member name="F:AvlNet.CharacterSortingOrder.None">
            <summary>Sorting will not be performed.</summary>
        </member>
        <member name="T:AvlNet.BoundingRectangleFeature">
            <summary>Criterion of finding bounding rectangle.</summary>
        </member>
        <member name="F:AvlNet.BoundingRectangleFeature.MinimalPerimeter">
            <summary>Bounding rectangle with minimal perimeter is computed.</summary>
        </member>
        <member name="F:AvlNet.BoundingRectangleFeature.MinimalArea">
            <summary>Bounding rectangle with minimal area is computed.</summary>
        </member>
        <member name="T:AvlNet.BorderPosition">
            <summary>Determines where exactly the border is built.</summary>
        </member>
        <member name="F:AvlNet.BorderPosition.Centered">
            <summary>The border is built inside and outside the input object.</summary>
        </member>
        <member name="F:AvlNet.BorderPosition.External">
            <summary>The border is built outside the input object.</summary>
        </member>
        <member name="F:AvlNet.BorderPosition.Internal">
            <summary>The border is built inside the input object.</summary>
        </member>
        <member name="T:AvlNet.BlobsDifferenceMeasure">
            <summary>Changes classification method in gray based image segmentation.</summary>
        </member>
        <member name="F:AvlNet.BlobsDifferenceMeasure.Bounds">
            <summary>Two blobs can be joined together only if the difference between the minimum and the maximum pixel value in the resulting blob is at most &lt;span class="InOutParam"&gt;inMaxDifference&lt;/span&gt;.</summary>
        </member>
        <member name="F:AvlNet.BlobsDifferenceMeasure.Neighbour">
            <summary>Two adjacent pixels are part of the same blob, when their values differ by at most &lt;span class="InOutParam"&gt;inMaxDifference&lt;/span&gt;</summary>
        </member>
        <member name="F:AvlNet.BlobsDifferenceMeasure.Mean">
            <summary>Pixel is considered as a part of adjacent blob, when its value differs by at most &lt;span class="InOutParam"&gt;inMaxDifference&lt;/span&gt; from the mean value of pixels already included in blob.</summary>
        </member>
        <member name="T:AvlNet.BlobMergingMethod">
            <summary>Changes classification method in gray based image segmentation.</summary>
        </member>
        <member name="F:AvlNet.BlobMergingMethod.MeanSorted">
            <summary>Two blobs can be merged together if their average values are similar enough. Sorted pass.</summary>
        </member>
        <member name="F:AvlNet.BlobMergingMethod.MeanLinear">
            <summary>Two blobs can be merged together if their average values are similar enough. Linear pass.</summary>
        </member>
        <member name="F:AvlNet.BlobMergingMethod.NeighborVerified">
            <summary>Two blobs can be merged together if there are two neighboring pixels that are similar enough; improved.</summary>
        </member>
        <member name="F:AvlNet.BlobMergingMethod.Neighbor">
            <summary>Two blobs can be merged together if there are two neighboring pixels that are similar enough.</summary>
        </member>
        <member name="T:AvlNet.BitFlowTrigPolarity">
            <summary>Selects active state of trigger signal.</summary>
        </member>
        <member name="T:AvlNet.BitFlowTriggers">
            <summary>Available triggers.</summary>
        </member>
        <member name="T:AvlNet.BitFlowTriggerMode">
            <summary>Possible trigger signal modes.</summary>
        </member>
        <member name="T:AvlNet.BitFlowTrigAssignments">
            <summary>Possible assignments of trigger signals.</summary>
        </member>
        <member name="T:AvlNet.BayerType">
            <summary>Describes kind of Bayer-encoding.</summary>
        </member>
        <member name="T:AvlNet.BarcodesErrors">
            <summary>Code grading error details.</summary>
        </member>
        <member name="F:AvlNet.BarcodesErrors.Error_7">
            <summary>Insufficient quiet zone size.</summary>
        </member>
        <member name="F:AvlNet.BarcodesErrors.Error_6">
            <summary>Scanning segment exceeds image, please increase the field of view and try again.</summary>
        </member>
        <member name="F:AvlNet.BarcodesErrors.Error_5">
            <summary>Not supported barcode format.</summary>
        </member>
        <member name="F:AvlNet.BarcodesErrors.Error_4">
            <summary>Reference decode algorithm failed to read the code. Improve code quality.</summary>
        </member>
        <member name="F:AvlNet.BarcodesErrors.Error_3">
            <summary>Minimum reflectance margin below 5% of Symbol Contrast. Edge determination might be incorrect.</summary>
        </member>
        <member name="F:AvlNet.BarcodesErrors.Error_2">
            <summary>Insufficient number of extracted bars. Improve code illumination.</summary>
        </member>
        <member name="F:AvlNet.BarcodesErrors.Error_1">
            <summary>Code Grading Failed after resizing Quiet Zone.</summary>
        </member>
        <member name="T:AvlNet.BarcodeFormat">
            <summary>Recognizable formats of barcodes.</summary>
        </member>
        <member name="T:AvlNet.AXISRotation">
            <summary>Rotates image clockwise by specified angle.</summary>
        </member>
        <member name="T:AvlNet.AXISResolution">
            <summary>Sets resolution of captured image.</summary>
        </member>
        <member name="T:AvlNet.Axis">
            <summary>Selects axis on which operation will be performed.</summary>
        </member>
        <member name="F:AvlNet.Axis.Y">
            <summary>Denotes that operation will be performed along vertical axis.</summary>
        </member>
        <member name="F:AvlNet.Axis.X">
            <summary>Denotes that operation will be performed along horizontal axis.</summary>
        </member>
        <member name="F:AvlNet.AngleRange._0_360">
            <summary>Measured angle will be in range from 0 to 360 degree.</summary>
        </member>
        <member name="F:AvlNet.AngleRange._0_180">
            <summary>Measured angle will be in range from 0 to 180 degree.</summary>
        </member>
        <member name="T:AvlNet.AngleMetric">
            <summary>Methods of angle measurement.</summary>
        </member>
        <member name="T:AvlNet.Anchor2D">
            <summary>Decides about relative position of object. Exact behaviour depends on filter being used.</summary>
        </member>
        <member name="T:AvlNet.Anchor1D">
            <summary>Decides about relative position of object. Exact behaviour depends on filter being used.</summary>
        </member>
        <member name="T:AvlNet.AdjustmentMetric">
            <summary>Optimization metric for path adjustment</summary>
        </member>
        <member name="F:AvlNet.AdjustmentMetric.SegmentDistance">
            <summary>Treat path as a set of tangent lines, minimize error using least squares</summary>
        </member>
        <member name="F:AvlNet.AdjustmentMetric.PointDistance_Median">
            <summary>Treat path as a set of points, minimize error using median</summary>
        </member>
        <member name="F:AvlNet.AdjustmentMetric.PointDistance_LSE">
            <summary>Treat path as a set of points, minimize error using least squares</summary>
        </member>
        <member name="T:AvlNet.ActivationFunction">
            <summary>Function used to activate neuron.</summary>
        </member>
        <member name="F:AvlNet.ActivationFunction.FastTanh">
            <summary>The same as Tanh, but uses optimized exponent function.</summary>
        </member>
        <member name="F:AvlNet.ActivationFunction.FastSigmoidal">
            <summary>The same as Sigmoidal, but uses optimized exponent function.</summary>
        </member>
        <member name="F:AvlNet.ActivationFunction.Step">
            <summary>Step function</summary>
            <remarks>\( f(x) =  \begin{cases}   1 &amp; \text{if } x &gt; 0 \\   0       &amp; \text{otherwise}  \end{cases}\)</remarks>
        </member>
        <member name="F:AvlNet.ActivationFunction.Elliot">
            <summary>Elliot function</summary>
            <remarks>\( f(x) = \frac{x}{1+|x|}+0.5\)</remarks>
        </member>
        <member name="F:AvlNet.ActivationFunction.Gauss">
            <summary>Gaussian function</summary>
            <remarks>\( f(x) = e^{-x^{2} }\)</remarks>
        </member>
        <member name="F:AvlNet.ActivationFunction.ArcTan">
            <summary>Inverse tangent function</summary>
            <remarks>\( f(x) = \arctan(x)\)</remarks>
        </member>
        <member name="F:AvlNet.ActivationFunction.Log">
            <summary>Logarithmic function.</summary>
        </member>
        <member name="F:AvlNet.ActivationFunction.Tanh">
            <summary>Hyperbolic tangent function</summary>
            <remarks>\(f(x) = \tanh(x) = \frac{\exp(2x)-1}{\exp(2x)+1}\)</remarks>
        </member>
        <member name="F:AvlNet.ActivationFunction.Linear">
            <summary>Saturated linear function</summary>
            <remarks>Saturated linear function. \( f(x) =  \begin{cases}   1 &amp; \text{if } x &gt; 1 \\   0       &amp; \text{if } x &lt; 0 \\   x &amp; \text{otherwise}  \end{cases}\)</remarks>
        </member>
        <member name="F:AvlNet.ActivationFunction.Sigmoidal">
            <summary>Logistic function</summary>
            <remarks>\( f(x) = \frac{1}{1+e^{-x} }\)</remarks>
        </member>
        <member name="M:avl.Xml_SetNodeValues(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set values of nodes which were selected using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inText">Value to set to nodes.</param>
        </member>
        <member name="M:avl.Xml_SetAttributes(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Set values of attributes which were selected using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inValue">Value to set to attributes.</param>
        </member>
        <member name="M:avl.Xml_SelectSingleAttribute_AsBool(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;!System.Runtime.CompilerServices.IsConst,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Select attribute from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inDefault">If set this value will be returned when no attribute is found or attribute is incorrect. Default value: atl::NIL.</param>
            <param name="outAttributeName">Found attribute name.</param>
            <param name="outAttributeValue">Found attribute value as bool.</param>
        </member>
        <member name="M:avl.Xml_SelectSingleAttribute_AsReal(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Select attribute from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inDefault">If set this value will be returned when no attribute is found or attribute is incorrect. Default value: atl::NIL.</param>
            <param name="outAttributeName">Found attribute name.</param>
            <param name="outAttributeValue">Found attribute value as float.</param>
        </member>
        <member name="M:avl.Xml_SelectSingleAttribute_AsInteger(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Select attribute from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inDefault">If set this value will be returned when no attribute is found or attribute is incorrect. Default value: atl::NIL.</param>
            <param name="outAttributeName">Found attribute name.</param>
            <param name="outAttributeValue">Found attribute value as integer.</param>
        </member>
        <member name="M:avl.Xml_SelectSingleAttribute_AsString(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Select attribute from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inDefault">If set this value will be returned when no attribute is found or attribute is incorrect. Default value: atl::NIL.</param>
            <param name="outAttributeName">Found attribute name.</param>
            <param name="outAttributeValue">Found attribute value as string.</param>
        </member>
        <member name="M:avl.Xml_SelectMultipleAttributes_AsBools(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Boolean&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects attributes from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outAttributesNames">Found attributes names.</param>
            <param name="outAttributesValues">Found attributes values as bool.</param>
        </member>
        <member name="M:avl.Xml_SelectMultipleAttributes_AsReals(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects attributes from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outAttributesNames">Found attributes names.</param>
            <param name="outAttributesValues">Found attributes values as float.</param>
        </member>
        <member name="M:avl.Xml_SelectMultipleAttributes_AsIntegers(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects attributes from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outAttributesNames">Found attributes names.</param>
            <param name="outAttributesValues">Found attributes values as integer.</param>
        </member>
        <member name="M:avl.Xml_SelectMultipleAttributes_AsStrings(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects attributes from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outAttributesNames">Found attributes names.</param>
            <param name="outAttributesValues">Found attributes values as string.</param>
        </member>
        <member name="M:avl.Xml_SelectSingleNodeValue_AsBool(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects node from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inDefault">If no node was found default value will be used. Default value: atl::NIL.</param>
            <param name="outNode">Found node.</param>
            <param name="outNodeValue">Found node text as bool.</param>
        </member>
        <member name="M:avl.Xml_SelectSingleNodeValue_AsReal(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects node from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inDefault">If no node was found default value will be used. Default value: atl::NIL.</param>
            <param name="outNode">Found node.</param>
            <param name="outNodeValue">Found node text as float.</param>
        </member>
        <member name="M:avl.Xml_SelectSingleNodeValue_AsInteger(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects node from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inDefault">If no node was found default value will be used. Default value: atl::NIL.</param>
            <param name="outNode">Found node.</param>
            <param name="outNodeValue">Found node text as integer.</param>
        </member>
        <member name="M:avl.Xml_SelectSingleNodeValue_AsString(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects node from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="inDefault">If no node was found default value will be used. Default value: atl::NIL.</param>
            <param name="outNode">Found node.</param>
            <param name="outNodeValue">Found node text as string.</param>
        </member>
        <member name="M:avl.Xml_SelectMultipleNodeValues_AsBools(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Boolean&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects nodes from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outNodes">Found nodes.</param>
            <param name="outNodeValues">Found nodes text as bool.</param>
        </member>
        <member name="M:avl.Xml_SelectMultipleNodeValues_AsReals(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects nodes from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outNodes">Found nodes.</param>
            <param name="outNodeValues">Found nodes text as float.</param>
        </member>
        <member name="M:avl.Xml_SelectMultipleNodeValues_AsIntegers(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects nodes from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outNodes">Found nodes.</param>
            <param name="outNodeValues">Found nodes text as integer.</param>
        </member>
        <member name="M:avl.Xml_SelectMultipleNodeValues_AsStrings(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects nodes from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outNodes">Found nodes.</param>
            <param name="outNodeValues">Found nodes text as string.</param>
        </member>
        <member name="M:avl.Xml_SelectSingleNode(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects a node from the XML tree using an XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outNode">Found node.</param>
        </member>
        <member name="M:avl.Xml_SelectMultipleNodes(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects nodes from the XML tree using XPath request.</summary>
            <param name="inNode">Source node.</param>
            <param name="inXPath">XPath criteria.</param>
            <param name="outNodes">Found nodes.</param>
        </member>
        <member name="M:avl.Xml_CreateNode(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new XmlNode.</summary>
            <param name="inName">Node name.</param>
            <param name="inText">Text value of XmlNode.</param>
            <param name="inAttributeNames">Attributes names.</param>
            <param name="inAttributeValues">Attributes values.</param>
        </member>
        <member name="M:avl.Xml_AppendAttributes(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Appends new attributes to the node.</summary>
            <param name="inNode">Node to which new attributes will be added.</param>
            <param name="inNames">Attributes names.</param>
            <param name="inValues">Attributes values.</param>
        </member>
        <member name="M:avl.Xml_AddChildNodes_OfArray(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.XmlNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Appends new children nodes to the XML node.</summary>
            <param name="inParent">Parent XML node to which new nodes will be added.</param>
            <param name="inChildren">Nodes to be added.</param>
            <param name="outNode">New node with added nodes.</param>
        </member>
        <member name="M:avl.Xml_AddChildNodes(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.XmlNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.XmlNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.XmlNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.XmlNode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.XmlNode&gt;!System.Runt">
            <summary>Appends new children nodes to the XML node.</summary>
            <param name="inParent">Parent XML node to which new nodes will be added.</param>
            <param name="inChild1">Node to be added.</param>
            <param name="inChild2">Node to be added. Default value: atl::NIL.</param>
            <param name="inChild3">Node to be added. Default value: atl::NIL.</param>
            <param name="inChild4">Node to be added. Default value: atl::NIL.</param>
            <param name="inChild5">Node to be added. Default value: atl::NIL.</param>
            <param name="inChild6">Node to be added. Default value: atl::NIL.</param>
            <param name="inChild7">Node to be added. Default value: atl::NIL.</param>
            <param name="inChild8">Node to be added. Default value: atl::NIL.</param>
            <param name="outNode">New node with added nodes.</param>
        </member>
        <member name="M:avl.StringToXmlNode(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Parses text as an XML tree.</summary>
            <param name="inText">Text to be parsed as an XML tree.</param>
        </member>
        <member name="M:avl.XmlNodeToString(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an XML tree to the string.</summary>
            <param name="inNode">XmlNode to be converted.</param>
        </member>
        <member name="M:avl.Xml_GetNodeText(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets the text from the selected node.</summary>
            <param name="outText">Text value if node is a text node.</param>
        </member>
        <member name="M:avl.AccessXmlNode(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.XmlNode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets information from the XmlNode object.</summary>
            <param name="outChildren">Children nodes of the inNode.</param>
            <param name="outAttributeNames">List of attributes names.</param>
            <param name="outAttributeValues">List of attributes values.</param>
            <param name="outName">Node name.</param>
            <param name="outText">Text value if node is a text node.</param>
        </member>
        <member name="M:avl.Xml_GetRealAttribute(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets a node attribute value as Real.</summary>
            <param name="inNode">Source node.</param>
            <param name="inName">Attribute name.</param>
            <param name="inDefault">Value if attribute was not found. Default value: atl::NIL.</param>
            <param name="outValue">Attribute value.</param>
        </member>
        <member name="M:avl.Xml_GetIntegerAttribute(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets a node attribute value as Integer.</summary>
            <param name="inNode">Source node.</param>
            <param name="inName">Attribute name.</param>
            <param name="inDefault">Value if attribute was not found. Default value: atl::NIL.</param>
            <param name="outValue">Attribute value.</param>
        </member>
        <member name="M:avl.Xml_GetBoolAttribute(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets a node attribute value as Bool.</summary>
            <param name="inNode">Source node.</param>
            <param name="inName">Attribute name.</param>
            <param name="inDefault">Value if attribute was not found. Default value: atl::NIL.</param>
            <param name="outValue">Attribute value.</param>
        </member>
        <member name="M:avl.Xml_GetStringAttribute(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets a node attribute value as String.</summary>
            <param name="inNode">Source node.</param>
            <param name="inName">Attribute name.</param>
            <param name="inDefault">Value if attribute was not found. Default value: atl::NIL.</param>
            <param name="outValue">Attribute value.</param>
        </member>
        <member name="M:avl.Xml_GetChildNode(avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets a node child.</summary>
            <param name="inNode">Source node.</param>
            <param name="inIndex">Child node index.</param>
            <param name="outChild">Child node of the inNode.</param>
        </member>
        <member name="M:avl.Xml_SaveFile(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves an XML DOM tree to the file.</summary>
            <param name="inFile">Path to the destination file.</param>
            <param name="inNode">XML tree to save.</param>
        </member>
        <member name="M:avl.Xml_LoadFile(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.XmlNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads an XML tree from the file.</summary>
            <param name="inFile">Path to an XML file.</param>
            <param name="outNode">Result XML DOM object.</param>
        </member>
        <member name="M:avl.GetKeyboardKeys(System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns virtual key codes of the pressed keys or NULL if no key was pressed.</summary>
            <param name="inNumKeypad">Determines whether to analyze keys from numeric keypad. Default value: True.</param>
            <param name="inAlpha">Determines whether to analyze keys from alphanumeric keypad. Default value: True.</param>
            <param name="inSpecial">Determines whether to analyze special keys.</param>
            <param name="inFKeys">Determines whether to analyze functional keys (F1 to F24).</param>
            <param name="outKeyCodes">Virtual key codes of the pressed keys. See documentation for a complete table.</param>
        </member>
        <member name="M:avl.GetKeyboardKeyState(System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks if the specified keyboard key is down and if it is toggled.</summary>
            <param name="inKeyCode">Virtual key code. See documentation for a complete table.</param>
            <param name="outIsDown">Informs if the specified keyboard key is being pressed at the moment.</param>
            <param name="outIsToggled">Informs about the state. Important for keys such as CapsLock.</param>
        </member>
        <member name="M:avs.AvsFilter_GetClockTime(avs.ClockTimeState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Stops clock to measure performance.</summary>
            <param name="inStartTime">Start time - use StartClock filter. Default value: atl::NIL.</param>
            <param name="outElapsedTime">Time in milliseconds from last StartClock call.</param>
        </member>
        <member name="M:avs.AvsFilter_GetClockTime_Deprecated(avs.ClockTimeState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Stops clock to measure performance.</summary>
            <param name="inStartTime">Start time - use StartClock filter. Default value: atl::NIL.</param>
            <param name="outElapsedTime">Time in milliseconds from last StartClock call.</param>
        </member>
        <member name="M:avl.GetClockTime(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Stops clock to measure performance.</summary>
            <param name="inStartTime">Start time - use StartClock filter.</param>
            <param name="outElapsedTime">Time in milliseconds from last StartClock call.</param>
        </member>
        <member name="M:avl.GetClockTime_Deprecated(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Stops clock to measure performance.</summary>
            <param name="inStartTime">Start time - use StartClock filter.</param>
            <param name="outElapsedTime">Time in milliseconds from last StartClock call.</param>
        </member>
        <member name="M:avl.StartClock(System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Starts clock to measure performance.</summary>
            <param name="outStartTime">Start time.</param>
        </member>
        <member name="M:avl.MeasurePeriod(avl.MeasureState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns elapsed time in milliseconds from last filter call.</summary>
            <param name="outTime">Elapsed time in milliseconds.</param>
            <param name="outFrequency">The resulting frequency in Hz or FPS.</param>
        </member>
        <member name="M:avl.DelayByPeriod(avl.DelayByPeriodState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>Suspends the program workflow for inTime milliseconds relative to the end of the filter's last invoke time.</summary>
            <param name="inTime">Target period in milliseconds. Default value: 100.</param>
        </member>
        <member name="M:avl.Delay(System.Int32)">
            <summary>Suspends the program workflow for inTime milliseconds.</summary>
            <param name="inTime">Target time in milliseconds. Default value: 100.</param>
        </member>
        <member name="M:avl.CurrentDateTime(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.In">
            <summary>Returns a string containing the date time information in selected format and all of the date time data separately.</summary>
            <param name="inFormat">Date time string format. Default value: \"%x %X\".</param>
            <param name="outDateTimeString">Date time string.</param>
            <param name="outMilliseconds">Milliseconds [0-999].</param>
            <param name="outSeconds">Seconds [0-60].</param>
            <param name="outMinutes">Minutes [0-59].</param>
            <param name="outHour">Hour in 24h format [0-23].</param>
            <param name="outDayOfMonth">Day of the month [1-31].</param>
            <param name="outMonth">Month as a decimal number [1-12].</param>
            <param name="outYear">Year.</param>
            <param name="outDayOfWeek">Day of the week as a decimal number with Sunday as 0 [0-6].</param>
            <param name="outDayOfYear">Day of the year [1-366].</param>
            <param name="outTimezoneOffset">Offset relative to UTC in seconds (negative value for positive time zone).</param>
            <param name="outDaylightSaving">Whether current local time is subject to Daylight Saving.</param>
        </member>
        <member name="M:avl.PlaySoundFile(avl.PlaySoundFileState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Plays specified audio file in WAV format.</summary>
            <param name="inFile">Sound file in WAV format.</param>
            <param name="inSynchronous">Plays sound in synchronous mode, waiting for the end of playback. Default value: False.</param>
        </member>
        <member name="M:avl.SerialPort_ReadStringUntil(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads the string from the serial port to encounter a string delimiter.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
            <param name="inEndString">Delimiter string that will be searched in incoming stream.</param>
            <param name="outString">Conditionally returns received string without delimiter.</param>
        </member>
        <member name="M:avl.SerialPort_ReadString(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads string characters from serial port.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
            <param name="outString">Conditionally returns string with concatenated all characters available in input buffer.</param>
        </member>
        <member name="M:avl.SerialPort_ReadChar(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads single character from serial port.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
            <param name="outCharacter">Conditionally returns string with one received character.</param>
        </member>
        <member name="M:avl.SerialPort_ReadBuffer(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Conditional&lt;avl.ByteBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads raw binary data from serial port.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
            <param name="outBuffer">Conditionally returns non empty byte buffer with raw data, when any data available.</param>
        </member>
        <member name="M:avl.SerialPort_Read_Deprecated(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads characters in binary mode from serial port.</summary>
            <param name="outData">Conditionally returns non empty array of character values, when any data available.</param>
        </member>
        <member name="M:avl.SerialPort_ReadByte(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads one character in binary mode from serial port.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
            <param name="outData">Conditionally returns received character value, when one is available.</param>
        </member>
        <member name="M:avl.SerialPort_WriteString(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Writes string characters to serial port.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
        </member>
        <member name="M:avl.SerialPort_WriteChar(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Write single ASCII character to device.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
            <param name="inCharacter">Single character to send.</param>
        </member>
        <member name="M:avl.SerialPort_WriteBuffer(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Writes raw binary data from a byte buffer to serial port.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
            <param name="inBuffer">Buffer containing raw data to write.</param>
        </member>
        <member name="M:avl.SerialPort_Write_Deprecated(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Writes array of characters in binary mode to serial port.</summary>
            <param name="inData">Array of character values, each in the range from 0 to 255.</param>
        </member>
        <member name="M:avl.SerialPort_WriteByte(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">
            <summary>Writes one character in binary mode to serial port.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
            <param name="inData">Character value.</param>
        </member>
        <member name="M:avl.SerialPort_Config(avl.SerialPortState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SerialPortParity.Type,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SerialPortFlowControl.Type,avl.SerialPortStopBits.Type)">
            <summary>Configures the serial port.</summary>
            <param name="inPortId">Identifies open port instance when working with multiple serial ports. Default value: 0.</param>
            <param name="inPort">Serial port name. Default value: \"COM1\".</param>
            <param name="inBaudRate">Serial baud rate. Default value: 9600.</param>
            <param name="inParity">Serial parity.</param>
            <param name="inDataBits">Serial character size. Default value: 8.</param>
            <param name="inFlowControl">Serial flow control.</param>
            <param name="inStopBits">Serial stop bits.</param>
        </member>
        <member name="M:avs.AvsFilter_Execute(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Executes a command using the system console.</summary>
            <param name="inCommand">System command to be executed.</param>
            <param name="inWorkingDirectory">Working directory in which the command will be executed. Default value: \".\".</param>
            <param name="outReturnCode">Return code of the executed command.</param>
            <param name="outResult">Captured text data.</param>
        </member>
        <member name="M:avl.ModbusTCP_WriteMultipleRegisters_AsByteBuffer(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 16. Write a block of contiguous registers (1 to 123 registers) in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first register.</param>
            <param name="inBuffer">Buffer with values to set.</param>
        </member>
        <member name="M:avl.ModbusTCP_WriteMultipleRealRegisters(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 16. Write a block of contiguous registers (1 to 123 registers) in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first register.</param>
            <param name="inRealValues">Real values to set.</param>
        </member>
        <member name="M:avl.ModbusTCP_WriteMultipleIntegerRegisters(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ModbusDataFormat.Type)">
            <summary>Function Code 16. Write a block of contiguous registers (1 to 123 registers) in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first register.</param>
            <param name="inIntegerValues">Integer values to set.</param>
        </member>
        <member name="M:avl.ModbusTCP_ForceMultipleCoils(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,atl.Array&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 15. Force each coil in a sequence of coils to either ON or OFF in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first coil.</param>
        </member>
        <member name="M:avl.ModbusTCP_ReadExceptionStatus(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 07. Attempts to read Exception Status</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
        </member>
        <member name="M:avl.ModbusTCP_WriteSingleRegister(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32)">
            <summary>Function Code 06. Write a single holding register in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inRegisterAddress">The address of the holding register to be written.</param>
            <param name="inValue">Value to send.</param>
        </member>
        <member name="M:avl.ModbusTCP_WriteCoil(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean)">
            <summary>Function Code 05. Write a single output to either ON or OFF in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inOutputAddress">The address of the coil to be forced.</param>
        </member>
        <member name="M:avl.ModbusTCP_ReadInputRealRegisters(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 04. Read contiguous input registers in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first input register.</param>
            <param name="inCount">Default value: 1.</param>
            <param name="outRealValues">Received real values.</param>
        </member>
        <member name="M:avl.ModbusTCP_ReadInputIntegerRegisters(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,avl.ModbusDataFormat.Type,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 04. Read contiguous input registers in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first input register.</param>
            <param name="inCount">Default value: 1.</param>
            <param name="outIntegerValues">Received integer values.</param>
        </member>
        <member name="M:avl.ModbusTCP_ReadInputRegisters_AsByteBuffer(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 03. Read contiguous input registers in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first input register.</param>
            <param name="inCount">Number of registers to read. Each register is 2 Bytes in size. Default value: 1.</param>
            <param name="outData">Received register values.</param>
        </member>
        <member name="M:avl.ModbusTCP_ReadMultipleRealRegisters(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 03. Read the contents of a contiguous block of holding registers in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first holding register.</param>
            <param name="inCount">Default value: 1.</param>
            <param name="outRealValue">Received real value.</param>
        </member>
        <member name="M:avl.ModbusTCP_ReadMultipleIntegerRegisters(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,avl.ModbusDataFormat.Type,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 03. Read the contents of a contiguous block of holding registers in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first holding register.</param>
            <param name="inCount">Default value: 1.</param>
            <param name="outIntegerValue">Received integer value.</param>
        </member>
        <member name="M:avl.ModbusTCP_ReadMultipleRegisters_AsByteBuffer(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 03. Read the contents of a contiguous block of holding registers in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first holding register.</param>
            <param name="inCount">Number of registers to read. Each register is 2 Bytes in size. Default value: 1.</param>
            <param name="outData">Received register values.</param>
        </member>
        <member name="M:avl.ModbusTCP_ReadDiscreteInputs(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,atl.Array&lt;System.Boolean&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 02. Read contiguous status of discrete inputs in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first input.</param>
            <param name="inBitCount">Requested number of bits. Default value: 1.</param>
            <param name="outBits">Response.</param>
        </member>
        <member name="M:avl.ModbusTCP_ReadCoils(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,atl.Array&lt;System.Boolean&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Function Code 01. Read contiguous status of coils in a remote device</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Unit identifier. Default value: 1.</param>
            <param name="inStartingAddress">The address of the first coil.</param>
            <param name="inBitCount">Requested number of bits. Default value: 1.</param>
            <param name="outBits">Response.</param>
        </member>
        <member name="M:avl.ModbusTCP_SendBuffer(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sends data using Modbus TCP frame format</summary>
            <param name="inSocket">Connected socket ID on port 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inUnitID">Default is 1. Default value: 1.</param>
            <param name="inFunctionCode">Function code. Default value: 1.</param>
            <param name="inBuffer">Data to send.</param>
            <param name="outResponse">Response data.</param>
        </member>
        <member name="M:avl.ModbusTCP_Close(System.Int32)">
            <summary>Close a connected Modbus socket gracefully.</summary>
            <param name="inSocket">Connected socket Id.</param>
        </member>
        <member name="M:avl.ModbusTCP_Connect(avl.TcpIpConnectState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Connects as a client to a remote Modbus server socket.</summary>
            <param name="inHost">The hostname or IP address to connect to. Default value: \"localhost\".</param>
            <param name="inPort">Modbus port of host to connect to. 502 is the default one. Default value: 502.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inKeepAliveTime">When specified activates Tcp/Ip keep alive on new socket with given idle time. Default value: atl::NIL.</param>
            <param name="outSocket">Connected socket ID.</param>
        </member>
        <member name="M:avl.TcpIp_Close(System.Int32)">
            <summary>Close a connected TCP socket gracefully.</summary>
            <param name="inSocket">Connected socket Id.</param>
        </member>
        <member name="M:avl.TcpIp_ReadAll_Deprecated(System.Int32,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Receives octets from a connected socket until the other side finishes sending.</summary>
            <param name="inSocket">Connected socket ID, will be closed if successfully read.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="outText">Received data as textual string.</param>
            <param name="outBytes">Received octets as integer values.</param>
            <param name="outEof">Whether everything has been read and socket is closed.</param>
        </member>
        <member name="M:avl.TcpIp_ReadChunk_Deprecated(System.Int32,System.Int32,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Receives a fixed number of bytes from a connected TCP socket.</summary>
            <param name="inSocket">Connected socket ID.</param>
            <param name="inLength">Number of bytes to receive.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="outText">Received data as textual string.</param>
            <param name="outBytes">Received octets as integer values.</param>
            <param name="outEof">Indicates whether the operation was interrupted on attempt to get data from beyond the end of stream.</param>
        </member>
        <member name="M:avl.TcpIp_ReadLine_Deprecated(System.Int32,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DelimiterHandling.Type,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads from a connected TCP socket until receiving a specific sequence.</summary>
            <param name="inSocket">Connected socket ID.</param>
            <param name="inDelimiter">Terminating character sequence, escaped. Default value: \"\\\\r\\\\n\".</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inMode">Delimiter handling mode - include with output, discard or preserve in buffer.</param>
            <param name="outText">Received data as textual string.</param>
            <param name="outBytes">Received octets as integer values.</param>
            <param name="outEof">Indicates whether the operation was interrupted on attempt to get data from beyond the end of stream.</param>
        </member>
        <member name="M:avl.TcpIp_ReadAllBuffer(System.Int32,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.ByteBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Receives data from a connected socket until the other side closes connection.</summary>
            <param name="inSocket">Connected socket ID, will be closed if successfully read.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="outBuffer">Buffer with raw received data, or Nil if the operation was interrupted by timeout.</param>
            <param name="outEof">Indicates whether the operation successfully read data to the end of stream.</param>
        </member>
        <member name="M:avl.TcpIp_ReadAllText(System.Int32,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Receives text from a connected socket until the other side closes connection.</summary>
            <param name="inSocket">Connected socket ID, will be closed if successfully read.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="outText">Received data as textual string, or Nil if the operation was interrupted by timeout.</param>
            <param name="outEof">Indicates whether the operation successfully read data to the end of stream.</param>
        </member>
        <member name="M:avl.TcpIp_ReadBuffer(System.Int32,System.Int32,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Conditional&lt;avl.ByteBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Receives a fixed number of bytes from a connected TCP socket.</summary>
            <param name="inSocket">Connected socket ID.</param>
            <param name="inLength">Number of bytes to receive.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inAcceptEof">When false, throws an IoError on attempt to read data from beyond the end of stream; when true interrupts operation without exception in such a case. Default value: False.</param>
            <param name="outBuffer">Buffer with raw received data, or Nil if the operation was interrupted (by timeout or reading beyond the end of stream).</param>
            <param name="outEof">Indicates whether the operation was interrupted on attempt to get data from beyond the end of stream.</param>
        </member>
        <member name="M:avl.TcpIp_ReadLine(System.Int32,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.DelimiterHandling.Type,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads from a connected TCP socket until receiving a specific sequence.</summary>
            <param name="inSocket">Connected socket ID.</param>
            <param name="inDelimiter">Terminating character sequence, escaped. Default value: \"\\\\r\\\\n\".</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inAcceptEof">When false, throws an IoError on attempt to read data from beyond the end of stream; when true interrupts operation without exception in such a case. Default value: False.</param>
            <param name="inMode">Delimiter handling mode.</param>
            <param name="outText">Received data as textual string, or Nil if the operation was interrupted (by timeout or reading beyond the end of stream).</param>
            <param name="outEof">Indicates whether the operation was interrupted on attempt to get data from beyond the end of stream.</param>
        </member>
        <member name="M:avl.TcpIp_WriteBuffer(System.Int32,avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Outputs a block of raw data through a connected TCP socket.</summary>
            <param name="inSocket">Connected socket ID.</param>
            <param name="inBuffer">Buffer with data to send.</param>
        </member>
        <member name="M:avl.TcpIp_WriteBytes_Deprecated(System.Int32,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Outputs a series of bytes through a connected TCP socket.</summary>
            <param name="inSocket">Connected socket ID.</param>
            <param name="inBytes">Numerical values of bytes (0-255) to send.</param>
        </member>
        <member name="M:avl.TcpIp_WriteText(System.Int32,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Outputs a string through a connected TCP socket.</summary>
            <param name="inSocket">Connected socket ID.</param>
            <param name="inText">Text to send through socket.</param>
            <param name="inSuffix">Additional data to send, like a newline, escaped. Default value: \"\\\\r\\\\n\".</param>
        </member>
        <member name="M:avl.TcpIp_Accept(avl.TcpIpAcceptState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Accepts a connection from a remote client.</summary>
            <param name="inPort">TCP port to listen on. Default value: 12345.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inKeepAliveTime">When specified activates Tcp/Ip keep alive on new socket with given idle time. Default value: atl::NIL.</param>
            <param name="outSocket">Connected socket ID.</param>
        </member>
        <member name="M:avl.TcpIp_Connect(avl.TcpIpConnectState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Connects as a client to a remote TCP server socket.</summary>
            <param name="inHost">The hostname or IP address to connect to. Default value: \"localhost\".</param>
            <param name="inPort">TCP port of host to connect to. Default value: 12345.</param>
            <param name="inTimeout">Timeout in milliseconds, block if not specified. Default value: atl::NIL.</param>
            <param name="inKeepAliveTime">When specified activates Tcp/Ip keep alive on new socket with given idle time. Default value: atl::NIL.</param>
            <param name="outSocket">Connected socket ID.</param>
        </member>
        <member name="M:avl.INI_AddSection(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Add new section</summary>
            <param name="inINI">INI.</param>
            <param name="inSection">Section name.</param>
            <param name="inComment">Optional comment. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.INI_SaveFile(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Save INI into file</summary>
            <param name="inINI">INI.</param>
            <param name="inFile">Path to a file.</param>
        </member>
        <member name="M:avl.INI_GetAllSectionKeys(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Get all key names within a section.</summary>
            <param name="inINI">INI.</param>
            <param name="inSectionName">Section name.</param>
        </member>
        <member name="M:avl.INI_GetAllSections(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets all section names in the INI.</summary>
            <param name="inINI">INI.</param>
        </member>
        <member name="M:avl.INI_LoadFile(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads an INI file.</summary>
            <param name="inFile">Path to the source file.</param>
        </member>
        <member name="M:avl.GenerateFileName(avl.GenerateFileNameState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Generates consecutive file names, e.g. for saving series of images</summary>
            <param name="inDirectory">Input directory. Default value: \".\".</param>
            <param name="inPattern">File name pattern, $ is replaced by date, # is replaced by number. Default value: \"file_$_####.txt\".</param>
            <param name="outFile">Generated file name.</param>
        </member>
        <member name="M:avl.FileChecksum(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns CRC checksum of the input file.</summary>
        </member>
        <member name="M:avl.FindFiles(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.FileSortingOrder.Type,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns files of the input directory.</summary>
            <param name="inStartDirectory">Input directory. Default value: \".\".</param>
            <param name="inMask">Regular expression. Default value: \"*\".</param>
            <param name="inSubdirs">Read subdirectories.</param>
            <param name="inSortingOrder">Sorting order.</param>
            <param name="outFilePaths">File paths.</param>
            <param name="outFileNames">File names.</param>
        </member>
        <member name="M:avl.EnumerateFiles(avl.EnumerateFilesState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.FileSortingOrder.Type,System.Boolean,System.Boolean,System.Boolean,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Enumerates the files present in a disk directory.</summary>
            <param name="inDirectory">Input directory.</param>
            <param name="inExtensions">Allowed extensions separated by semicolon.</param>
            <param name="inSortingOrder">Sorting order.</param>
            <param name="inRepeat">Determines whether to repeat reading directory after reading all files.</param>
            <param name="inProcessSubdirectories">Flag indicating whether to enumerate files from the subdirectories or not.</param>
            <param name="inInvert">Flag indicating whether to enumerate files backwards or not.</param>
            <param name="outFilePath">Output file path.</param>
            <param name="outFileName">Output file name.</param>
        </member>
        <member name="M:avl.FindDirectories(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns subdirectories of the input directory.</summary>
            <param name="inStartDirectory">Default value: \".\".</param>
        </member>
        <member name="M:avl.TestDirectoryEmpty(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks if a given directory is empty.</summary>
        </member>
        <member name="M:avl.TestDirectoryExists(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks if a given directory is present.</summary>
        </member>
        <member name="M:avl.TestFileEmpty(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks if a given file is empty. (size is 0, contains no data)</summary>
        </member>
        <member name="M:avl.TestFileExists(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks if a given file is present.</summary>
        </member>
        <member name="M:avl.RemoveFiles(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes files that match a pattern from a directory</summary>
            <param name="inMask">see FindFiles filter for inMask documentation.</param>
        </member>
        <member name="M:avl.RemoveDirectory(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes a directory (tree) recursively</summary>
        </member>
        <member name="M:avl.CreateDirectories(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a directory tree if it does not exist.</summary>
        </member>
        <member name="M:avl.LoadBytes_Deprecated(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads bytes from a file and returns them as integer values.</summary>
            <param name="outBytes">Numerical values of bytes (0-255) read.</param>
        </member>
        <member name="M:avl.SaveBytes_Deprecated(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.FileAccessMode.Type,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Writes bytes passed as integer values to a file.</summary>
            <param name="inBytes">Numerical values of bytes (0-255) to write.</param>
            <param name="inFileAccessMode">Default value: CreateOrErase.</param>
        </member>
        <member name="M:avl.FileAttributes(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Provides information about file, e.g. size, modification time</summary>
            <param name="inFile">Input file.</param>
            <param name="outSizeInKBytes">File size in kilobytes.</param>
            <param name="outSizeInBytes">File size in bytes.</param>
            <param name="outIsReadOnly">Flag indicating whether the file is read-only.</param>
            <param name="outAccessTime">File access time.</param>
            <param name="outModificationTime">File modification time.</param>
            <param name="outCreationTime">File creation time.</param>
        </member>
        <member name="M:avl.EXIF_LoadFromJpgFile(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads an EXIF informations from the JPG image.</summary>
            <param name="inFile">Path to the JPG file.</param>
            <param name="outDateTime">Date time when image was taken.</param>
            <param name="outDescription">Additional image description.</param>
            <param name="outOrientation">Image orientation.</param>
            <param name="outValues">Values of all EXIF tags.</param>
            <param name="outLabels">Names of all EXIF tags.</param>
        </member>
        <member name="M:avl.ThrowError(avl.ErrorType.Type!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Throws specific error</summary>
        </member>
        <member name="M:avl.LoadBuffer(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads bytes from a file and returns them as a bytes buffer.</summary>
        </member>
        <member name="M:avl.SaveBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.FileAccessMode.Type,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Writes bytes from a byte buffer to a file.</summary>
            <param name="inFileAccessMode">Default value: CreateOrErase.</param>
        </member>
        <member name="M:avl.ReadIntegerArrayFromBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.IntegerBinaryFormat.Type,System.Boolean,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads an array of integer values in specified binary format from a byte buffer.</summary>
            <param name="inBuffer">Source data.</param>
            <param name="inOffset">Read start position. Default value: 0.</param>
            <param name="inArraySize">Number of elements to read into array. Default value: 1.</param>
            <param name="inFormat">Binary serialization format of integer data. Default value: Signed_32Bit_LittleEndian.</param>
            <param name="inCheckRange">Verify if read data can be stored in resulting Integer type. Default value: True.</param>
            <param name="outArray">Array of read values.</param>
            <param name="outOffset">Resulting position behind read data.</param>
        </member>
        <member name="M:avl.WriteIntegerArrayToBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.IntegerBinaryFormat.Type,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an array of integer values into specified binary representation and writes it to a byte buffer.</summary>
            <param name="inBuffer">Initial buffer to be expanded.</param>
            <param name="inOffset">Write destination position. Default value: atl::NIL.</param>
            <param name="inArray">Values array to be written.</param>
            <param name="inFormat">Binary serialization format of integer data. Default value: Signed_32Bit_LittleEndian.</param>
            <param name="outBuffer">Resulting data.</param>
        </member>
        <member name="M:avl.ReadBufferArrayFromBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,atl.Array&lt;avl.ByteBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits chunk of data from byte buffer into array of buffers of equal sizes.</summary>
            <param name="inBuffer">Source data.</param>
            <param name="inOffset">Read start position. Default value: 0.</param>
            <param name="inElementSize">Length in bytes of single array element. Default value: 4.</param>
            <param name="inElementsCount">Amount of array elements to read. Default value: 0.</param>
            <param name="outArray">Buffers array with copied data.</param>
            <param name="outOffset">Resulting position behind read data.</param>
        </member>
        <member name="M:avl.WriteBufferArrayToBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.ByteBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Writes connected content of all source buffer array items into other byte buffer.</summary>
            <param name="inBuffer">Initial buffer to be expanded.</param>
            <param name="inOffset">Write destination position. Default value: 0.</param>
            <param name="inSourceBuffers">Buffers with source data to be copied.</param>
            <param name="outBuffer">Resulting data.</param>
        </member>
        <member name="M:avl.WriteBufferToBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Writes content of a source byte buffer into other byte buffer.</summary>
            <param name="inBuffer">Initial buffer to be expanded.</param>
            <param name="inOffset">Write destination position. Default value: atl::NIL.</param>
            <param name="inSourceBuffer">Buffer containing source data to be copied.</param>
            <param name="inSourceOffset">Copy start position in source data. Default value: 0.</param>
            <param name="inSourceLength">Length of data to be copied in bytes. Default value: atl::NIL.</param>
            <param name="outBuffer">Resulting data.</param>
        </member>
        <member name="M:avl.ReadStringFromBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.StringBinaryFormat.Type,avl.StringEncodingFormat.Type,System.Int32,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads string value in specified binary format from a byte buffer.</summary>
            <param name="inBuffer">Source data.</param>
            <param name="inOffset">Read start position.</param>
            <param name="inFormat">Binary serialization format responsible for handling string length. Default value: VariableLength_NullTerminated.</param>
            <param name="inTextEncoding">Binary character encoding format. Default value: UTF8.</param>
            <param name="inMaxLength">Maximum length of resulting string in code units. Default value: 32000.</param>
            <param name="outValue">Read value.</param>
            <param name="outOffset">Resulting position behind read data.</param>
        </member>
        <member name="M:avl.WriteStringToBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StringBinaryFormat.Type,avl.StringEncodingFormat.Type,System.Int32,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts string value into specified binary representation and writes it to a byte buffer.</summary>
            <param name="inBuffer">Initial buffer to be expanded.</param>
            <param name="inOffset">Write destination position. Default value: atl::NIL.</param>
            <param name="inValue">Value to be written.</param>
            <param name="inFormat">Binary serialization format responsible for handling string length. Default value: VariableLength_NullTerminated.</param>
            <param name="inTextEncoding">Binary character encoding format. Default value: UTF8.</param>
            <param name="inMaxLength">Maximum length of resulting string in code units. Default value: 32000.</param>
            <param name="outBuffer">Resulting data.</param>
        </member>
        <member name="M:avl.ReadDoubleFromBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.RealBinaryFormat.Type,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads double value in specified binary format from a byte buffer.</summary>
            <param name="inBuffer">Source data.</param>
            <param name="inOffset">Read start position. Default value: 0.</param>
            <param name="inFormat">Binary serialization format of floating point data. Default value: DoublePrecision_64Bit_LittleEndian.0f.</param>
            <param name="outValue">Read value.</param>
            <param name="outOffset">Resulting position behind read data.</param>
        </member>
        <member name="M:avl.ReadRealFromBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.RealBinaryFormat.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads real value in specified binary format from a byte buffer.</summary>
            <param name="inBuffer">Source data.</param>
            <param name="inOffset">Read start position. Default value: 0.</param>
            <param name="inFormat">Binary serialization format of floating point data. Default value: SinglePrecision_32Bit_LittleEndian.0f.</param>
            <param name="outValue">Read value.</param>
            <param name="outOffset">Resulting position behind read data.</param>
        </member>
        <member name="M:avl.WriteDoubleToBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Double,avl.RealBinaryFormat.Type,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts double value into specified binary representation and writes it to a byte buffer.</summary>
            <param name="inBuffer">Initial buffer to be expanded.</param>
            <param name="inOffset">Write destination position. Default value: atl::NIL.</param>
            <param name="inValue">Value to be written.</param>
            <param name="inFormat">Binary serialization format of floating point data. Default value: DoublePrecision_64Bit_LittleEndian.0f.</param>
            <param name="outBuffer">Resulting data.</param>
        </member>
        <member name="M:avl.WriteRealToBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Single,avl.RealBinaryFormat.Type,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts real value into specified binary representation and writes it to a byte buffer.</summary>
            <param name="inBuffer">Initial buffer to be expanded.</param>
            <param name="inOffset">Write destination position. Default value: atl::NIL.</param>
            <param name="inValue">Value to be written.</param>
            <param name="inFormat">Binary serialization format of floating point data. Default value: SinglePrecision_32Bit_LittleEndian.0f.</param>
            <param name="outBuffer">Resulting data.</param>
        </member>
        <member name="M:avl.ReadBoolFromBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.IntegerBinaryFormat.Type,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads boolean value in specified binary format from byte buffer.</summary>
            <param name="inBuffer">Source data.</param>
            <param name="inOffset">Read start position. Default value: 0.</param>
            <param name="inFormat">Binary serialization format of integer data. Default value: Signed_32Bit_LittleEndian.</param>
            <param name="outValue">Read value.</param>
            <param name="outOffset">Resulting position behind read data.</param>
        </member>
        <member name="M:avl.WriteBoolToBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Boolean,avl.IntegerBinaryFormat.Type,System.Int32,System.Int32,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts boolean value into specified integer binary representation and writes it to a byte buffer.</summary>
            <param name="inBuffer">Initial buffer to be expanded.</param>
            <param name="inOffset">Write destination position. Default value: atl::NIL.</param>
            <param name="inValue">Value to be written.</param>
            <param name="inFormat">Binary serialization format of integer data. Default value: Signed_32Bit_LittleEndian.</param>
            <param name="inTrueValue">Integer value representing True. Default value: 1.</param>
            <param name="inFalseValue">Integer value representing False. Default value: 0.</param>
            <param name="outBuffer">Resulting data.</param>
        </member>
        <member name="M:avl.ReadIntegerFromBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.IntegerBinaryFormat.Type,System.Boolean,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads integer value in specified binary format from a byte buffer.</summary>
            <param name="inBuffer">Source data.</param>
            <param name="inOffset">Read start position. Default value: 0.</param>
            <param name="inFormat">Binary serialization format of integer data. Default value: Signed_32Bit_LittleEndian.</param>
            <param name="inCheckRange">Verify if read data can be stored in resulting Integer type. Default value: True.</param>
            <param name="outValue">Read value.</param>
            <param name="outOffset">Resulting position behind read data.</param>
        </member>
        <member name="M:avl.WriteIntegerToBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Int32,avl.IntegerBinaryFormat.Type,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts integer value into specified binary representation and writes it to a byte buffer.</summary>
            <param name="inBuffer">Initial buffer to be expanded.</param>
            <param name="inOffset">Write destination position. Default value: atl::NIL.</param>
            <param name="inValue">Value to be written.</param>
            <param name="inFormat">Binary serialization format of integer data. Default value: Signed_32Bit_LittleEndian.</param>
            <param name="outBuffer">Resulting data.</param>
        </member>
        <member name="M:avl.BenchmarkCPU_Deprecated(System.Boolean,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests CPU performance for simple arithmetic operations</summary>
            <param name="inUseMultipleCores">Indicates if all cores of the CPU should be used. Default value: True.</param>
            <param name="outScore">Score is the time of filter execution in milliseconds. Smaller value for faster CPUs.</param>
        </member>
        <member name="M:avl.BenchmarkCPU(System.Boolean,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests CPU performance for simple arithmetic operations</summary>
            <param name="inUseMultipleCores">Indicates if all cores of the CPU should be used. Default value: True.</param>
            <param name="outScore">Score is the time of filter execution in milliseconds. Smaller value for faster CPUs.</param>
        </member>
        <member name="M:avl.TestFirstIteration(avl.TestFirstIterationState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks if a loop is in the first iteration.</summary>
        </member>
        <member name="M:avl.CountConditions(avl.CountConditionInLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Counts number of positive predicates in loop.</summary>
            <param name="inCondition">Inspected condition.</param>
            <param name="inReset">Reset counters and stop counting. Default value: False.</param>
            <param name="outTrueCount">Number of positive inspections.</param>
            <param name="outFalseCount">Number of negative inspections.</param>
        </member>
        <member name="M:avl.EnumerateCombinations(avl.EnumerateCombinationsState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>In each consecutive iteration produces a consecutive combination of integer numbers.</summary>
        </member>
        <member name="M:avl.Loop(System.Boolean)">
            <summary>Generates a loop that ends at the first invocation with False on the input.</summary>
            <param name="inShouldLoop">If 'True' the loop will be continued. Default value: True.</param>
        </member>
        <member name="M:avl.EnumerateIntegerPairs(avl.Enumerate2DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Produces a total number of 'inCount1 * inCount2' of pairs of integer numbers.</summary>
            <param name="inStart1">First element of first range.</param>
            <param name="inCount1">Length of first range. Default value: atl::NIL.</param>
            <param name="inStep1">Difference between consecutive elements of first range.</param>
            <param name="inStart2">First element of second range.</param>
            <param name="inCount2">Length of second range.</param>
            <param name="inStep2">Difference between consecutive elements of second range.</param>
            <param name="outValue1">Elements of first range in 'AAABBBCCC' order.</param>
            <param name="outValue2">Elements of second range in 'ABCABCABC' order.</param>
        </member>
        <member name="M:avl.EnumerateRealPairs(avl.Enumerate2DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Int32&gt;,System.Single,System.Single,System.Int32,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Produces a total number of 'inCount1 * inCount2' of pairs of real numbers.</summary>
            <param name="inStart1">First element of first range.</param>
            <param name="inCount1">Length of first range. Default value: atl::NIL.</param>
            <param name="inStep1">Difference between consecutive elements of first range.</param>
            <param name="inStart2">First element of second range.</param>
            <param name="inCount2">Length of second range.</param>
            <param name="inStep2">Difference between consecutive elements of second range.</param>
            <param name="outValue1">Elements of first range in 'AAABBBCCC' order.</param>
            <param name="outValue2">Elements of second range in 'ABCABCABC' order.</param>
        </member>
        <member name="M:avl.EnumerateIntegers(avl.Enumerate1DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>In each consecutive iteration produces a consecutive number from an arithmetic sequence.</summary>
            <param name="inStart">First value of the generated sequence.</param>
            <param name="inCount">Length of the generated sequence. Default value: atl::NIL.</param>
            <param name="inStep">Value added in each iteration.</param>
        </member>
        <member name="M:avl.EnumerateReals(avl.Enumerate1DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Int32&gt;,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>In each consecutive iteration produces a consecutive number from an arithmetic sequence.</summary>
            <param name="inStart">First value of the generated sequence.</param>
            <param name="inCount">Length of the generated sequence. Default value: atl::NIL.</param>
            <param name="inStep">Value added in each iteration.</param>
        </member>
        <member name="M:avl.DoubleToReal(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a Double to Real</summary>
        </member>
        <member name="M:avl.LongToInteger(System.Int64,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a Long to Integer</summary>
        </member>
        <member name="M:avl.RealToDouble(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a Real to Double</summary>
        </member>
        <member name="M:avl.IntegerToLong(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an Integer to Long</summary>
        </member>
        <member name="M:avl.StringToDirectory(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a string to a directory path.</summary>
        </member>
        <member name="M:avl.DirectoryToString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a directory path to a string.</summary>
        </member>
        <member name="M:avl.StringToFile(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a string to a file path.</summary>
        </member>
        <member name="M:avl.FileToString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a file path to a string.</summary>
        </member>
        <member name="M:avl.RealArrayToIntegerArray(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an array of real numbers to an array of integer numbers.</summary>
        </member>
        <member name="M:avl.IntegerArrayToRealArray(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an array of integer numbers to an array of real numbers.</summary>
        </member>
        <member name="M:avl.BoolToString(System.Boolean,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a boolean value to a string.</summary>
        </member>
        <member name="M:avl.DoubleToString(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a double number to a string.</summary>
        </member>
        <member name="M:avl.RealToString(System.Single,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a real number to a string.</summary>
        </member>
        <member name="M:avl.LongToString(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a long to a string.</summary>
        </member>
        <member name="M:avl.IntegerToString(System.Int32,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an integer to a string.</summary>
        </member>
        <member name="M:avl.RealToInteger(System.Single,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a real number to an integer.</summary>
        </member>
        <member name="M:avl.LongToDouble(System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a long to a double number.</summary>
        </member>
        <member name="M:avl.IntegerToDouble(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an integer to a double number.</summary>
        </member>
        <member name="M:avl.IntegerToReal(System.Int32,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an integer to a real number.</summary>
        </member>
        <member name="M:avl.MillimetresToPixels(System.Single,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a length in millimetres to pixels using the given scale [px / mm].</summary>
            <param name="inScale">px / mm.</param>
        </member>
        <member name="M:avl.PixelsToMillimetres(System.Single,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a length in pixels to millimetres using the given scale [px / mm].</summary>
            <param name="inScale">px / mm.</param>
        </member>
        <member name="M:avl.DegreesToRadians(System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts degrees to radians.</summary>
        </member>
        <member name="M:avl.RadiansToDegrees(System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts radians to degrees.</summary>
        </member>
        <member name="M:avs.AvsFilter_ConcatenateStrings_OfLoop(avs.AvsFilter_ConcatenateStrings_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Joins strings appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avs.AvsFilter_ConcatenateStrings(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsIm">
            <summary>Joins two or more strings into a single one.</summary>
            <param name="inString1">Default value: "".</param>
            <param name="inString2">Default value: "".</param>
            <param name="inString3">Default value: "".</param>
            <param name="inString4">Default value: "".</param>
            <param name="inString5">Default value: "".</param>
            <param name="inString6">Default value: "".</param>
            <param name="inString7">Default value: "".</param>
            <param name="inString8">Default value: "".</param>
        </member>
        <member name="M:avs.AvsFilter_SortStrings(atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
            <summary>Sort an array of strings</summary>
            <param name="inNaturalSort">Default value: False.</param>
        </member>
        <member name="M:avl.SkipEmptyString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input string has at least one character, it is copied to the output; otherwise NIL is returned.</summary>
        </member>
        <member name="M:avl.LoadTextLines(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads text lines from a file.</summary>
            <param name="inLineDelimiter">End of line character sequence, escaped. Default value: \"\\\\r\\\\n\".</param>
        </member>
        <member name="M:avl.SaveTextLines(atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.FileAccessMode.Type,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Saves text lines to a file.</summary>
            <param name="inLineDelimiter">End of line character sequence, escaped. Default value: \"\\\\r\\\\n\".</param>
        </member>
        <member name="M:avl.LoadText(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads a text from a file.</summary>
        </member>
        <member name="M:avl.SaveText(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.FileAccessMode.Type,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Saves a text to a file.</summary>
        </member>
        <member name="M:avl.NumericCodesToString(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an integer array of character codes (UTF-16) into a string.</summary>
            <param name="inCodes">Input array.</param>
            <param name="outString">Output string.</param>
        </member>
        <member name="M:avl.StringToNumericCodes(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts string to an integer array of character codes (UTF-16).</summary>
            <param name="inString">Input string.</param>
        </member>
        <member name="M:avl.TestStringEmpty(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether the length of a string equals zero.</summary>
            <param name="inString">Input string.</param>
        </member>
        <member name="M:avl.StringToLowerCase(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Makes a string lowercase.</summary>
            <param name="inString">Input string.</param>
            <param name="outString">Converted string.</param>
        </member>
        <member name="M:avl.StringToUpperCase(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Makes a string uppercase.</summary>
            <param name="inString">Input string.</param>
            <param name="outString">Converted string.</param>
        </member>
        <member name="M:avl.FormatDoubleToString(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a string from a double number using a proper format.</summary>
            <param name="inDouble">Input real.</param>
            <param name="inIntegerDigitCount">How many characters the integer part of the input real should have at least.</param>
            <param name="inFractionalDigitCount">How many characters the fractional part of the input real should have. Default value: 3.</param>
            <param name="inDecimalMark">The symbol used to separate the integer part from the fractional part of the number. Default value: \".\".</param>
            <param name="inTrailingCharacter">Defines the trailing character. Default value: \"0\".</param>
            <param name="inForceSignPrinting">Forces printing the sign of the number even if the number is positive. Default value: False.</param>
            <param name="inSuffix">Defines a suffix. Generally it is an unit of value (eg. mm). Default value: \"\".</param>
            <param name="outString">Output string.</param>
        </member>
        <member name="M:avl.FormatRealToString(System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a string from a real number using a proper format.</summary>
            <param name="inReal">Input real.</param>
            <param name="inIntegerDigitCount">How many characters the integer part of the input real should have at least.</param>
            <param name="inFractionalDigitCount">How many characters the fractional part of the input real should have. Default value: 3.</param>
            <param name="inDecimalMark">The symbol used to separate the integer part from the fractional part of the number. Default value: \".\".</param>
            <param name="inTrailingCharacter">Defines the trailing character. Default value: \"0\".</param>
            <param name="inForceSignPrinting">Forces printing the sign of the number even if the number is positive. Default value: False.</param>
            <param name="inSuffix">Defines a suffix. Generally it is an unit of value (eg. mm). Default value: \"\".</param>
            <param name="outString">Output string.</param>
        </member>
        <member name="M:avl.FormatIntegerToString(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a string from an integer number using a proper format.</summary>
            <param name="inInteger">Input integer.</param>
            <param name="inDigitCount">How many characters the output string should have at least.</param>
            <param name="inTrailingCharacter">Defines the trailing character. Default value: \"0\".</param>
            <param name="inForceSignPrinting">Forces printing the sign of the number even if the number is positive. Default value: False.</param>
            <param name="inSuffix">Defines a suffix. Generally it is an unit of value (eg. mm). Default value: \"\".</param>
            <param name="inSystemBase">The base of the numeral system. Default value: 10.</param>
            <param name="outString">Output string.</param>
        </member>
        <member name="M:avl.FormatString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a string according to the given format and data.</summary>
            <param name="inFormat">Format string.</param>
            <param name="inData">Values used in format.</param>
            <param name="outFormattedString">Output formatted string.</param>
        </member>
        <member name="M:avl.FindLastInString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds last occurrence of a substring in the input string.</summary>
            <param name="inString">Input string.</param>
            <param name="inFind">Searched string.</param>
            <param name="inEndPosition">Maximum index of a searched substring in string. Default value: atl::NIL.</param>
            <param name="inIgnoreCase">Default value: False.</param>
            <param name="outPosition">Position of searched string.</param>
        </member>
        <member name="M:avl.FindInString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds first occurrence of a substring in the input string.</summary>
            <param name="inString">Input string.</param>
            <param name="inFind">Searched string.</param>
            <param name="inStartPosition">Minimum index of a searched substring in string. Default value: atl::NIL.</param>
            <param name="inIgnoreCase">Default value: False.</param>
            <param name="outPosition">Position of searched string, -1 if not found.</param>
        </member>
        <member name="M:avl.SplitStringIntoCharacters(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits the input string into individual characters.</summary>
            <param name="inString">Input string.</param>
            <param name="outStrings">Array of characters.</param>
        </member>
        <member name="M:avl.SplitString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Divides the input string into an array of strings using the specified delimiters.</summary>
            <param name="inString">Input string.</param>
            <param name="inSplitters">Array of delimiters.</param>
            <param name="inRemoveEmptyEntries">Removes or leaves zero length strings. Default value: False.</param>
            <param name="outStrings">Array of a split elements.</param>
        </member>
        <member name="M:avl.ReplaceInString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces all occurrences of the searched string with a replacement string.</summary>
            <param name="inString">Input string.</param>
            <param name="inFind">Searched string.</param>
            <param name="inReplacement">Replacement string.</param>
            <param name="outString">Output string.</param>
        </member>
        <member name="M:avl.TestStringUnequalTo(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two strings character by character.</summary>
        </member>
        <member name="M:avl.TestStringEqualTo(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two strings character by character.</summary>
        </member>
        <member name="M:avl.TestStringEarlierThan(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether the input string is earlier alphabetically than a reference string.</summary>
        </member>
        <member name="M:avl.ConcatenateStrings_OfArray(atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Joins multiple strings into a single one.</summary>
            <param name="inPadString">String inserted between concatenated elements.</param>
            <param name="inPadAtBegin">Determines if inPadString will be inserted also before first element.</param>
            <param name="inPadAtEnd">Determines if inPadString will be inserted also after last element.</param>
        </member>
        <member name="M:avl.InsertToString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Inserts a string into another one at the given position.</summary>
        </member>
        <member name="M:avl.EraseString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes a part of a string.</summary>
            <param name="inString">Input string.</param>
            <param name="inPosition">Index of first character to erase.</param>
            <param name="inLength">Length of erased substring.</param>
            <param name="outString">Output string.</param>
        </member>
        <member name="M:avl.Substring(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a string from a fragment of the input string.</summary>
        </member>
        <member name="M:avl.StringLength(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the number of characters in a string.</summary>
        </member>
        <member name="M:avl.PearsonCorrelation(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes Pearson product-moment correlation coefficient. The array must be not empty.</summary>
            <param name="inValues1">Array of values of the first variable.</param>
            <param name="inValues2">Array of values of the second variable.</param>
            <param name="outCorrelation">Computed correlation coefficient between two variables.</param>
        </member>
        <member name="M:avl.NthValue(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes n-th smallest value in an array (0-indexed). The array must be not empty.</summary>
        </member>
        <member name="M:avl.Quantile(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the specified quantile of an array of real numbers. The array must be not empty.</summary>
            <param name="inQuantilePoint">Default value: 0.5f.</param>
        </member>
        <member name="M:avl.StandardDeviation(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the standard deviation of an array of real numbers. The array must be not empty.</summary>
        </member>
        <member name="M:avl.Variance(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the variance of an array of real numbers. The array must be not empty.</summary>
        </member>
        <member name="M:avl.Average(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average of an array of real numbers. The array must be not empty.</summary>
        </member>
        <member name="M:avl.Median(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the median of an array of real numbers. The array must be not empty. Optional weights, when supplied, must be positive.</summary>
        </member>
        <member name="M:avl.AccessLinearFunction(avl.LinearFunction!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns coefficients of a linear function.</summary>
        </member>
        <member name="M:avl.MakeLinearFunction(System.Single,System.Single,avl.LinearFunction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a linear function with given coefficients.</summary>
            <param name="inA">Default value: 1.0f.</param>
        </member>
        <member name="M:avs.AvsFilter_MultiplyDoubles_OfLoop(avs.AvsFilter_MultiplyDoubles_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of numbers appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avs.AvsFilter_MultiplyDoubles_OfArray(atl.Array&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of numbers of an array.</summary>
        </member>
        <member name="M:avs.AvsFilter_MultiplyDoubles(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of double numbers.</summary>
            <param name="inA">Default value: 0.0D.</param>
            <param name="inB">Default value: 1.0D.</param>
            <param name="inC">Default value: 1.0D.</param>
            <param name="inD">Default value: 1.0D.</param>
            <param name="inE">Default value: 1.0D.</param>
            <param name="inF">Default value: 1.0D.</param>
            <param name="inG">Default value: 1.0D.</param>
            <param name="inH">Default value: 1.0D.</param>
        </member>
        <member name="M:avs.AvsFilter_RescaleReal(System.Single,System.Single,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies linear transformation to real number.</summary>
            <param name="inA">Value multiplied. Default value: 1.0f.</param>
            <param name="inB">Value added. Default value: 0.0f.</param>
        </member>
        <member name="M:avs.AvsFilter_MultiplyReals_OfLoop(avs.AvsFilter_MultiplyReals_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of numbers appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avs.AvsFilter_MultiplyReals_OfArray(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of numbers of an array.</summary>
        </member>
        <member name="M:avs.AvsFilter_MultiplyReals(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of real numbers.</summary>
            <param name="inA">Default value: 0.0f.</param>
            <param name="inB">Default value: 1.0f.</param>
            <param name="inC">Default value: 1.0f.</param>
            <param name="inD">Default value: 1.0f.</param>
            <param name="inE">Default value: 1.0f.</param>
            <param name="inF">Default value: 1.0f.</param>
            <param name="inG">Default value: 1.0f.</param>
            <param name="inH">Default value: 1.0f.</param>
        </member>
        <member name="M:avs.AvsFilter_AddDoubles_OfLoop(avs.AvsFilter_AddDoubles_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of numbers appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avs.AvsFilter_AddDoubles_OfArray(atl.Array&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of numbers of an array.</summary>
        </member>
        <member name="M:avs.AvsFilter_AddDoubles(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.Compiler">
            <summary>Computes the sum of two or more doubles.</summary>
            <param name="inA">Default value: 0.0D.</param>
            <param name="inB">Default value: 0.0D.</param>
            <param name="inC">Default value: 0.0D.</param>
            <param name="inD">Default value: 0.0D.</param>
            <param name="inE">Default value: 0.0D.</param>
            <param name="inF">Default value: 0.0D.</param>
            <param name="inG">Default value: 0.0D.</param>
            <param name="inH">Default value: 0.0D.</param>
        </member>
        <member name="M:avs.AvsFilter_AddReals_OfLoop(avs.AvsFilter_AddReals_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of numbers appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avs.AvsFilter_AddReals_OfArray(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of numbers of an array.</summary>
        </member>
        <member name="M:avs.AvsFilter_AddReals(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of two numbers.</summary>
            <param name="inA">Default value: 0.0f.</param>
            <param name="inB">Default value: 0.0f.</param>
            <param name="inC">Default value: 0.0f.</param>
            <param name="inD">Default value: 0.0f.</param>
            <param name="inE">Default value: 0.0f.</param>
            <param name="inF">Default value: 0.0f.</param>
            <param name="inG">Default value: 0.0f.</param>
            <param name="inH">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.TestDoubleInRange(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether a double value is in the specified range.</summary>
        </member>
        <member name="M:avl.TestRealInRange(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether a real value is in the specified range.</summary>
        </member>
        <member name="M:avl.TestDoubleUnequalTo(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether two doubles are unequal.</summary>
            <param name="inEpsilon">Maximum difference of values that are still considered equal.</param>
        </member>
        <member name="M:avl.TestRealUnequalTo(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether two reals are unequal.</summary>
            <param name="inEpsilon">Maximum difference of values that are still considered equal.</param>
        </member>
        <member name="M:avl.TestDoubleEqualTo(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether two doubles are equal.</summary>
            <param name="inEpsilon">Maximum difference of values that are still considered equal. Default value: 0.001D.</param>
        </member>
        <member name="M:avl.TestRealEqualTo(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether two reals are equal.</summary>
            <param name="inEpsilon">Maximum difference of values that are still considered equal. Default value: 0.001f.</param>
        </member>
        <member name="M:avl.TestDoubleGreaterOrEqual(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two doubles with the &gt;= operator.</summary>
        </member>
        <member name="M:avl.TestRealGreaterOrEqual(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two reals with the &gt;= operator.</summary>
        </member>
        <member name="M:avl.TestDoubleGreaterThan(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two doubles with the &gt; operator.</summary>
        </member>
        <member name="M:avl.TestRealGreaterThan(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two reals with the &gt; operator.</summary>
        </member>
        <member name="M:avl.CreateRealSequence(System.Single,System.Int32,System.Single,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an arithmetic sequence of real numbers.</summary>
            <param name="inStart">Default value: 0.0f.</param>
            <param name="inCount">Default value: 10.</param>
            <param name="inStep">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.ParseDouble(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the double number represented by a string.</summary>
        </member>
        <member name="M:avl.ParseReal(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the real number represented by a string.</summary>
        </member>
        <member name="M:avl.MinimumDouble_OfLoop(avl.MinimumDouble_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the smallest of numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
        </member>
        <member name="M:avl.MinimumReal_OfLoop(avl.MinimumReal_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the smallest of numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
        </member>
        <member name="M:avl.MaximumDouble_OfLoop(avl.MaximumDouble_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the greatest of numbers appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avl.MaximumReal_OfLoop(avl.MaximumReal_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the greatest of numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
        </member>
        <member name="M:avl.MinimumReal_OfArray_OrNil(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the smallest value in an array of real numbers; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.MinimumReal_OfArray(atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the smallest value in an array of real numbers.</summary>
        </member>
        <member name="M:avl.MaximumReal_OfArray_OrNil(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the greatest value in an array of real numbers; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.MaximumReal_OfArray(atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the greatest value in an array of real numbers.</summary>
        </member>
        <member name="M:avl.LerpReals(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two reals.</summary>
            <param name="inLambda">Interpolation between the input reals where 0.0 value is equal to inReal0 and 1.0 to inReal1. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.AverageDoubles_OfLoop(avl.AverageDoubles_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average of numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
        </member>
        <member name="M:avl.AverageReals_OfLoop(avl.AverageReals_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average of numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
        </member>
        <member name="M:avl.AverageDoubles_OfArray_OrNil(atl.Array&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average value of doubles; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.AverageDoubles_OfArray(atl.Array&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average value of doubles.</summary>
        </member>
        <member name="M:avl.AverageReals_OfArray_OrNil(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average value of reals; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.AverageReals_OfArray(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average value of reals.</summary>
        </member>
        <member name="M:avl.AverageDoubles(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average of two doubles.</summary>
            <param name="inA">Default value: 0.0D.</param>
            <param name="inB">Default value: 0.0D.</param>
        </member>
        <member name="M:avl.AverageReals(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average of two numbers.</summary>
            <param name="inA">Default value: 0.0f.</param>
            <param name="inB">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.MinimumReal(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the lower of two numbers.</summary>
            <param name="inA">Default value: 0.0f.</param>
            <param name="inB">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.MaximumReal(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the higher of two numbers.</summary>
            <param name="inA">Default value: 0.0f.</param>
            <param name="inB">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.SubtractDoubles(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the difference of two doubles.</summary>
            <param name="inA">Default value: 0.0D.</param>
            <param name="inB">Default value: 0.0D.</param>
        </member>
        <member name="M:avl.SubtractReals(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the difference of two numbers.</summary>
            <param name="inA">Default value: 0.0f.</param>
            <param name="inB">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.DivideDoubles(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the quotient of two numbers.</summary>
            <param name="inA">Default value: 0.0D.</param>
            <param name="inB">Default value: 1.0D.</param>
        </member>
        <member name="M:avl.DivideReals(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the quotient of two numbers.</summary>
            <param name="inA">Default value: 0.0f.</param>
            <param name="inB">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.DoubleDifference(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the absolute value of two doubles difference.</summary>
            <param name="inA">Default value: 0.0D.</param>
            <param name="inB">Default value: 0.0D.</param>
        </member>
        <member name="M:avl.RealDifference(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the absolute value of two numbers difference.</summary>
            <param name="inA">Default value: 0.0f.</param>
            <param name="inB">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.NegateReal(System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the negation of a number.</summary>
        </member>
        <member name="M:avl.AbsoluteReal(System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the absolute value of a number.</summary>
        </member>
        <member name="M:avl.CreateRandomArray(System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates array with random values.</summary>
            <param name="inLength">Length of output array. Default value: 10.</param>
            <param name="inMinValue">Minimal generated value.</param>
            <param name="inMaxValue">Maximal generated value. Default value: 10.0f.</param>
            <param name="inStep">Minimal difference between two generated values. Default value: 1.0f.</param>
            <param name="inSeed">Random seed used to generate values. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.CreateRandomArray_Deprecated(System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates array with random values.</summary>
            <param name="inLength">Length of output array. Default value: 10.</param>
            <param name="inMinValue">Minimal generated value.</param>
            <param name="inMaxValue">Maximal generated value. Default value: 10.0f.</param>
            <param name="inStep">Minimal difference between two generated values. Default value: 1.0f.</param>
            <param name="inSeed">Random seed used to generate values. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.CreateRandomMatrix(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates matrix with random values in closed interval.</summary>
            <param name="inColumnCount">Columns count of generated matrix. Default value: 10.</param>
            <param name="inRowCount">Rows count of generated matrix. Default value: 10.</param>
            <param name="inMinValue">Minimal generated value.</param>
            <param name="inMaxValue">Maximal generated value. Default value: 10.0f.</param>
            <param name="inStep">Minimal difference between two random values. Default value: 1.0f.</param>
            <param name="inSeed">Random seed used to generate values. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.CreateRandomMatrix_Deprecated(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates matrix with random values in closed interval.</summary>
            <param name="inColumnCount">Columns count of generated matrix. Default value: 10.</param>
            <param name="inRowCount">Rows count of generated matrix. Default value: 10.</param>
            <param name="inMinValue">Minimal generated value.</param>
            <param name="inMaxValue">Maximal generated value. Default value: 10.0f.</param>
            <param name="inStep">Minimal difference between two random values. Default value: 1.0f.</param>
            <param name="inSeed">Random seed used to generate values. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.RandomReal(avl.RandomState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates random real value in given closed interval.</summary>
            <param name="ioState">State of generator.</param>
            <param name="inMinValue">Minimal generated value.</param>
            <param name="inMaxValue">Maximal generated value. Default value: 1.0f.</param>
            <param name="inSeed">Random seed used to generate values. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.RandomReal_Deprecated(avl.RandomSeed_OfState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates random real value in given closed interval.</summary>
            <param name="ioState">State of generator.</param>
            <param name="inMinValue">Minimal generated value.</param>
            <param name="inMaxValue">Maximal generated value. Default value: 1.0f.</param>
            <param name="inSeed">Random seed used to generate values. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.RandomInteger(avl.RandomState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates random integer value in given closed interval.</summary>
            <param name="ioState">State of generator.</param>
            <param name="inMinValue">Minimal generated value.</param>
            <param name="inMaxValue">Maximal generated value. Default value: 10.</param>
            <param name="inSeed">Random seed used to generate values. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.RandomInteger_Deprecated(avl.RandomSeed_OfState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates random integer value in given closed interval.</summary>
            <param name="ioState">State of generator.</param>
            <param name="inMinValue">Minimal generated value.</param>
            <param name="inMaxValue">Maximal generated value. Default value: 10.</param>
            <param name="inSeed">Random seed used to generate values. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.LoadMatrix(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized Matrix object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outMatrix">Deserialized Matrix.</param>
        </member>
        <member name="M:avl.SaveMatrix(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized Matrix object as avdata file.</summary>
            <param name="inMatrix">Matrix to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.SkipEmptyMatrix(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Matrix&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input matrix dimensions are non-zero, then the matrix is copied to the output; otherwise Nil value is returned.</summary>
        </member>
        <member name="M:avl.MultiplyMatrixByReal(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiply all elements of a matrix by a value.</summary>
        </member>
        <member name="M:avl.TransposeMatrix(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the transpose of a matrix.</summary>
        </member>
        <member name="M:avl.InvertMatrix(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the inverse of a square matrix.</summary>
        </member>
        <member name="M:avl.MultiplyMatrices(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combine two matrices horizontally</summary>
        </member>
        <member name="M:avl.SubtractMatrices(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Subtract two matrices of identical dimensions</summary>
        </member>
        <member name="M:avl.AddMatrices(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Add two matrices of identical dimensions</summary>
        </member>
        <member name="M:avl.StackMatrices(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combine two matrices vertically</summary>
        </member>
        <member name="M:avl.CombineMatrices(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combine two matrices horizontally</summary>
        </member>
        <member name="M:avl.ConcatenateMatrices(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combine two matrices horizontally</summary>
        </member>
        <member name="M:avl.GetMatrixColumn(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets the values from a single column of a matrix.</summary>
        </member>
        <member name="M:avl.SetMatrixColumn(avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets elements of a matrix column.</summary>
        </member>
        <member name="M:avl.GetMatrixRow(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets the values from a single row of a matrix.</summary>
        </member>
        <member name="M:avl.SetMatrixRow(avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets elements of a matrix row.</summary>
        </member>
        <member name="M:avl.GetMatrixElement(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets the value of a single element of a matrix.</summary>
        </member>
        <member name="M:avl.SetMatrixElement(avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Single)">
            <summary>Sets a single element of a matrix.</summary>
        </member>
        <member name="M:avl.CreateIdentityMatrix(System.Int32,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Create a square matrix with ones on the main diagonal, and zeros elsewhere.</summary>
        </member>
        <member name="M:avl.CreateUniformMatrix(System.Int32,System.Int32,System.Single,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Create a matrix with the specified dimensions and filled with an uniform element value.</summary>
        </member>
        <member name="M:avl.MatrixToRealArrayArray(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a matrix to an array of its rows.</summary>
        </member>
        <member name="M:avl.AccessMatrix(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Return matrix dimensions and its elements row-by-row as a real array.</summary>
        </member>
        <member name="M:avl.MakeMatrix(System.Int32,System.Int32,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Create a matrix of specified dimensions with initial elements given row-by-row.</summary>
        </member>
        <member name="M:avl.Signum(System.Single!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sign of a number.</summary>
        </member>
        <member name="M:avl.Round(System.Single!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes rounded value of a number.</summary>
        </member>
        <member name="M:avl.Ceil(System.Single!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the ceil of a number.</summary>
        </member>
        <member name="M:avl.Floor(System.Single!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the floor of a number.</summary>
        </member>
        <member name="M:avl.Logarithm(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the logarithm of a number in a given base.</summary>
            <param name="inBase">Default value: 2.0f.</param>
            <param name="inValue">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.SquareRoot(System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the square root of a number.</summary>
            <param name="inA">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.Power(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the power of a number.</summary>
            <param name="inBase">Default value: 1.0f.</param>
            <param name="inExponent">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.Cotangent(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the cotangent of an angle.</summary>
        </member>
        <member name="M:avl.Tangent(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the tangent of an angle.</summary>
        </member>
        <member name="M:avl.Cosine(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the cosine of an angle.</summary>
        </member>
        <member name="M:avl.Sine(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sine of an angle.</summary>
        </member>
        <member name="M:avs.AvsFilter_Xor_OfLoop(avs.AvsFilter_Xor_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) the number of True values appearing in consecutive iterations is odd.</summary>
        </member>
        <member name="M:avs.AvsFilter_Xor_OfArray(atl.Array&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) the number of True values in the input array is odd.</summary>
        </member>
        <member name="M:avs.AvsFilter_Xor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) the number of True input values is odd.</summary>
            <param name="inValue1">Default value: False.</param>
            <param name="inValue2">Default value: False.</param>
            <param name="inValue3">Default value: False.</param>
            <param name="inValue4">Default value: False.</param>
            <param name="inValue5">Default value: False.</param>
            <param name="inValue6">Default value: False.</param>
            <param name="inValue7">Default value: False.</param>
            <param name="inValue8">Default value: False.</param>
        </member>
        <member name="M:avs.AvsFilter_Or_OfLoop(avs.AvsFilter_Or_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) at least one value appearing in consecutive iterations is True.</summary>
        </member>
        <member name="M:avs.AvsFilter_MergeOr_OfArray(atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) at least one value in the input array is True. Accepts conditional values.</summary>
            <param name="inDefault">Default value: False.</param>
        </member>
        <member name="M:avs.AvsFilter_Or_OfArray(atl.Array&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) at least one value in the input array is True.</summary>
        </member>
        <member name="M:avs.AvsFilter_MergeOr(atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) any of the arguments is True. Accepts conditional values.</summary>
            <param name="inValue1">Default value: False.</param>
            <param name="inValue2">Default value: False.</param>
            <param name="inValue3">Default value: False.</param>
            <param name="inValue4">Default value: False.</param>
            <param name="inValue5">Default value: False.</param>
            <param name="inValue6">Default value: False.</param>
            <param name="inValue7">Default value: False.</param>
            <param name="inValue8">Default value: False.</param>
            <param name="inDefault">Default value: False.</param>
        </member>
        <member name="M:avs.AvsFilter_Or(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) any of the arguments is True.</summary>
            <param name="inValue1">Default value: False.</param>
            <param name="inValue2">Default value: False.</param>
            <param name="inValue3">Default value: False.</param>
            <param name="inValue4">Default value: False.</param>
            <param name="inValue5">Default value: False.</param>
            <param name="inValue6">Default value: False.</param>
            <param name="inValue7">Default value: False.</param>
            <param name="inValue8">Default value: False.</param>
        </member>
        <member name="M:avs.AvsFilter_And_OfLoop(avs.AvsFilter_And_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) all values appearing in consecutive iterations are True.</summary>
        </member>
        <member name="M:avs.AvsFilter_MergeAnd_OfArray(atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) all values in the input array True. Accepts conditional values.</summary>
            <param name="inDefault">Default value: False.</param>
        </member>
        <member name="M:avs.AvsFilter_And_OfArray(atl.Array&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) all values in the input array True.</summary>
        </member>
        <member name="M:avs.AvsFilter_MergeAnd(atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,atl.Conditional&lt;System.Boolean&gt;,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) all arguments are True. Accepts conditional values.</summary>
            <param name="inValue1">Default value: True.</param>
            <param name="inValue2">Default value: True.</param>
            <param name="inValue3">Default value: True.</param>
            <param name="inValue4">Default value: True.</param>
            <param name="inValue5">Default value: True.</param>
            <param name="inValue6">Default value: True.</param>
            <param name="inValue7">Default value: True.</param>
            <param name="inValue8">Default value: True.</param>
            <param name="inDefault">Default value: False.</param>
        </member>
        <member name="M:avs.AvsFilter_And(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) all arguments are True.</summary>
            <param name="inValue1">Default value: True.</param>
            <param name="inValue2">Default value: True.</param>
            <param name="inValue3">Default value: True.</param>
            <param name="inValue4">Default value: True.</param>
            <param name="inValue5">Default value: True.</param>
            <param name="inValue6">Default value: True.</param>
            <param name="inValue7">Default value: True.</param>
            <param name="inValue8">Default value: True.</param>
        </member>
        <member name="M:avl.Iff(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) the input arguments are both True or both False.</summary>
        </member>
        <member name="M:avl.Not(System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) the input argument is False.</summary>
        </member>
        <member name="M:avl.NotAnd(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) at least one of the arguments is False.</summary>
        </member>
        <member name="M:avl.NotOr(System.Boolean,System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns True if (and only if) both arguments are False.</summary>
        </member>
        <member name="M:avs.AvsFilter_MultiplyLongIntegers_OfLoop(avs.AvsFilter_MultiplyLongIntegers_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of numbers appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avs.AvsFilter_MultiplyLongIntegers_OfArray(atl.Array&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of long numbers of an array.</summary>
        </member>
        <member name="M:avs.AvsFilter_MultiplyLongIntegers(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of long numbers.</summary>
            <param name="inA">Default value: 1L.</param>
            <param name="inB">Default value: 1L.</param>
            <param name="inC">Default value: 1L.</param>
            <param name="inD">Default value: 1L.</param>
            <param name="inE">Default value: 1L.</param>
            <param name="inF">Default value: 1L.</param>
            <param name="inG">Default value: 1L.</param>
            <param name="inH">Default value: 1L.</param>
        </member>
        <member name="M:avs.AvsFilter_RescaleInteger(System.Int32,System.Single,System.Single,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies linear transformation to integer.</summary>
            <param name="inA">Value multiplied. Default value: 1.0f.</param>
            <param name="inB">Value added. Default value: 0.0f.</param>
        </member>
        <member name="M:avs.AvsFilter_MultiplyIntegers_OfLoop(avs.AvsFilter_MultiplyIntegers_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of numbers appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avs.AvsFilter_MultiplyIntegers_OfArray(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of numbers of an array.</summary>
        </member>
        <member name="M:avs.AvsFilter_MultiplyIntegers(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the product of numbers.</summary>
            <param name="inA">Default value: 1.</param>
            <param name="inB">Default value: 1.</param>
            <param name="inC">Default value: 1.</param>
            <param name="inD">Default value: 1.</param>
            <param name="inE">Default value: 1.</param>
            <param name="inF">Default value: 1.</param>
            <param name="inG">Default value: 1.</param>
            <param name="inH">Default value: 1.</param>
        </member>
        <member name="M:avs.AvsFilter_AddLongIntegers_OfLoop(avs.AvsFilter_AddLongIntegers_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of Long numbers appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avs.AvsFilter_AddLongIntegers_OfArray(atl.Array&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of Long numbers of an array.</summary>
        </member>
        <member name="M:avs.AvsFilter_AddLongIntegers(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of Long numbers.</summary>
            <param name="inA">Default value: 0L.</param>
            <param name="inB">Default value: 0L.</param>
            <param name="inC">Default value: 0L.</param>
            <param name="inD">Default value: 0L.</param>
            <param name="inE">Default value: 0L.</param>
            <param name="inF">Default value: 0L.</param>
            <param name="inG">Default value: 0L.</param>
            <param name="inH">Default value: 0L.</param>
        </member>
        <member name="M:avs.AvsFilter_AddIntegers_OfLoop(avs.AvsFilter_AddIntegers_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of numbers appearing in consecutive iterations.</summary>
        </member>
        <member name="M:avs.AvsFilter_AddIntegers_OfArray(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of numbers of an array.</summary>
        </member>
        <member name="M:avs.AvsFilter_AddIntegers(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of numbers.</summary>
            <param name="inA">Default value: 0.</param>
            <param name="inB">Default value: 0.</param>
            <param name="inC">Default value: 0.</param>
            <param name="inD">Default value: 0.</param>
            <param name="inE">Default value: 0.</param>
            <param name="inF">Default value: 0.</param>
            <param name="inG">Default value: 0.</param>
            <param name="inH">Default value: 0.</param>
        </member>
        <member name="M:avl.TestLongIntegerInRange(System.Int64,atl.Optional&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether Long integers is in the specified range.</summary>
        </member>
        <member name="M:avl.TestIntegerInRange(System.Int32,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether an integers is in the specified range.</summary>
        </member>
        <member name="M:avl.TestLongIntegerUnequalTo(System.Int64,System.Int64,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether two Long integers are unequal.</summary>
        </member>
        <member name="M:avl.TestIntegerUnequalTo(System.Int32,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether two integers are unequal.</summary>
        </member>
        <member name="M:avl.TestLongIntegerEqualTo(System.Int64,System.Int64,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether two Long integers are equal.</summary>
        </member>
        <member name="M:avl.TestIntegerEqualTo(System.Int32,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether two integers are equal.</summary>
        </member>
        <member name="M:avl.TestLongIntegerGreaterOrEqual(System.Int64,System.Int64,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two Long integers with the &gt;= operator.</summary>
        </member>
        <member name="M:avl.TestIntegerGreaterOrEqual(System.Int32,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two integers with the &gt;= operator.</summary>
        </member>
        <member name="M:avl.TestLongIntegerGreaterThan(System.Int64,System.Int64,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two Long integers with the &gt; operator.</summary>
        </member>
        <member name="M:avl.TestIntegerGreaterThan(System.Int32,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two integers with the &gt; operator.</summary>
        </member>
        <member name="M:avl.CreateIntegerSequence(System.Int32,System.Int32,System.Int32,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an arithmetic sequence of integer numbers.</summary>
            <param name="inStart">Default value: 0.</param>
            <param name="inCount">Default value: 10.</param>
            <param name="inStep">Default value: 1.</param>
        </member>
        <member name="M:avl.ParseInteger(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.NumberSystemBase.Type,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the integer number represented by a string.</summary>
        </member>
        <member name="M:avl.MinimumInteger_OfLoop(avl.MinimumInteger_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the smallest of numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
        </member>
        <member name="M:avl.MaximumInteger_OfLoop(avl.MaximumInteger_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the greatest of numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
        </member>
        <member name="M:avl.MinimumInteger_OfArray_OrNil(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the smallest value in an array of integer numbers; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.MinimumInteger_OfArray(atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the smallest value in an array of integer numbers.</summary>
        </member>
        <member name="M:avl.MaximumInteger_OfArray_OrNil(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the greatest value in an array of integer numbers; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.MaximumInteger_OfArray(atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the greatest value in an array of integer numbers.</summary>
        </member>
        <member name="M:avl.LerpIntegers(System.Int32,System.Int32,System.Single,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two integers.</summary>
            <param name="inLambda">Interpolation between the input integers where 0.0 value is equal to inInteger0 and 1.0 to inInteger1. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.AverageLongIntegers_OfLoop(avl.AverageLongIntegers_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average of the Long numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
        </member>
        <member name="M:avl.AverageIntegers_OfLoop(avl.AverageIntegers_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average of the numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
        </member>
        <member name="M:avl.AverageLongIntegers_OfArray_OrNil(atl.Array&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int64&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average value of Long integers; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.AverageLongIntegers_OfArray(atl.Array&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average value of Long integers.</summary>
        </member>
        <member name="M:avl.AverageIntegers_OfArray_OrNil(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average value of integers; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.AverageIntegers_OfArray(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average value of integers.</summary>
        </member>
        <member name="M:avl.AverageLongIntegers(System.Int64,System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average of two Long numbers.</summary>
            <param name="inA">Default value: 0L.</param>
            <param name="inB">Default value: 0L.</param>
        </member>
        <member name="M:avl.AverageIntegers(System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the average of two numbers.</summary>
            <param name="inA">Default value: 0.</param>
            <param name="inB">Default value: 0.</param>
        </member>
        <member name="M:avl.MinimumInteger(System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the lower of two numbers.</summary>
            <param name="inA">Default value: 0.</param>
            <param name="inB">Default value: 0.</param>
        </member>
        <member name="M:avl.MaximumInteger(System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the higher of two numbers.</summary>
            <param name="inA">Default value: 0.</param>
            <param name="inB">Default value: 0.</param>
        </member>
        <member name="M:avl.SubtractLongIntegers(System.Int64,System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the difference of two Long numbers.</summary>
            <param name="inA">Default value: 0L.</param>
            <param name="inB">Default value: 0L.</param>
        </member>
        <member name="M:avl.SubtractIntegers(System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the difference of two numbers.</summary>
            <param name="inA">Default value: 0.</param>
            <param name="inB">Default value: 0.</param>
        </member>
        <member name="M:avl.Modulo(System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes remainder of integer division of two numbers.</summary>
            <param name="inA">Default value: 0.</param>
            <param name="inB">Default value: 1.</param>
        </member>
        <member name="M:avl.DivideLongIntegers(System.Int64,System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the quotient of two numbers.</summary>
            <param name="inA">Default value: 0L.</param>
            <param name="inB">Default value: 1L.</param>
        </member>
        <member name="M:avl.DivideIntegers(System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the quotient of two numbers.</summary>
            <param name="inA">Default value: 0.</param>
            <param name="inB">Default value: 1.</param>
        </member>
        <member name="M:avl.LongDifference(System.Int64,System.Int64,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the absolute value of two Long numbers difference</summary>
            <param name="inA">Default value: 0L.</param>
            <param name="inB">Default value: 0L.</param>
        </member>
        <member name="M:avl.IntegerDifference(System.Int32,System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the absolute value of two numbers difference.</summary>
            <param name="inA">Default value: 0.</param>
            <param name="inB">Default value: 0.</param>
        </member>
        <member name="M:avl.NegateInteger(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the negation of a number.</summary>
        </member>
        <member name="M:avl.AbsoluteInteger(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the absolute value of a number.</summary>
        </member>
        <member name="M:avl.LoadPoint3DGrid(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3DFileFormat.Type,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads entities from a file of one of available types as an array of points in 3D.</summary>
        </member>
        <member name="M:avl.LoadEntities_FromDxf(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;atl.Array&lt;atl.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads entities from a DXF file as an array of point arrays.</summary>
            <param name="inScale">Scale (pixels per millimeter). Default value: 10.0f.</param>
            <param name="inLayersToDraw">Names of layers to draw. Names of all layers are available at the 'diagFileLayersNames' output. Default value: atl::NIL.</param>
            <param name="outOrigin">Location of the origin from DXF on 'outImage'.</param>
            <param name="diagFileLayersNames">Names of all layers in DXF file.</param>
        </member>
        <member name="M:avl.LoadEntities_FromDxf_Deprecated(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;atl.Array&lt;atl.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads data from a DXF file as an array of paths.</summary>
            <param name="inCanvasWidth">Default value: 640.</param>
            <param name="inCanvasHeight">Default value: 480.</param>
            <param name="inLayers">Names of layers to import paths from. Names of all layers are available at the 'diagFileLayersNames' output. Default value: atl::NIL.</param>
            <param name="diagFileLayersNames">Names of all layers in DXF file.</param>
        </member>
        <member name="M:avl.LoadImage_FromDxf(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;avl.Size&gt;!System.Runtime.CompilerServices.IsConst,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads data from a DXF file as an image.</summary>
            <param name="inScale">Scale (pixels per millimeter). Default value: 10.0f.</param>
            <param name="inSize">Size of the output image. Scaled entities from file will be centered on image. Default value: atl::NIL.</param>
            <param name="inLayersToDraw">Names of layers to draw. Names of all layers are available at the 'diagFileLayersNames' output. Default value: atl::NIL.</param>
            <param name="outOrigin">Location of the origin from DXF on 'outImage'.</param>
            <param name="outImage">Output image.</param>
            <param name="diagFileLayersNames">Names of all layers in DXF file.</param>
        </member>
        <member name="M:avl.LoadImage_FromDxf_Deprecated(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads data from a DXF file as an image.</summary>
            <param name="inImageWidth">Default value: 640.</param>
            <param name="inImageHeight">Default value: 480.</param>
            <param name="inLayersToDraw">Names of layers to draw. Names of all layers are available at the 'diagFileLayersNames' output. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
            <param name="diagFileLayersNames">Names of all layers in DXF file.</param>
        </member>
        <member name="M:avl.LoadImage_FromWebsite(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads a JPG image from a website.</summary>
            <param name="inLogin">Login for Basic authorization. Default value: atl::NIL.</param>
            <param name="inPassword">Password for Basic authorization. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SaveJpegImageToBytes_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an image to a byte-value array of its JPG representation.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.LoadJpegImageFromBytes_Deprecated(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads a JPG image from an array of byte values.</summary>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.Ftp_ReceiveImage(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Downloads an image from a remote server using FTP (File Transfer Protocol).</summary>
            <param name="inHostName">URL address of the remote server. Default value: \"ftp://\".</param>
            <param name="inFtpFilePath">Location of the file on a remote server.</param>
            <param name="inUsername">User name needed to log in. Default value: atl::NIL.</param>
            <param name="inPassword">Password associated with a user name. Default value: atl::NIL.</param>
            <param name="inUsePassiveMode">Protocol communication mode. May be necessary when using a firewall.</param>
            <param name="inLoadAlphaChannel">Whether to load the alpha channel (if exists) as an additional image channel.</param>
            <param name="outImage">Image downloaded from the remote server.</param>
        </member>
        <member name="M:avl.Ftp_ReceiveString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Downloads a text string from a remote server using FTP (File Transfer Protocol).</summary>
            <param name="inHostName">URL address of the remote server. Default value: \"ftp://\".</param>
            <param name="inFtpFilePath">Location of the file on a remote server.</param>
            <param name="inUsername">User name needed to log in. Default value: atl::NIL.</param>
            <param name="inPassword">Password associated with a user name. Default value: atl::NIL.</param>
            <param name="inUsePassiveMode">Protocol communication mode. May be necessary when using a firewall.</param>
            <param name="outText">Text read from a remote server.</param>
        </member>
        <member name="M:avl.Ftp_ReceiveFile(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean)">
            <summary>Downloads a file from a remote server using FTP (File Transfer Protocol).</summary>
            <param name="inFilePath">Location of the file on a remote server.</param>
            <param name="inHostName">URL address of the remote server. Default value: \"ftp://\".</param>
            <param name="inFtpFilePath">Location of the file on a remote server.</param>
            <param name="inUsername">User name needed to log in. Default value: atl::NIL.</param>
            <param name="inPassword">Password associated with a user name. Default value: atl::NIL.</param>
            <param name="inUsePassiveMode">Protocol communication mode. May be necessary when using a firewall.</param>
        </member>
        <member name="M:avl.Ftp_SendImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.ImageFileFormat.Type&gt;,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean)">
            <summary>Sends an image to a remote server using the FTP (File Transfer Protocol)</summary>
            <param name="inImage">Image to send.</param>
            <param name="inImageFileFormat">If Nil the format will be chosen on the basis of extension. Default value: atl::NIL.</param>
            <param name="inHostName">URL address of the remote server. Default value: \"ftp://\".</param>
            <param name="inDestinationFileName">Path where an image file should be saved on a remote server.</param>
            <param name="inUsername">User name needed to log in. Default value: atl::NIL.</param>
            <param name="inPassword">Password associated with a user name. Default value: atl::NIL.</param>
            <param name="inUsePassiveMode">Protocol communication mode. May be necessary when using a firewall.</param>
        </member>
        <member name="M:avl.Ftp_SendString(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean)">
            <summary>Sends a string to a remote serve using FTP (File Transfer Protocol).</summary>
            <param name="inText">Text to send.</param>
            <param name="inHostName">URL address of the remote server. Default value: \"ftp://\".</param>
            <param name="inDestinationFileName">Path where a text file should be saved on a remote server.</param>
            <param name="inUsername">User name needed to log in. Default value: atl::NIL.</param>
            <param name="inPassword">Password associated with a user name. Default value: atl::NIL.</param>
            <param name="inUsePassiveMode">Protocol communication mode. May be necessary when using a firewall.</param>
        </member>
        <member name="M:avl.Ftp_SendFile(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean)">
            <summary>Sends a file to a remote server using FTP (File Transfer Protocol).</summary>
            <param name="inFilePath">Path to a file stored on the local drive.</param>
            <param name="inHostName">URL address of the remote server. Default value: \"ftp://\".</param>
            <param name="inDestinationFileName">Path where a file should be saved on a remote server.</param>
            <param name="inUsername">User name needed to log in. Default value: atl::NIL.</param>
            <param name="inPassword">Password associated with a user name. Default value: atl::NIL.</param>
            <param name="inUsePassiveMode">Protocol communication mode. May be necessary when using a firewall.</param>
        </member>
        <member name="M:avs.AvsFilter_EnableGPUProcessing(System.Boolean)">
            <summary>Resumes or suspends GPU OpenCL processing in filters.</summary>
            <param name="inEnable">True to resume, False to suspend GPU processing. Default value: True.</param>
        </member>
        <member name="M:avs.AvsFilter_InitGPUProcessing(avs.InitGPUProcessingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Initializes GPU OpenCL processing.</summary>
            <param name="inPlatformName">Name or fragment of a name of OpenCL provider platform. Default value: atl::NIL.</param>
            <param name="inDeviceName">Name or fragment of a name of OpenCL device. Default value: atl::NIL.</param>
            <param name="diagDeviceInfo">Provides human readable diagnostic information about OpenCL device selected for processing.</param>
        </member>
        <member name="M:avl.InitLibrary">
            <summary>Initializes library internals. Should be called before any other function from AVL.</summary>
        </member>
        <member name="M:avl.ThrowOnProgramStop">
            <summary />
        </member>
        <member name="M:avl.GetLibraryVersion(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets current library version</summary>
        </member>
        <member name="M:avl.GetDongleSerialNumber(atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets current dongle serial number</summary>
        </member>
        <member name="M:avl.GetComputerID(atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets current Computer ID</summary>
        </member>
        <member name="M:avl.DischargeImageMemoryPools">
            <summary>Releases preallocated image memory buffers.</summary>
        </member>
        <member name="M:avl.ChargeImageMemoryPools(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Preallocates memory buffers for images.</summary>
            <param name="inRequestedPoolSizes">Copy a value from InspectImageMemoryPools.outPoolSizes.</param>
            <param name="inTouch">Forces getting the new memory pools to the cache memory.</param>
        </member>
        <member name="M:avl.InspectImageMemoryPools(System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns information about allocated image memory buffers. This information can be used for preallocation.</summary>
            <param name="outIsEnabled">Specifies whether memory pools are used or not.</param>
            <param name="outPoolSizes">Count of blocks in consecutive pools.</param>
            <param name="outBlockLengths">Length of blocks in consecutive pools.</param>
            <param name="outTotalUsage">Total image memory allocated [B].</param>
        </member>
        <member name="M:avl.ControlImageMemoryPools(System.Boolean)">
            <summary>Enables or disables deterministic image memory allocator.</summary>
            <param name="inIsEnabled">Specifies whether memory pools should be used or not. Default value: True.</param>
        </member>
        <member name="M:avl.ControlParallelComputing(System.Boolean,atl.Optional&lt;System.Int32&gt;,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Enables or disables filters multithreading parallelization.</summary>
            <param name="inIsEnabled">When 'true' parallel computing is used. Default value: True.</param>
            <param name="inThreadCount">Requested number of threads. Default value: atl::NIL.</param>
            <param name="outThreadCount">Actually available number of threads.</param>
        </member>
        <member name="M:avl.ControlSSE(System.Boolean,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Enables or disables SSE cpu extension usage by other filters.</summary>
            <param name="inIsEnabled">When 'true' SSE instructions are used. Default value: True.</param>
        </member>
        <member name="M:avl.CloseSurfacePoints(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reconstructs missing points of the input surface by interpolating neighboring points.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape (predefined).</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outSurface">Output surface.</param>
        </member>
        <member name="M:avl.DilateSurfacePoints(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reconstructs missing points of the input surface by interpolating neighboring points.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape (predefined).</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outSurface">Output surface.</param>
        </member>
        <member name="M:avl.OpenSurfacePoints(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Boolean,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes some existing points from the input surface when some points in their vicinity are missing.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape (predefined).</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="inPreserveDimensions">Flag indicating whether the surface dimensions should be preserved or not.</param>
            <param name="outSurface">Output surface.</param>
        </member>
        <member name="M:avl.ErodeSurfacePoints(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Boolean,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes some existing points from the input surface when some points in their vicinity are missing.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape (predefined).</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="inPreserveDimensions">Flag indicating whether the surface dimensions should be preserved or not.</param>
            <param name="outSurface">Output surface.</param>
        </member>
        <member name="M:avl.FlattenSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Axis.Type!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Flattens a curved surface.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inCurvatureAxis">Axis along which the input surface is curved.</param>
            <param name="inStdDev">Standard deviation for smoothing of the surface.</param>
            <param name="outSurface">Output surface.</param>
            <param name="diagSmoothedSurface">Surface smoothed with a Gaussian kernel.</param>
        </member>
        <member name="M:avl.AbsoluteSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms Z coordinate of each surface point to its absolute value.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="outSurface">Output surface.</param>
        </member>
        <member name="M:avl.ReduceSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reduces surface dimensions as much as possible.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="outSurface">Reduced surface.</param>
        </member>
        <member name="M:avl.JoinSurfaces(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combines two surfaces into one.</summary>
            <param name="inSurface1">First input surface to join.</param>
            <param name="inSurface2">Second input surface to join.</param>
            <param name="outSurface">Combination of two input surfaces.</param>
        </member>
        <member name="M:avl.ProjectSurfaceOntoPlane(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Projects a surface on another plane, replacing Z coordinate of a point with its distance from a given plane.</summary>
        </member>
        <member name="M:avl.CropSurfaceByPlaneProximity(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Boolean,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Removes from the surface points that are too distant from a given plane.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inPlane">Plane to which distance is measured.</param>
            <param name="inMinDistance">Minimal distance from a given plane. Default value: atl::NIL.</param>
            <param name="inMaxDistance">Maximal distance from a given plane. Default value: 1.0f.</param>
            <param name="inPreserveDimensions">Flag indicating whether the surface dimensions should be preserved or not. Default value: False.</param>
            <param name="outSurface">Output surface.</param>
            <param name="outRejected">Region of locations where points are too distant from the input plane.</param>
        </member>
        <member name="M:avl.CropSurfaceToBox3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Removes from the surface points that are not contained in a given box in 3D.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inBox3D">Box defining a subspace to be cropped.</param>
            <param name="inPreserveDimensions">Flag indicating whether the surface dimensions should be preserved or not. Default value: False.</param>
            <param name="outSurface">Output surface.</param>
            <param name="outRejected">Region of locations where points are not contained in a given box in 3D.</param>
        </member>
        <member name="M:avl.CropSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,System.Boolean,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Removes from the surface points that are not contained in a given rectangular box.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inPreserveDimensions">Flag indicating whether the surface dimensions should be preserved or not. Default value: False.</param>
            <param name="outSurface">Output surface.</param>
            <param name="outRejected">Region of locations where points are not contained in a given rectangular box.</param>
        </member>
        <member name="M:avl.CropSurfaceToRegion(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes points that are not present in a given region.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRegion">Region from which the points are not removed.</param>
            <param name="inPreserveDimensions">Flag indicating whether the surface dimensions should be preserved or not. Default value: False.</param>
            <param name="outSurface">Output surface.</param>
        </member>
        <member name="M:avl.CropSurfaceByNeighborsProximity(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.Metric3D.Type,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Removes from the surface points that are too distant from their neighbor points.</summary>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inNeighborRadius">Radius of neighbors to search for real neighbors. Default value: 1.</param>
            <param name="inMaxDistance">Maximal distance from another point to consider them real neighbors. Default value: 2.0f.</param>
            <param name="inMetric">Metric used for measuring distance between points. Default value: Z.</param>
            <param name="inMinNeighborRatio">Fraction of valid neighbors in a given radius that have to be real neighbors. Default value: 1.0f.</param>
            <param name="inPreserveDimensions">Flag indicating whether the surface dimensions should be preserved or not. Default value: False.</param>
            <param name="outRejected">Region of locations where points are too distant from their neighbors.</param>
        </member>
        <member name="M:avl.RescaleSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Boolean,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the distances of surface points to a reference point.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inReferencePoint">Point to which the distances will be changed.</param>
            <param name="inScaleX">Scaling factor along X axis. Default value: 1.0f.</param>
            <param name="inScaleY">Scaling factor along Y axis. Default value: atl::NIL.</param>
            <param name="inScaleZ">Scaling factor along Z axis. Default value: atl::NIL.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outSurface">Rescaled surface.</param>
        </member>
        <member name="M:avl.TranslateSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a surface by a vector.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outSurface">Translated surface.</param>
        </member>
        <member name="M:avl.SmoothSurface_Gauss(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,atl.Optional&lt;System.Single&gt;,System.Single!System.Runtime.CompilerServices.IsConst,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths a surface using a gaussian kernel.</summary>
            <param name="inRoi">Range of output points to be computed. Default value: atl::NIL.</param>
            <param name="inStdDevX">Horizontal smoothing standard deviation. Default value: 1.0f.</param>
            <param name="inStdDevY">Vertical smoothing standard deviation. Default value: atl::NIL.</param>
            <param name="inKernelRelativeSize">A multiple of the standard deviation determining the size of the kernel. Default value: 2.0f.</param>
            <param name="diagKernelRadiusX">Horizontal radius of Gaussian kernel being used.</param>
            <param name="diagKernelRadiusY">Vertical radius of Gaussian kernel being used.</param>
        </member>
        <member name="M:avl.FitCircleToSurfaceHole(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.MEstimator.Type,System.Single,System.Int32,atl.Optional&lt;avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Circle3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerSer">
            <summary>Fits a circle to a hole in a surface plane.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inPlaneOutlierSuppression">Selects a method for ignoring points not lying on the fitted plane.</param>
            <param name="inClippingFactor">Multitude of standard deviation within which points are considered inliers. Default value: 2.5f.</param>
            <param name="inIterationCount">Number of iterations of outlier suppressing algorithm. Default value: 5.</param>
            <param name="inInitialPlane">Initial approximation of a plane (if available). Default value: atl::NIL.</param>
            <param name="inCircleFittingMethod">Select a method for fitting a circle to a set of points.</param>
            <param name="inCircleOutlierSuppression">Selects a method for ignoring points not lying on the fitted circle. Default value: atl::NIL.</param>
            <param name="outCircle3D">Circle fitted to a surface hole.</param>
            <param name="outPlane">Plane fitted to the surface points.</param>
            <param name="outInliers">Points matching the computed plane.</param>
            <param name="outDistances">Distances of the input surface points to a resulting plane.</param>
            <param name="outSignedDistanceSum">Sum of signed distances of the input surface points to a resulting plane.</param>
            <param name="outDistanceSum">Sum of distances of the input surface points to a resulting plane.</param>
            <param name="outSquaredDistances">Squared distances of the input surface points to a resulting plane.</param>
            <param name="outSquaredDistanceSum">Sum of squared distances of the input surface points to a resulting plane.</param>
        </member>
        <member name="M:avl.FitPlaneToSurface_M(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.MEstimator.Type,System.Single,System.Int32,atl.Optional&lt;avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System">
            <summary>Approximates points of the input surface with a plane using selected M-estimator for outlier suppression.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring points being much different from the rest.</param>
            <param name="inClippingFactor">Multitude of standard deviation within which points are considered inliers. Default value: 2.5f.</param>
            <param name="inIterationCount">Number of iterations of outlier suppressing algorithm. Default value: 5.</param>
            <param name="inInitialPlane">Initial approximation (if available). Default value: atl::NIL.</param>
            <param name="outPlane">Fitted plane.</param>
            <param name="outInliers">Points matching the computed plane.</param>
            <param name="outDistances">Distances of the input points to a resulting plane.</param>
            <param name="outSignedDistanceSum">Sum of signed distances of the input points to a resulting plane.</param>
            <param name="outDistanceSum">Sum of distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistances">Squared distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistanceSum">Sum of squared distances of the input points to a resulting plane.</param>
        </member>
        <member name="M:avl.FitPlaneToSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDerefer">
            <summary>Approximates points of the input surface with a plane using the Least Squares method.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="outPlane">Fitted plane.</param>
            <param name="outDistances">Distances of the input surface points to a resulting plane.</param>
            <param name="outSignedDistanceSum">Sum of signed distances of the input surface points to a resulting plane.</param>
            <param name="outDistanceSum">Sum of distances of the input surface points to a resulting plane.</param>
            <param name="outSquaredDistances">Squared distances of the input surface points to a resulting plane.</param>
            <param name="outSquaredDistanceSum">Sum of squared distances of the input surface points to a resulting plane.</param>
        </member>
        <member name="M:avl.SurfaceVolume(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the volume of given surface.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outVolume">Volume of the input surface.</param>
        </member>
        <member name="M:avl.SurfaceToPlaneDistanceImage(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the image of the distances of the input surface points from a given plane.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inPlane">Input plane.</param>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.SurfaceFlatness(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the surface flatness i.e. how thick the surface is according to the input plane.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inPlane">Input plane.</param>
            <param name="outMaximumPoint1">Surface point with the largest distance on one side of the plane.</param>
            <param name="outMaximumPoint2">Surface point with the largest distance on the other side of the plane.</param>
            <param name="outMaximumDistance1">Distance of the first maximum point from the input plane.</param>
            <param name="outMaximumDistance2">Distance of the second maximum point from the input plane.</param>
            <param name="outFlatness">Difference between two extremal distances of surface points from the input plane.</param>
        </member>
        <member name="M:avl.SurfaceArea(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the surface area of given surface.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="outArea">Area of the input surface.</param>
        </member>
        <member name="M:avl.SurfaceBoundingBox(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the bounding box 3D of given surface.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="outBoundingBox3D">Bounding box of the surface points.</param>
        </member>
        <member name="M:avl.SurfaceBoundingBox_OrNil(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;avl.Box3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the bounding box 3D of given surface; returns NIL if no valid point is present.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="outBoundingBox3D">Bounding box of the surface points.</param>
        </member>
        <member name="M:avl.SurfaceMedian(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the median Z coordinate of the surface.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="outMedian">Median Z coordinate of the surface points.</param>
        </member>
        <member name="M:avl.SurfaceMinimalPoint(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the surface point with minimal Z coordinate.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="outMinimalPoint">Point with minimal Z coordinate.</param>
        </member>
        <member name="M:avl.SurfaceMaximalPoint(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the surface point with maximal Z coordinate.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="outMaximalPoint">Point with maximal Z coordinate.</param>
        </member>
        <member name="M:avl.SurfaceMassCenter(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the mass center of surface points.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="outMassCenter">Mass center of the surface points.</param>
        </member>
        <member name="M:avl.SurfaceValidPointsRegion(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes region of locations where points are valid in a surface and where they are invalid.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="outValidPointsRegion">Region of locations where points are valid.</param>
            <param name="outInvalidPointsRegion">Region of locations where points are invalid.</param>
        </member>
        <member name="M:avs.AvsFilter_GetSurfaceElement(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets the value of a single point of a surface.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inLocation">Location of the surface point to be accessed.</param>
            <param name="outPoint">Output point of the input surface.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PlainType.Type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyD">
            <summary>Returns individual fields of a surface.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="outWidth">Surface width.</param>
            <param name="outHeight">Surface height.</param>
            <param name="outPointType">Point Z coordinate type.</param>
            <param name="outPointByteSize">Point Z coordinate size in bytes.</param>
            <param name="outPitch">Length of surface point line with padding.</param>
            <param name="outXOffset">Offset in X axis.</param>
            <param name="outXScale">Scale in X axis.</param>
            <param name="outYOffset">Offset in Y axis.</param>
            <param name="outYScale">Scale in Y axis.</param>
            <param name="outZOffset">Offset in Z axis.</param>
            <param name="outZScale">Scale in Z axis.</param>
        </member>
        <member name="M:avl.ConvertCoordinateSystem2DTo3D(avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SurfaceFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a coordinate system connected with the surface image to a coordinate system connected with the surface.</summary>
            <param name="inCoordinateSystem">Coordinate system connected with the surface image.</param>
            <param name="inSurfaceFormat">Format of the surface.</param>
            <param name="outCoordinateSystem">Coordinate system connected with the surface.</param>
        </member>
        <member name="M:avl.ConvertSurfaceType(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PlainType.Type,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the point Z coordinate type.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inNewPointType">Point Z coordinate type of the output surface.</param>
            <param name="inNewZOffset">Offset along Z axis in output surface. Default value: atl::NIL.</param>
            <param name="inNewZScale">Scale along Z axis in output surface. Default value: atl::NIL.</param>
            <param name="outSurface">Surface with changed internal surface type.</param>
        </member>
        <member name="M:avl.MakeSurfaceFromImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a Surface structure from depth map mono image.</summary>
            <param name="inImage">Source mono image with depth map.</param>
            <param name="inRoi">Region determining valid points in resulting Surface. Default value: atl::NIL.</param>
            <param name="inXOffset">Default value: 0.0D.</param>
            <param name="inXScale">Default value: 1.0D.</param>
            <param name="inYOffset">Default value: 0.0D.</param>
            <param name="inYScale">Default value: 1.0D.</param>
            <param name="inZOffset">Default value: 0.0D.</param>
            <param name="inZScale">Default value: 1.0D.</param>
        </member>
        <member name="M:avl.CreateFlatSurface(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.PlainType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Double&gt;,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a uniform surface.</summary>
            <param name="inWidth">Width of the created surface. Default value: 320.</param>
            <param name="inHeight">Height of the created surface. Default value: 240.</param>
            <param name="inPointType">Type of single point Z coordinate. Default value: Int16.</param>
            <param name="inXOffset">Default value: 0.0D.</param>
            <param name="inXScale">Default value: 1.0D.</param>
            <param name="inYOffset">Default value: 0.0D.</param>
            <param name="inYScale">Default value: 1.0D.</param>
            <param name="inZOffset">Default value: 0.0D.</param>
            <param name="inZScale">Default value: 1.0D.</param>
            <param name="inZ">Z coordinate of all points of the created surface. Default value: 0.0D.</param>
        </member>
        <member name="M:avl.ProjectPathOntoSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a path consisting of interpolated single points of a surface given their coordinates in surface coordinate system.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inPath">Coordinates of the input path points in surface coordinate system.</param>
            <param name="outSurfaceGridPath">Output path in surface grid coordinate system.</param>
        </member>
        <member name="M:avl.GetSurfacePath(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a path consisting of interpolated single points of a surface given their surface grid coordinates.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inPath">Surface grid coordinates of the input path points.</param>
            <param name="outPath">Output path in surface coordinates.</param>
        </member>
        <member name="M:avl.ProjectPointOntoSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns an interpolated single point of a surface given its coordinates in surface coordinate system.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inPoint">Coordinates of the input point in surface coordinate system.</param>
            <param name="outSurfaceRealPoint">Output point in surface coordinate system.</param>
            <param name="outSurfaceGridPoint">Output point in surface grid coordinate system.</param>
        </member>
        <member name="M:avl.GetSurfacePoint(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns an interpolated single point of a surface given its surface grid coordinates.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inPoint">Surface grid coordinates of the input point.</param>
            <param name="inInterpolationRadius">Radius of vicinity taking into account to interpolate not existing point. Default value: 0.</param>
            <param name="outPoint">Output point.</param>
        </member>
        <member name="M:avl.ArrangePoint3DGrid(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,avl.PlainType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a surface structure from Point3DGrid taking into account X and Y coordinates.</summary>
            <param name="inZScale">Default value: 1.0D.</param>
            <param name="inPointType">Type of single point Z coordinate. Default value: Int16.</param>
        </member>
        <member name="M:avl.ArrangePoint3DArray(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,System.Double!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst,avl.PlainType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Double*!">
            <summary>Creates a surface structure from Point3D array taking into account X and Y coordinates.</summary>
            <param name="inXScale">Default value: 1.0D.</param>
            <param name="inYScale">Default value: 1.0D.</param>
            <param name="inZScale">Default value: 1.0D.</param>
            <param name="inPointType">Type of single point Z coordinate. Default value: Int16.</param>
        </member>
        <member name="M:avl.SkipEmptySurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Surface&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input Surface has at least one point defined, then it is copied to the output; otherwise Nil is returned.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="outNotEmptySurface">A copy of the input surface, if it is not empty, or Nil otherwise.</param>
            <param name="outIsNotEmpty">Indication if the input surface is not empty.</param>
        </member>
        <member name="M:avl.TestSurface(avl.TestSurfaceState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PlainType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a sample 3D surface.</summary>
            <param name="inPointType">Type of single point Z coordinate. Default value: Int16.</param>
            <param name="inDensity">Density of points in output object. Default value: 4.0f.</param>
            <param name="inScaleX">Scaling of output object on X axis. Default value: 1.0f.</param>
            <param name="inScaleY">Scaling of output object on Y axis. Default value: 1.0f.</param>
            <param name="inScaleZ">Scaling of output object on Z axis. Default value: 1.0f.</param>
            <param name="outSurface">Output object.</param>
        </member>
        <member name="M:avl.DownsampleRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DownsampleRegionMode.Type,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shrinks a region by the factor of two along each axis.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inScaleStep">Defines how many times the region size is divided by 2. Default value: 1.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.AlignRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Aligns a region to a coordinate system.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
            <param name="inFrameWidth">Output region's frame width. Default value: atl::NIL.</param>
            <param name="inFrameHeight">Output region's frame height. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.ResizeRegion_Relative(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Resizes region relatively along each axis.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inHorizontalScale">Default value: 1.0f.</param>
            <param name="inVerticalScale">Default value: 1.0f.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ResizeRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Enlarges or shrinks a region to new dimensions.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CropRegionToRectangle(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a region from a rectangular fragment of another one.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inRectangle">Rectangle defining a rotated subregion.</param>
            <param name="inRectangleAlignment">Adjusts the rectangle to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
            <param name="outAlignedRectangle">Input rectangle after transformation (in the region coordinates).</param>
            <param name="outOutputAlignment">Alignment of the output region.</param>
        </member>
        <member name="M:avl.UncropRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Inverse of CropRegion</summary>
            <param name="inRegion">Input region.</param>
            <param name="inSelection">Box defining the range of the original cropping.</param>
            <param name="inWidth">Width of the uncropped region.</param>
            <param name="inHeight">Height of the uncropped region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CropRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a region from a rectangular fragment of another one.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inSelection">Box defining the range of cropping.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ShearRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Axis.Type,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a leant region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inShear">The relative shift of each consecutive row or column.</param>
            <param name="inAxis">Switches between shifting rows or columns.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RotateRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a region around a point.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inCenter">Center of rotation. Default value: atl::NIL.</param>
            <param name="inAngle">Clockwise rotation angle.</param>
            <param name="inInverse">Switches to counter-clockwise rotation.</param>
            <param name="inFrameWidth">Output region frame width. Default value: atl::NIL.</param>
            <param name="inFrameHeight">Output region frame height. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ReflectRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reflects a region through the given location.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.TransposeRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Flips and rotates a region so that x-coordinates are exchanged with y-coordinates.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.EnlargeRegionNTimes(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Enlarges a region by a natural factor.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inN">The scaling coefficient. Default value: 2.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.TranslateRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a region by a given number of pixels along each axis.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inDeltaX">Horizontal shift.</param>
            <param name="inDeltaY">Vertical shift.</param>
            <param name="inInverse">Negates the delta values.</param>
            <param name="inFrameWidth">Output region frame width. Default value: atl::NIL.</param>
            <param name="inFrameHeight">Output region frame height. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.MirrorRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MirrorDirection.Type!System.Runtime.CompilerServices.IsConst,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Mirrors a region across vertical or horizontal axis.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inMirrorDirection">Reverse the order of region columns (horizontal direction) or rows (vertical direction). Default value: Horizontal.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.GetMaximumRegion_OrNil(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionFeature.Type,atl.Conditional&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the region from the input array that corresponds to the largest computed feature value; returns NIL if the array or any region inside it is empty.</summary>
            <param name="inRegions">Input regions.</param>
            <param name="inFeature">Region feature value to be computed.</param>
            <param name="outRegion">Output region.</param>
            <param name="outValue">Computed feature value of the output region.</param>
        </member>
        <member name="M:avl.GetMaximumRegion(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionFeature.Type,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the region from the input array that corresponds to the largest computed feature value.</summary>
            <param name="inRegions">Input regions.</param>
            <param name="inFeature">Region feature value to be computed.</param>
            <param name="outRegion">Output region.</param>
            <param name="outValue">Computed feature value of the output region.</param>
        </member>
        <member name="M:avl.GetMinimumRegion_OrNil(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionFeature.Type,atl.Conditional&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the region from the input array that corresponds to the smallest computed feature value; returns NIL if the array or any region inside it is empty.</summary>
            <param name="inRegions">Input regions.</param>
            <param name="inFeature">Region feature value to be computed.</param>
            <param name="outRegion">Output region.</param>
            <param name="outValue">Computed feature value of the output region.</param>
        </member>
        <member name="M:avl.GetMinimumRegion(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionFeature.Type,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the region from the input array that corresponds to the smallest computed feature value.</summary>
            <param name="inRegions">Input regions.</param>
            <param name="inFeature">Region feature value to be computed.</param>
            <param name="outRegion">Output region.</param>
            <param name="outValue">Computed feature value of the output region.</param>
        </member>
        <member name="M:avl.SortRegions(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionFeature.Type,avl.SortingOrder.Type,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Changes the order of regions from the input array accordingly to an ascending/descending sequence of their computed feature values.</summary>
            <param name="inRegions">Input regions.</param>
            <param name="inFeature">Region feature value to be computed.</param>
            <param name="inSortingOrder">Sorting order.</param>
            <param name="outSortedRegions">Regions sorted according to the computed feature values.</param>
            <param name="outSortedValues">Computed feature values.</param>
        </member>
        <member name="M:avl.MakeRegionConditional(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionFeature.Type,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Conditional&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes region feature and checks whether its value is in range.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inFeature">Region feature value to be computed.</param>
            <param name="inMinimum">Lowest value of the range. Default value: atl::NIL.</param>
            <param name="inMaximum">Highest value of the range. Default value: atl::NIL.</param>
            <param name="outConditionalRegion">The region if the condition is met or nothing otherwise.</param>
        </member>
        <member name="M:avl.ClassifyRegions(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionFeature.Type,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Splits an array of regions according to the selected feature and range.</summary>
            <param name="inRegions">Input regions.</param>
            <param name="inFeature">Region feature value to be computed.</param>
            <param name="inMinimum">Lowest value of the range. Default value: atl::NIL.</param>
            <param name="inMaximum">Highest value of the range. Default value: atl::NIL.</param>
            <param name="outAccepted">Regions with feature values matching the range.</param>
            <param name="outRejected">Regions with feature values outside the range.</param>
            <param name="outBelow">Regions with feature values lower than inMinimum.</param>
            <param name="outAbove">Regions with feature values higher than inMaximum.</param>
            <param name="outValues">Computed feature values.</param>
        </member>
        <member name="M:avl.InscribeRegionInRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ShiftType.Type,avl.FitType.Type,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shifts source region so that it is contained in target region.</summary>
            <param name="inTargetRegion">Region to contain source region.</param>
            <param name="inSourceRegion">Region to be shifted.</param>
            <param name="inPossibleShift">Possible directions of shift.</param>
            <param name="inFitType">Determines if the common border length should be maximized.</param>
            <param name="outShiftX">X coordinate of the shift.</param>
            <param name="outShiftY">Y coordinate of the shift.</param>
            <param name="outShiftedRegion">Shifted source region.</param>
        </member>
        <member name="M:avl.GroupRegionsByRegions(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MatchingCriterion.Type,atl.Array&lt;atl.Array&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Array&lt;avl.Region&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>For each region returns which regions lie inside of it or intersect with it.</summary>
            <param name="inRegions">Array of regions that will be classified into multiple groups.</param>
            <param name="inGroupRegions">Array of regions that define the groups.</param>
            <param name="inMatchingCriterion">Specifies whether a region must fully belong to a group region or if it is enough that it intersects.</param>
            <param name="outGroupedIndices">Indices of input regions classified into multiple groups.</param>
            <param name="outGroupedRegions">Input regions classified into multiple groups.</param>
        </member>
        <member name="M:avl.GroupPathsByRegions(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MatchingCriterion.Type,atl.Array&lt;atl.Array&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Array&lt;avl.Path&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>For each region returns which paths lie inside of it or intersect with it.</summary>
            <param name="inPaths">Array of paths that will be classified into multiple groups.</param>
            <param name="inRegions">Array of regions that define the groups.</param>
            <param name="inMatchingCriterion">Specifies whether a path must fully belong to a group region or if it is enough that it intersects.</param>
            <param name="outGroupedIndices">Indices of input paths classified into multiple groups.</param>
            <param name="outGroupedPaths">Input paths classified into multiple groups.</param>
        </member>
        <member name="M:avl.GroupPointsByRegions(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>For each region returns which points lie inside of it.</summary>
        </member>
        <member name="M:avl.TestPointArrayInRegion(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Boolean&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Tests which points lie inside a region.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.TestPointInRegion(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a point lies inside a region.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.TestRegionInRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a region is contained in another one.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.TestRegionIntersectsWith(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether two regions have non-empty intersection.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.TestRegionUnequalTo(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether given regions are not equal.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.TestRegionEqualTo(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether given regions are equal.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionComplement(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a region of pixels not contained in the input region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ExpandRegions(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Metric.Type&gt;,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits pixels of the input regions and their complement among these regions.</summary>
            <param name="inMetric">Metric used for deciding which region receives a pixel; if set to NIL, Taxi metric is used after demarcating with NIL metric. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.DemarcateRegions(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Metric.Type&gt;,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits common pixels of the input regions among these regions.</summary>
            <param name="inMetric">Metric used for deciding which region owns a pixel; if set to NIL, region with lowest index in the input array is chosen. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.SkeletonizeRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionSkeletonMethod.Type,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Thins a region to its skeleton.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inRegionSkeletonMethod">Default value: TwelveConnected.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.PruneRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes one pixel wide branches from a region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inMaxLength">Maximal length of a branch of the input region to be pruned. Default value: 3.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ThickenRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological thickening on a region using predefined kernels.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ThinRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological thinning on a region using predefined kernels.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionHitAndMissTransform(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a hit-and-miss transformation on a region using arbitrary kernels.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inHitKernel">The kernel of pixels that should be present.</param>
            <param name="inHitKernelAnchor">Location withing inHitKernel, defining its center. Default value: atl::NIL.</param>
            <param name="inMissKernel">The kernel of pixels that should be missing.</param>
            <param name="inMissKernelAnchor">Location withing inMissKernel, defining its center. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CloseRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological closing on a region using selected predefined kernel.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inKernel">Kernel shape (predefined).</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CloseRegion_AnyKernel(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological closing on a region using an arbitrary kernel.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inKernel">Kernel shape (any).</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.OpenRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological opening on a region using a predefined kernel.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inKernel">Kernel shape (predefined).</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.OpenRegion_AnyKernel(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological opening on a region using an arbitrary kernel.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inKernel">Kernel shape (any).</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ErodeRegion_Threshold(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Erodes a region with inThresholdValue pixels of inKernel.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ErodeRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological erosion on a region using a predefined kernel.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inKernel">Kernel shape (predefined).</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ErodeRegion_AnyKernel_Old(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inRegion">Input region.</param>
            <param name="inKernel">Kernel shape (any).</param>
            <param name="inKernelAnchor">Location within inKernel, defining its center. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ErodeRegion_AnyKernel(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological erosion on a region using an arbitrary kernel.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inKernel">Kernel shape (any).</param>
            <param name="inKernelAnchor">Location within inKernel, defining its center. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.DilateRegion_AnyKernel_Old(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.DilateRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological dilation on a region using a predefined kernel.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inKernel">Kernel shape (predefined).</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.DilateRegion_AnyKernel(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological dilation on a region using an arbitrary kernel.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inKernel">Kernel shape (any).</param>
            <param name="inKernelAnchor">Location within inKernel, defining its center. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionToRegionDistance(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes minimal distance between one of the points of the first region with one of the points of the second region.</summary>
            <param name="inRegion1">First input region.</param>
            <param name="inRegion2">Second input region.</param>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.RemoveRegionBlobs(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionConnectivity.Type,avl.RegionFeature.Type,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Boolean,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes regions not fulfilling specific conditions</summary>
            <param name="inRegion">Input region.</param>
            <param name="inConnectivity">Type of connectivity used for the region foreground.</param>
            <param name="inFeature">Region feature value to be computed.</param>
            <param name="inMinimum">Minimal value of the considered feature. Default value: 1.0f.</param>
            <param name="inMaximum">Maximal value of the considered feature. Default value: atl::NIL.</param>
            <param name="inRemoveBoundaryBlobs">Flag indicating whether the blobs on border of the input region should be removed or not. Default value: False.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CropBordersFromRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes from a region the pixels that lie very close to the region's borders.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inMarginX">Horizontal margin from the region border.</param>
            <param name="inMarginY">Vertical margin from the region border.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.SplitRegionIntoExactlyNComponents(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,System.Boolean,atl.Conditional&lt;atl.Array&lt;avl.Region&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits a region into a fixed-size array of regions.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inMaxDistance">Default value: 5.</param>
            <param name="inDistanceBalance">Defines how much important the distance between regions in x coordinate is according to distance in y coordinate.</param>
            <param name="inRemoveBoundaryBlobs">Flag indicating whether the blobs on border of the input region should be removed or not. Default value: False.</param>
        </member>
        <member name="M:avl.SplitRegionIntoComponents(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Boolean,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits a region into an array of regions. Operates by merging blobs in accordance to the inMaxDistance parameter.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inMaxDistance">Default value: 5.</param>
            <param name="inDistanceBalance">Defines how much important the distance between regions in x coordinate is according to distance in y coordinate.</param>
            <param name="inMinComponentArea">Minimal area of a resulting component. Default value: 1.</param>
            <param name="inMaxComponentArea">Maximal area of a resulting component. Default value: atl::NIL.</param>
            <param name="inRemoveBoundaryBlobs">Flag indicating whether the blobs on border of the input region should be removed or not. Default value: False.</param>
        </member>
        <member name="M:avl.FillRegionHoles(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionConnectivity.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extends the input region so that it contains also all the pixels previously lying in its holes.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inConnectivity">Type of connectivity used for the region foreground.</param>
            <param name="inMinHoleArea">Minimal area of a hole to be filled.</param>
            <param name="inMaxHoleArea">Maximal area of a hole to be filled. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.SplitRegionIntoBlobs(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionConnectivity.Type,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Boolean,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits a region into an array of regions corresponding to its connected components.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inConnectivity">Type of connectivity used for the region foreground.</param>
            <param name="inMinBlobArea">Minimal area of a resulting blob. Default value: 1.</param>
            <param name="inMaxBlobArea">Maximal area of a resulting blob. Default value: atl::NIL.</param>
            <param name="inRemoveBoundaryBlobs">Flag indicating whether the blobs on border of the input region should be removed or not. Default value: False.</param>
            <param name="diagBlobAreas">Areas of extracted blobs.</param>
        </member>
        <member name="M:avl.RegionOuterBoundaries(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Location&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Location&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Location&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Location&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the top, right, bottom and left boundaries of the input region.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionBoundaries(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionConnectivity.Type,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes interior pixels from a region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inConnectivity">Type of connectivity used for the region foreground.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionInteriors(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionConnectivity.Type,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes boundary pixels from a region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inConnectivity">Type of connectivity used for the region foreground.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionConvexHull(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest convex region containing the input region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionBoundingRectangle_Deprecated(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,avl.BoundingRectangleFeature.Type,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle containing a region.</summary>
            <param name="inRegion">Input array of points.</param>
            <param name="inRectangleOrientation">Expected orientation of the resulting rectangle. Default value: atl::NIL.</param>
            <param name="inBoundingRectangleFeature">Determines what kind of bounding rectangle will be computed. Default value: MinimalArea.</param>
            <param name="outBoundingRectangle">The smallest bounding rectangle of the input region.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.RegionPointRunLengths(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the lengths of horizontal sequences of locations that constitute the input region.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionSimilarity(avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Internal character normalization.</summary>
        </member>
        <member name="M:avl.RegionProjection(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ProjectionDirection.Type!System.Runtime.CompilerServices.IsConst,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the profile of the region pixel count in consecutive rows or columns.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inProjectionDirection">Direction in which the pixel occurrences are counted, 'horizontal' means summation row after row, 'vertical' indicates summation column after column.</param>
            <param name="outProfile">Profile of pixel count in consecutive rows/columns.</param>
        </member>
        <member name="M:avl.RegionInscribedBox(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,atl.Conditional&lt;avl.Box&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the largest box contained in a region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inMinAspectRatio">Minimal aspect ratio of found box. Default value: 0.0f.</param>
            <param name="inMaxAspectRatio">Maximal aspect ratio of found box (reciprocal of inMinAspectRatio by default). Default value: atl::NIL.</param>
            <param name="inMinWidth">Minimal width of found box. Default value: 1.</param>
            <param name="inMaxWidth">Maximal width of found box. Default value: atl::NIL.</param>
            <param name="inMinHeight">Minimal height of found box. Default value: 1.</param>
            <param name="inMaxHeight">Maximal height of found box. Default value: atl::NIL.</param>
            <param name="outBox">Found box with largest area.</param>
        </member>
        <member name="M:avl.RegionMedialAxis(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionSkeletonMethod.Type,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes an array of paths corresponding to the skeleton of the input region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inRegionSkeletonMethod">Default value: TwelveConnected.</param>
        </member>
        <member name="M:avl.RegionBoundingParallelogram(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BoundingRectangleFeature.Type,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest parallelogram containing a region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inBoundingParallelogramFeature">Determines what kind of bounding parallelogram will be computed. Default value: MinimalArea.</param>
            <param name="outBoundingParallelogram">Smallest bounding parallelogram of the input points.</param>
            <param name="outCenter">Center of the bounding parallelogram.</param>
            <param name="outLongSide">Length of the bounding parallelogram long side.</param>
            <param name="outShortSide">Length of the bounding parallelogram short side.</param>
            <param name="outAngle">Angle of the bounding parallelogram.</param>
        </member>
        <member name="M:avl.RegionBoundingRectangle_OrNil(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BoundingRectangleFeature.Type,System.Single,avl.RectangleOrientation.Type,atl.Conditional&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest rectangle containing a region; returns NIL if the region is empty.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inBoundingRectangleFeature">Determines what kind of bounding rectangle will be computed. Default value: MinimalArea.</param>
            <param name="inReferenceAngle">The middle angle of the valid range of the output rectangle's angle. Default value: 0.0f.</param>
            <param name="inRectangleOrientation">Orientation of the output rectangle. Default value: Horizontal.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input region.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.RegionBoundingRectangle(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BoundingRectangleFeature.Type,System.Single,avl.RectangleOrientation.Type,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle containing a region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inBoundingRectangleFeature">Determines what kind of bounding rectangle will be computed. Default value: MinimalArea.</param>
            <param name="inReferenceAngle">The middle angle of the valid range of the output rectangle's angle. Default value: 0.0f.</param>
            <param name="inRectangleOrientation">Orientation of the output rectangle. Default value: Horizontal.</param>
            <param name="outBoundingRectangle">The smallest bounding rectangle of the input region.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.RegionBoundingRectangle_FixedAngle_OrNil(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Conditional&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest rectangle with the given orientation angle containing a region; returns NIL if the region is empty.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inAngle">Expected angle of the resulting rectangle.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input region.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.RegionBoundingRectangle_FixedAngle(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle with the given orientation angle containing a region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inAngle">Expected angle of the resulting rectangle.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input region.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.RegionBoundingCircle_OrNil(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Circle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest circle enclosing a region; returns NIL if the region is empty.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionBoundingCircle(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest circle enclosing a region.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionContours(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionContourMode.Type!System.Runtime.CompilerServices.IsConst,avl.RegionConnectivity.Type,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes an array of closed paths corresponding to the contours of the input region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inRegionConnectivity">Region connectivity semantics. Default value: EightDirections.</param>
        </member>
        <member name="M:avl.RegionHoles(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionConnectivity.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates regions of the holes of the input region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inConnectivity">Region connectivity semantics.</param>
            <param name="inMinHoleArea">Minimal area of a resulting hole. Default value: 1.</param>
            <param name="inMaxHoleArea">Maximal area of a resulting hole. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.RegionNumberOfHoles(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionConnectivity.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the number of holes in a region.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inConnectivity">Region connectivity semantics.</param>
            <param name="inMinHoleArea">Minimal area of a hole. Default value: 1.</param>
            <param name="inMaxHoleArea">Maximal area of a hole. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.RegionBoundingBox_OrNil(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Box&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box containing a region; returns NIL if the region is empty.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionBoundingBox(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box containing a region.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionRectangularity(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a region divided by the area of its bounding rectangle.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionConvexity(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a region divided by area of its convex hull.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionCircularity(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircularityMeasure.Type!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a region divided by the area of a circular region having the same feature.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inCircularityMeasure">Which algorithm should be used to compute a circle. Default value: RadiusPreserving.</param>
            <param name="diagCircle">Computed circle which area was compared.</param>
        </member>
        <member name="M:avl.RegionPerimeterLength(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the length of the input region perimeter.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionDiameter(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the longest segment connecting two pixels contained in region and its length.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionArea(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the number of pixels contained in a region.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionMassCenter_OrNil(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a point with coordinates equal to the average coordinates of the region's pixels; returns NIL if the region is empty.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionMassCenter(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a point with coordinates equal to the average coordinates of the region's pixels.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionEllipticAxes(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes axes of an ellipse having the same first and second order moments as the given region.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionElongation(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the elongation factor of a region ( perfect circle has minimal elongation equal 1.0 ).</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionOrientation(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the orientation of a region as an angle of value in range 0.0 - 180.0.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionMoment(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionMomentType.Type,System.Boolean,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes selected second-order moment of a region in regular and normalized ( divided by region area ) variant.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionIntersection_OfArray(atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes common part of array of regions.</summary>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionUnion_OfArray(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a region containing all the pixels that any of the input regions contains.</summary>
            <param name="inArray">Array of regions.</param>
            <param name="outRegion">Union of the input regions.</param>
        </member>
        <member name="M:avl.RegionSymmetricDifference_OfLoop(avl.RegionSymmetricDifference_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a region containing pixels belonging to odd number of regions appearing in consecutive iterations.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionSymmetricDifference_OfArray(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a region containing pixels belonging to odd number of array regions.</summary>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionSymmetricDifference(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a region containing pixels from first or second input region, but not from both.</summary>
            <param name="inRegion1">First input region.</param>
            <param name="inRegion2">Second input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionUnion_OfLoop(avl.RegionUnion_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the union of regions appearing in consecutive iterations.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionUnion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a region containing pixels from both input regions.</summary>
            <param name="inRegion1">First input region.</param>
            <param name="inRegion2">Second input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionDifference(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a region containing pixels from the first input region, but not from the second input region.</summary>
            <param name="inRegion1">First input region.</param>
            <param name="inRegion2">Second input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionIntersection_OfLoop(avl.RegionIntersection_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the common part of regions appearing in consecutive iterations.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionIntersection(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the common part of two regions.</summary>
            <param name="inRegion1">First input region.</param>
            <param name="inRegion2">Second input region.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CreateLineRegion(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a line region.</summary>
            <param name="inWidth">Width of output region line.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CreateSegmentRegion(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,System.Int32,System.Boolean,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a segment region.</summary>
            <param name="inWidth">Segment width.</param>
            <param name="inRound">Make ends of segment round.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.TestRegionValid(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks if the input region has well sorted, not overlapping and in-range point-runs.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.LoadRegion(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized Region object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outRegion">Deserialized output Region.</param>
        </member>
        <member name="M:avl.SaveRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized Region object as avdata file.</summary>
            <param name="inRegion">Region to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.SkipEmptyRegion(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input region contains at least one pixel, then it is copied to the output; otherwise Nil is returned.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.RegionCharacteristicPoint(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a characteristic point of the input's region bounding box.</summary>
            <param name="inRegion">Input region.</param>
            <param name="inPointAnchor">Default value: TopLeft.</param>
        </member>
        <member name="M:avl.TestRegionNotEmpty(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether the size of a region doesn't equal zero.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.TestRegionEmpty(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether the size of a region equals zero.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.TestRegionOnBorder(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a region is adjacent to its border.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.CreateRectangleBorderRegion(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.BorderPosition.Type,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a frame-shaped region with given parameters.</summary>
            <param name="inRectangleAlignment">Adjusts the rectangle to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inBorderWidth">Default value: 1.0f.</param>
            <param name="inBorderPosition">Default value: Centered.</param>
            <param name="inFrameWidth">Width of the created region's frame.</param>
            <param name="inFrameHeight">Height of the created region's frame.</param>
            <param name="outRegion">Output region.</param>
            <param name="outAlignedRectangle">The input rectangle transformed to the absolute coordinate system.</param>
        </member>
        <member name="M:avl.CreateRectangleRegion(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a region corresponding to a given rectangle.</summary>
            <param name="inRectangleAlignment">Adjusts the rectangle to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inFrameWidth">Width of the created region's frame (not to be confused with the width of the rectangle!).</param>
            <param name="inFrameHeight">Height of the created region's frame (not to be confused with the height of the rectangle!).</param>
            <param name="outRegion">Output region.</param>
            <param name="outAlignedRectangle">The input rectangle transformed to the absolute coordinate system.</param>
        </member>
        <member name="M:avl.CreatePathBorderRegion(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.BorderPosition.Type,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a region from a path with given parameters.</summary>
            <param name="inPath">Input path.</param>
            <param name="inPathAlignment">Adjusts the path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inBorderWidth">Default value: 1.0f.</param>
            <param name="inBorderPosition">Default value: Centered.</param>
            <param name="inFrameWidth">Width of the created region's frame.</param>
            <param name="inFrameHeight">Height of the created region's frame.</param>
            <param name="outRegion">Output region.</param>
            <param name="outAlignedPath">The input path transformed to the absolute coordinate system.</param>
        </member>
        <member name="M:avl.CreatePolygonRegion(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a polygonal region corresponding to a given closed path.</summary>
            <param name="inPolygonAlignment">Adjusts the polygon to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inFrameWidth">Width of the created region's frame.</param>
            <param name="inFrameHeight">Height of the created region's frame.</param>
            <param name="outRegion">Output region.</param>
            <param name="outAlignedPolygon">The input polygon transformed to the absolute coordinate system.</param>
        </member>
        <member name="M:avl.CreateCircleRegion(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a circular region corresponding to a given circle.</summary>
            <param name="inCircleAlignment">Adjusts the circle to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inFrameWidth">Width of the created region's frame (not to be confused with the size of the circle!).</param>
            <param name="inFrameHeight">Height of the created region's frame (not to be confused with the size of the circle!).</param>
            <param name="outRegion">Output region.</param>
            <param name="outAlignedCircle">The input circle transformed to the absolute coordinate system.</param>
        </member>
        <member name="M:avl.CreateGridRegion(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a grid-shaped region with given parameters.</summary>
            <param name="inHorizontalStep">Horizontal distance between vertical grid lines.</param>
            <param name="inVerticalStep">Vertical distance between horizontal grid lines.</param>
            <param name="inFrameWidth">Width of the created region's frame.</param>
            <param name="inFrameHeight">Height of the created region's frame.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CreateCrossRegion(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a cross-shaped region with given parameters.</summary>
            <param name="inFrameWidth">Width of the created region's frame.</param>
            <param name="inFrameHeight">Height of the created region's frame.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CreateRingRegion(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.BorderPosition.Type,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a ring-shaped region with given parameters.</summary>
            <param name="inCircle">Input circle.</param>
            <param name="inCircleAlignment">Adjusts the circle to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inRingWidth">Default value: 1.0f.</param>
            <param name="inBorderPosition">Default value: Centered.</param>
            <param name="inFrameWidth">Width of the created region's frame.</param>
            <param name="inFrameHeight">Height of the created region's frame.</param>
            <param name="outRegion">Output region.</param>
            <param name="outAlignedCircle">The input circle transformed to the absolute coordinate system.</param>
        </member>
        <member name="M:avl.CreateEllipseRegion(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates an elliptic region of given bounding rectangle.</summary>
            <param name="inEllipseAlignment">Adjusts the ellipse to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inFrameWidth">Width of the created region's frame (not to be confused with the width of the ellipse!).</param>
            <param name="inFrameHeight">Height of the created region's frame (not to be confused with the height of the ellipse!).</param>
            <param name="outRegion">Output region.</param>
            <param name="outAlignedEllipse">The input ellipse transformed to the absolute coordinate system.</param>
        </member>
        <member name="M:avl.CreateBoxBorderRegion(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.BorderPosition.Type,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a frame-shaped region with given parameters.</summary>
            <param name="inBorderWidth">Default value: 1.</param>
            <param name="inBorderPosition">Default value: Centered.</param>
            <param name="inFrameWidth">Width of the created region's frame.</param>
            <param name="inFrameHeight">Height of the created region's frame.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CreateBoxRegion(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a rectangular region corresponding to a given box.</summary>
            <param name="inBox">A box defining pixels that will be converted to white elements.</param>
            <param name="inFrameWidth">Width of the created region's frame (not to be confused with the width of the box!).</param>
            <param name="inFrameHeight">Height of the created region's frame (not to be confused with the height of the box!).</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.CreateRegionOfInterestRegion(avl.RegionOfInterest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a region corresponding to a given region of interest.</summary>
            <param name="inFrameWidth">Width of the created region's frame.</param>
            <param name="inFrameHeight">Height of the created region's frame.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionOfInterestToRegion(avl.RegionOfInterest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a region of interest to a region with automatically computed frame.</summary>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.PathToRegionOfInterest(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionOfInterest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a closed path to region of interest.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.LocationsToRegion(atl.Array&lt;avl.Location&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Forms a region containing pixels of given locations.</summary>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.RegionToLocations(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Location&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a region to an array of its pixels locations.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.GetRegionFrame(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the width and height of the entire region's frame (not to be confused with RegionBoundingBox!)</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.SetRegionFrame(avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">
            <summary>Changes the width and the height of a region's frame (but does not rescale the content).</summary>
            <param name="inWidth">New frame width.</param>
            <param name="inHeight">New frame height.</param>
        </member>
        <member name="M:avl.ResizeProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ResizeProfileInterpolation.Type,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the size of a profile, preserving its shape.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inNewSize">Default value: 1.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.ShrinkProfileNTimes(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reduces the length of the profile by averaging its elements.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inN">The scaling coefficient. Default value: 2.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.RotateProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves the last element ahead of the first one (inShift times).</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inShift">Default value: 0.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.UncropProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extends the profile by adding zeros at the beginning and at the end.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inStart">Same as in CropProfile.</param>
            <param name="inLength">Length of the output profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.CropProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Confines a profile to its continuous subsequence.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inStart">Index of the first element of the input profile that will be included in the output profile.</param>
            <param name="inLength">Length of the output profile. Default value: atl::NIL.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.TestProfileDominatesProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether values in the first profile are greater or equal than corresponding values in the second profile</summary>
            <param name="inProfile1">Input profile1.</param>
            <param name="inProfile2">Input profile2.</param>
        </member>
        <member name="M:avl.RescaleProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies linear transformation to profile.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inA">Value multiplied. Default value: 1.0f.</param>
            <param name="inB">Value added. Default value: 0.0f.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.AbsoluteProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms each profile value to its absolute value.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.DivideProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Divides each element of a profile by a scalar value.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inValue">Default value: 2.0f.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MultiplyProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies each element of a profile by a scalar value.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inValue">Default value: 2.0f.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.NegateProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms each profile value to its negation.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.SubtractFromProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Subtracts a scalar value from each element of a profile.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.AddToProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds a scalar value to each element of a profile.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.ProfileAutocorrelation(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Single,avl.PeriodPrecisionMethod.Type,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the correlation between neighboring sub-profiles of different sizes and infers the most probable period length.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inStart">Beginning index of the sub-profile of interest.</param>
            <param name="inMinPeriod">Minimum period length. Default value: 2.</param>
            <param name="inMaxPeriod">Maximum period length. Default value: 2.</param>
            <param name="inMinVerifiedLength">Minimum number of profile points that verify single period (increases the actual RepeatCount for small periods). Default value: 1.</param>
            <param name="inFlexibleVerification">Compensates errors resulting from whole-pixel precision.</param>
            <param name="inMinRepeatCount">The number of repeats for sufficiently big periods. Default value: 1.</param>
            <param name="inHarmonicHysteresis">Defines how much better must be the period T than T/2, T/3 etc. to be accepted. Default value: 0.05f.</param>
            <param name="inPrecisionMethod">Defines if and how sub-point precision is achieved.</param>
            <param name="outAutocorrelationValues">Autocorrelation values for consecutive period values.</param>
            <param name="outPeriod">Estimated period length.</param>
            <param name="outPeriodScore">Correlation value for the estimated period length.</param>
        </member>
        <member name="M:avl.ProfileCorrelation(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the correlation between two sub-profiles.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inStart1">Start of the first sub-profile of interest.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="inStart2">Start of the second sub-profile of interest.</param>
            <param name="inLength">Length of the sub-profiles of interest. Default value: atl::NIL.</param>
            <param name="outCorrelation">Pearson correlation coefficient.</param>
            <param name="diagProfile1">First sub-profile of interest.</param>
            <param name="diagProfile2">Second sub-profile of interest.</param>
        </member>
        <member name="M:avl.ProfileDistance(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DistanceMeasure.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the [mean] square error between two profiles.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="inDistanceMeasure">Measure of distance.</param>
            <param name="outDistance">Output distance value.</param>
        </member>
        <member name="M:avl.DilateProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes a profile by choosing maximum point within a kernel.</summary>
            <param name="inProfile">Profile to be processed.</param>
            <param name="inKernelRadius">Defines the width of the kernel as '2 * inKernelRadius + 1'. Default value: 3.</param>
            <param name="inCyclic">Defines whether the first element should be considered adjacent to the last element.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.ErodeProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes a profile by choosing minimum point within a kernel.</summary>
            <param name="inProfile">Profile to be processed.</param>
            <param name="inKernelRadius">Defines the width of the kernel as '2 * inKernelRadius + 1'. Default value: 3.</param>
            <param name="inCyclic">Defines whether the first element should be considered adjacent to the last element.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.ConvolveProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Optional&lt;System.Int32&gt;,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies a user-defined convolution to a profile.</summary>
            <param name="inProfile">Profile to be processed.</param>
            <param name="inMask">Convolution kernel mask that will be applied to the profile.</param>
            <param name="inNormalizeMaskValues">If set to true, the kernel mask will be normalized so that its values sum up to one. Default value: False.</param>
            <param name="inMaskOrigin">Index of the kernel mask element that will be aligned against the profile values. Default value: atl::NIL.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.SmoothProfile_Gauss(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths a profile by averaging points within a kernel using gaussian-weighted average.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inStdDev">Standard deviation of the gaussian kernel. Default value: 0.6f.</param>
            <param name="inKernelRelativeSize">A multiple of the standard deviation determining the size of the kernel. Default value: 3.0f.</param>
            <param name="inCyclic">Defines whether the first element should be considered adjacent to the last element.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.SmoothProfile_Mean(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths a profile by averaging points within a kernel.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inKernelRadius">Defines the width of the kernel as '2 * inKernelRadius + 1'. Default value: 3.</param>
            <param name="inCyclic">Defines whether the first element should be considered adjacent to the last element.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.DifferentiateProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.DifferentiationMethod.Type,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the derivative of a profile.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inCyclic">Defines whether to compute differences between first and last elements.</param>
            <param name="inDifferentiationMethod">Default value: Central.</param>
        </member>
        <member name="M:avl.ProfileStripes(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.ProfileStripe&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds pairs of opposite (raising and falling) edges in the input profile.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Bright MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inMinGapWidth">Minimal distance between consecutive stripes. Default value: 0.0f.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive stripes. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outGapWidths">Distances between consecutive stripes.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ProfileRidges(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.ProfileRidge&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the high or low peaks in the input profile.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process. Default value: RidgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f RidgeWidth: 5 RidgeMargin: 2 MinMagnitude: 5.0f RidgePolarity: Bright ).</param>
            <param name="inMinDistance">Minimal distance between consecutive ridges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive ridges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outDistances">Output distances between consecutive ridges.</param>
            <param name="diagResponseProfile">Profile of the ridge operator response.</param>
        </member>
        <member name="M:avl.ProfileEdges(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.ProfileEdge&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the locations at which the profile values raise or fall quickly.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f EdgeTransition: BrightToDark ).</param>
            <param name="inMinDistance">Minimal distance between consecutive edges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive edges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDistances">Output distances between consecutive edges.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ProfileLinearRegression_Deprecated(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns coefficients of linear function (in form y = Ax + B) that illustrates the trend of profile. Uses ordinary least squares method.</summary>
            <param name="inProfile">Input profile.</param>
        </member>
        <member name="M:avl.ProfileSections(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Array&lt;avl.ProfileSection&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.ProfileSection&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds subprofiles whose values fall into the specified range.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inMinValue">Lower bound for profile values. Default value: 5.0f.</param>
            <param name="inMaxValue">Upper bound for profile values. Default value: atl::NIL.</param>
            <param name="inMinSectionWidth">Minimal width of the found section. Default value: 0.0f.</param>
            <param name="inMaxSectionWidth">Maximal width of the found section. Default value: atl::NIL.</param>
            <param name="inMinGapWidth">Minimal distance between consecutive sections. Default value: 0.0f.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive sections. Default value: atl::NIL.</param>
            <param name="inMaxInnerGapWidth">Maximal possible gap width between two sections to join them into one. Default value: 0.0f.</param>
            <param name="outSections">Output profile sections.</param>
            <param name="outBoundingSection">The smallest section that contains all outSections.</param>
        </member>
        <member name="M:avl.ProfileMinimum(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ProfileInterpolationMethod.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds the lowest value of the input profile, its precise location and the corresponding index.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inInterpolationMethod">Profile points' interpolation method. Default value: Quadratic4.</param>
            <param name="outMinimumPoint">Position of lowest value with respect to profile's offset and scale.</param>
            <param name="outMinimumIndex">Index of lowest value.</param>
            <param name="outMinimumValue">Lowest value.</param>
        </member>
        <member name="M:avl.ProfileMaximum(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ProfileInterpolationMethod.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds the highest value of the input profile, its precise location and the corresponding index.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inInterpolationMethod">Profile points' interpolation method. Default value: Quadratic4.</param>
            <param name="outMaximumPoint">Position of highest value with respect to profile's offset and scale.</param>
            <param name="outMaximumIndex">Index of highest value.</param>
            <param name="outMaximumValue">Highest value.</param>
        </member>
        <member name="M:avl.ProfileAverage(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average value of a profile.</summary>
            <param name="inProfile">Input profile.</param>
        </member>
        <member name="M:avl.ProfileZeroCrossings(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the points of a profile at which the profile intersects the x-axis.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outZeroCrossings">X coordinates of the locations where the profile crosses the y=0 axis.</param>
        </member>
        <member name="M:avl.ProfileLocalExtrema(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.ExtremumType.Type!System.Runtime.CompilerServices.IsConst,avl.ProfileInterpolationMethod.Type,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Extremum1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the locations at which the values of the input profile are locally highest or lowest.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inCyclic">Indicates whether the last element should be considered a neighbour of the first element.</param>
            <param name="inExtremumType">Type of extremum to find.</param>
            <param name="inInterpolationMethod">When interpolation is set to Quadratic each non-plateau extremum is located using a parabola fit. Default value: Quadratic4.</param>
            <param name="inConsiderPlateaus">Indicates whether the result should include centers of plateau extrema. Default value: True.</param>
            <param name="inMinValue">Minimum value of an extremum. Default value: atl::NIL.</param>
            <param name="inMaxValue">Maximum value of an extremum. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker extrema can be detected in the vicinity of stronger ones. Default value: atl::NIL.</param>
            <param name="outLocalExtrema">Extrema of the profile values.</param>
        </member>
        <member name="M:avl.ProfileSum(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of the profile values.</summary>
            <param name="inProfile">Input profile.</param>
        </member>
        <member name="M:avl.ProfileSize(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the number of elements in a profile.</summary>
            <param name="inProfile">Input profile.</param>
        </member>
        <member name="M:avl.AccumulateProfile(avl.AccumulateProfileState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a profile of most recent values.</summary>
            <param name="inMaxCount">Number of last values that are remembered. Default value: atl::NIL.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.JoinProfiles(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Concatenates two profiles into one.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.DifferenceProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes profile representing difference between corresponding values of given profiles.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.DivideProfiles(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Divides two profiles value by value.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MultiplyProfiles_OfLoop(avl.MultiplyProfiles_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies profiles appearing in consecutive iterations value by value.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MultiplyProfiles_OfArray(atl.Array&lt;avl.Profile&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies profiles of an array value by value.</summary>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MultiplyProfiles(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies two profiles value by value.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.SubtractProfiles(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Subtracts two profiles value by value.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.AddProfiles_OfLoop(avl.AddProfiles_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds profiles appearing in consecutive iterations value by value.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.AddProfiles_OfArray(atl.Array&lt;avl.Profile&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds profiles of an array value by value.</summary>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.AddProfiles(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds two profiles value by value.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MaximumProfile_OfLoop(avl.MaximumProfile_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the maximum of profiles appearing in consecutive iterations.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MaximumProfile_OfArray(atl.Array&lt;avl.Profile&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the maximum of profiles of an array.</summary>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MaximumProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the maximum of two profiles point by point.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MinimumProfile_OfLoop(avl.MinimumProfile_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the minimum of profiles appearing in consecutive iterations.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MinimumProfile_OfArray(atl.Array&lt;avl.Profile&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the minimum of profiles of an array.</summary>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.MinimumProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the minimum of two profiles point by point.</summary>
            <param name="inProfile1">First input profile.</param>
            <param name="inProfile2">Second input profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a profile.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="outValues">Output values of the profile.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeProfile(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a profile structure.</summary>
            <param name="inXScale">Default value: 1.0f.</param>
            <param name="inValues">Input values of the profile.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.SkipEmptyProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Profile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input profile contains at least one element, then it is copied to the output; otherwise Nil is returned.</summary>
            <param name="inProfile">Input profile.</param>
        </member>
        <member name="M:avl.LoadProfile(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Deserializes a profile from an AVDATA file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outProfile">Deserialized output Profile.</param>
        </member>
        <member name="M:avl.SaveProfile(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Serializes a profile to an AVDATA file.</summary>
            <param name="inProfile">Profile to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.CreateUniformProfile(System.Single,System.Int32,System.Single,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an uniform profile of the given size.</summary>
            <param name="inValue">Input common value of all elements.</param>
            <param name="inSize">Input the number of elements. Default value: 1.</param>
            <param name="inXOffset">X offset of the output profile. Default value: 0.0f.</param>
            <param name="inXScale">X scale of the output profile. Default value: 1.0f.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.ProfileCoordinates(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns an array of all X and Y coordinates of the input profile.</summary>
            <param name="inProfile">Input profile.</param>
        </member>
        <member name="M:avl.ProfileIndices(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns an array of all indices of the input profile (0, 1, 2, ...).</summary>
            <param name="inProfile">Input profile.</param>
        </member>
        <member name="M:avl.SetProfileElement(avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>Sets a single element in a profile, located at the specified index.</summary>
            <param name="inInverse">Reversed order of elements.</param>
        </member>
        <member name="M:avl.GetProfileElement_Interpolated(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns linear interpolation between two consecutive values from a profile.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inIndex">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.GetProfileElement(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets a single value from a profile, located at the specified index.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inInverse">Reversed order of elements.</param>
        </member>
        <member name="M:avl.SetProfileXTransform(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets the offset and the scale of a profile in the X axis.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inXOffset">Default value: 0.0f.</param>
            <param name="inXScale">Default value: 1.0f.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.JoinPoint3DGrids(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combines two point grids into one.</summary>
            <param name="inDeltaX">Default value: 0.</param>
            <param name="inDeltaY">Default value: 0.</param>
        </member>
        <member name="M:avl.CropPoint3DGridByNeighborsProximity(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.Metric3D.Type,System.Single!System.Runtime.CompilerServices.IsConst,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes from the grid points that are too distant from their neighbor points.</summary>
            <param name="inNeighborRadius">Radius of neighbors to search for real neighbors. Default value: 1.</param>
            <param name="inMaxDistance">Maximal distance from another point to consider them real neighbors. Default value: 2.0f.</param>
            <param name="inMetric">Metric used for measuring distance between points. Default value: Z.</param>
            <param name="inMinNeighborRatio">Fraction of valid neighbors in a given radius that have to be real neighbors. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.CropPoint3DGridByPlaneProximity(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes from the grid points that are too distant from a given plane.</summary>
            <param name="inMaxDistance">Maximal distance from a given plane.</param>
        </member>
        <member name="M:avl.CropPoint3DGrid(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes from the grid points that are not contained in a given rectangular box.</summary>
        </member>
        <member name="M:avl.CropPoint3DGridToRegion(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes points that are not represented in a given region of the input grid.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.TransformPoint3DGrid(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies a general transformation expressed by a matrix to a grid of 3D points.</summary>
            <param name="inTransform">Transformation 3x3 matrix.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotatePoint3DGrid(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a grid of 3D points around an axis in 3D.</summary>
            <param name="inAxis">The rotation axis.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RescalePoint3DGrid(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the distances of grid points to a reference point.</summary>
            <param name="inReferencePoint">Point to which the distances will be changed.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslatePoint3DGrid(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a grid of points by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.FitCircle3DToHole(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.MEstimator.Type,System.Single,System.Int32,atl.Optional&lt;avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Circle3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServ">
            <summary>Fits a circle to a hole in a plane.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inClippingFactor">Multitude of standard deviation within which points are considered inliers. Default value: 2.5f.</param>
            <param name="inIterationCount">Number of iterations of outlier suppressing algorithm. Default value: 5.</param>
            <param name="inInitialPlane">Initial approximation of a plane (if available). Default value: atl::NIL.</param>
            <param name="outCircle3D">Circle fitted to a hole.</param>
            <param name="outInliers">Points matching the computed plane.</param>
            <param name="outDistances">Distances of the input points to a resulting plane.</param>
            <param name="outSignedDistanceSum">Sum of signed distances of the input points to a resulting plane.</param>
            <param name="outDistanceSum">Sum of distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistances">Squared distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistanceSum">Sum of squared distances of the input points to a resulting plane.</param>
        </member>
        <member name="M:avl.Point3DGridHole(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.MEstimator.Type,System.Single,System.Int32,atl.Optional&lt;avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.">
            <summary>Finds a biggest hole in a given section of point cloud.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inClippingFactor">Multitude of standard deviation within which points are considered inliers. Default value: 2.5f.</param>
            <param name="inIterationCount">Number of iterations of outlier suppressing algorithm. Default value: 5.</param>
            <param name="inInitialPlane">Initial approximation of a plane (if available). Default value: atl::NIL.</param>
            <param name="outHoleRegion">Region of the found hole.</param>
            <param name="outHoleCenter">Center of the found hole.</param>
            <param name="outInliers">Points matching the computed plane.</param>
            <param name="outDistances">Distances of the input points to a resulting plane.</param>
            <param name="outSignedDistanceSum">Sum of signed distances of the input points to a resulting plane.</param>
            <param name="outDistanceSum">Sum of distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistances">Squared distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistanceSum">Sum of squared distances of the input points to a resulting plane.</param>
        </member>
        <member name="M:avl.Point3DGridValidPointsRegion(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes region of locations where points are valid in a points 3D grid and where they are invalid.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outValidPointsRegion">Region of locations where points are valid.</param>
            <param name="outInvalidPointsRegion">Region of locations where points are invalid.</param>
        </member>
        <member name="M:avs.AvsFilter_GetPoint3DGridElement(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Gets the value of a single point of a point 3D grid.</summary>
            <param name="inPoint3DGrid">Input point 3D grid.</param>
            <param name="outPoint">Output point of the input grid.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessPoint3DGrid(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a point 3D grid.</summary>
            <param name="inPoint3DGrid">Input point 3D grid.</param>
            <param name="outWidth">Grid width.</param>
            <param name="outHeight">Grid height.</param>
            <param name="outPoints">Points of the grid.</param>
        </member>
        <member name="M:avs.AvsFilter_MakePoint3DGrid(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a point 3D grid structure from individual fields.</summary>
        </member>
        <member name="M:avl.GetPoint3DGridPoint_Interpolated(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns an interpolated single point of a point 3D grid.</summary>
            <param name="inPoint3DGrid">Input point 3D grid.</param>
            <param name="inOffsetX">Defines offset of the input grid along X axis.</param>
            <param name="inOffsetY">Defines offset of the input grid along Y axis.</param>
            <param name="inStepX">Defines step of the input grid along X axis. Default value: 1.0f.</param>
            <param name="inStepY">Defines step of the input grid along Y axis. Default value: 1.0f.</param>
            <param name="inX">X coordinate of the input point.</param>
            <param name="inY">Y coordinate of the input point.</param>
            <param name="inInterpolationRadius">Radius of vicinity taking into account to interpolate not existing point. Default value: 1.</param>
            <param name="outPoint">Output point.</param>
        </member>
        <member name="M:avl.TestPoint3DGrid(avl.TestPoint3DGridState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a sample 3D object.</summary>
            <param name="inDensity">Density of points in output object. Default value: 4.0f.</param>
            <param name="inScaleX">Scaling of output object on X axis. Default value: 1.0f.</param>
            <param name="inScaleY">Scaling of output object on Y axis. Default value: 1.0f.</param>
            <param name="inScaleZ">Scaling of output object on Z axis. Default value: 1.0f.</param>
            <param name="outPoint3DGrid">Output object.</param>
        </member>
        <member name="M:avl.MakePoint3DGridFromImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a Point3DGrid structure from coordinates encoded in pixels of a 3 channel image.</summary>
            <param name="inImage">Source 3 channel image with per pixel encoded XYZ coordinates.</param>
            <param name="inRoi">Region determining valid points in resulting point grid. Default value: atl::NIL.</param>
            <param name="inXOffset">Default value: 0.0D.</param>
            <param name="inXScale">Default value: 1.0D.</param>
            <param name="inYOffset">Default value: 0.0D.</param>
            <param name="inYScale">Default value: 1.0D.</param>
            <param name="inZOffset">Default value: 0.0D.</param>
            <param name="inZScale">Default value: 1.0D.</param>
        </member>
        <member name="M:avl.SkipEmptyPoint3DGrid(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point3DGrid&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input Point3DGrid has at least one point defined, then it is copied to the output; otherwise Nil is returned.</summary>
            <param name="outNotEmptyPoint3DGrid">A copy of the input grid, if it is not empty, or Nil otherwise.</param>
            <param name="outIsNotEmpty">Indication if the input grid is not empty.</param>
        </member>
        <member name="M:avl.TestShapeInShape(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a shape lies inside another one.</summary>
            <param name="inSubShape">Shape the position of which will be tested.</param>
            <param name="inShape">Shape against which the position will be tested.</param>
            <param name="outIsContained">True if whole shape lies inside the other one, false otherwise.</param>
        </member>
        <member name="M:avl.TestPointInShape(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a point lies inside a shape.</summary>
            <param name="inPoint">Point the position of which will be tested.</param>
            <param name="inShape">Shape against which the position will be tested.</param>
            <param name="outIsContained">True if point lies inside the shape, false otherwise.</param>
        </member>
        <member name="M:avl.ShapeRectangularity(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a shape divided by the area of its bounding rectangle.</summary>
        </member>
        <member name="M:avl.ShapeConvexity(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a shape divided by the area of its convex hull.</summary>
        </member>
        <member name="M:avl.ShapeCircularity(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircularityMeasure.Type!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a shape divided by the area of a circle having the same feature.</summary>
            <param name="inCircularityMeasure">Default value: RadiusPreserving.</param>
        </member>
        <member name="M:avl.ShapeEllipticAxes(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes axes of an ellipse having the same first and second order moments as the given shape.</summary>
        </member>
        <member name="M:avl.ShapeElongation(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the elongation factor of a shape (perfect circle has minimal elongation equal 1.0).</summary>
        </member>
        <member name="M:avl.ShapeOrientation(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the shape orientation as angle with value in range 0.0 - 180.0.</summary>
        </member>
        <member name="M:avl.ShapeMassCenter(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the mass center of a shape.</summary>
        </member>
        <member name="M:avl.ShapeArea(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a shape.</summary>
        </member>
        <member name="M:avl.ShapeMoment(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ShapeMomentType.Type,System.Boolean,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the selected second-order moment of a shape in regular and normalized ( divided by shape area ) variant.</summary>
        </member>
        <member name="M:avl.PathProjectionProfile(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the distance from the line to the path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inLine">Input line to project to.</param>
            <param name="outProjectionProfile">Output path projection.</param>
            <param name="diagProjectionSegments">Segments corresponding to every profile value.</param>
        </member>
        <member name="M:avl.PathAlongArc(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Axis.Type,System.Single,System.Boolean,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms a path to a coordinate system in which the 'axis' arc is vertical or horizontal.</summary>
            <param name="inPath">Input path.</param>
            <param name="inAxis">Input axis arc.</param>
            <param name="inAxisType">Type of axis the input axis arc is parallel to. Default value: Y.</param>
            <param name="inAxisCoordinate">Coordinate of the axis arc. Default value: 0.0f.</param>
            <param name="inInverse">Switches to the inverse operation. Default value: True.</param>
            <param name="outPath">Transformed path.</param>
        </member>
        <member name="M:avl.PathAlongPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Axis.Type,System.Single,System.Boolean,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms a path to a coordinate system in which the 'axis' path is vertical or horizontal.</summary>
            <param name="inPath">Input path.</param>
            <param name="inAxis">Input axis path.</param>
            <param name="inAxisType">Type of axis the input axis path is parallel to. Default value: Y.</param>
            <param name="inAxisCoordinate">Coordinate of the axis path. Default value: 0.0f.</param>
            <param name="inInverse">Switches to the inverse operation. Default value: True.</param>
            <param name="outPath">Transformed path.</param>
        </member>
        <member name="M:avl.ShiftPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.ShiftDirection.Type,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves every vertex of path along bisector of the angle between incident segments.</summary>
            <param name="inPath">Input path.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.TransposePath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Flips and rotates a path so that x-coordinates are exchanged with y-coordinates.</summary>
            <param name="inPath">Input path.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.FitPathToPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathOrientationAlignment.Type,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates and shifts a path to minimize average distance between its points and a reference path.</summary>
            <param name="inPath">Path to be aligned.</param>
            <param name="inReferencePath">Path to align to.</param>
            <param name="inPathOrientationAlignment">Determines how to align paths orientation before the main algorithm. Default value: EllipticAxes.</param>
            <param name="inIterations">Number of algorithm steps. Default value: 5.</param>
            <param name="inFirstShift">Magnitude of possible shift at the first step in pixels. Default value: 10.0f.</param>
            <param name="inFirstRotation">Magnitude of possible rotation at the first step in degrees. Default value: 10.0f.</param>
            <param name="outPath">Aligned path.</param>
            <param name="outAlignment">The coordinate system that geometrical objects defined in the context of the path should be aligned to.</param>
            <param name="outPathDistance">Average distance of characteristic points of the input path from the reference path.</param>
        </member>
        <member name="M:avl.ReversePath(avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reverses the order of points in a path.</summary>
        </member>
        <member name="M:avl.AlignPathArray(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves an array of paths from a local coordinate system to the absolute one.</summary>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
        </member>
        <member name="M:avl.RescalePathArray(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates each point of each path proportionally to its distance to a reference point.</summary>
            <param name="inReferencePoint">The point to which all distances change linearly (the mass center by default). Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.CropPathArray(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an array of paths contained in a box from another array of paths.</summary>
        </member>
        <member name="M:avl.RotatePathArray(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates an array of paths clockwise around a center point.</summary>
            <param name="inCenter">Center of rotation (the mass center by default). Default value: atl::NIL.</param>
            <param name="inAngle">Clockwise rotation angle.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslatePathArray(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates an array of paths by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.AlignPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves a path from a local coordinate system to the absolute one.</summary>
            <param name="inPath">Input path.</param>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
        </member>
        <member name="M:avl.RescalePath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates each point of a path proportionally to its distance to a reference point.</summary>
            <param name="inPath">Input path.</param>
            <param name="inReferencePoint">The point to which all distances change linearly (the mass center by default). Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.CropPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a path contained in a box from another path.</summary>
            <param name="inPath">Input path.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.RotatePath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a path clockwise around a center point.</summary>
            <param name="inPath">Input path.</param>
            <param name="inCenter">Center of rotation (the mass center by default). Default value: atl::NIL.</param>
            <param name="inAngle">Clockwise rotation angle.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.TranslatePath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a path by a vector.</summary>
            <param name="inPath">Input path.</param>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.PathToPathMaximumDistance(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathDistanceMode.Type,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the distance between the farthest point of the input path from the other path.</summary>
            <param name="inPath1">First input path.</param>
            <param name="inPath2">Second input path.</param>
            <param name="inPathDistanceMode">Distance measuring method.</param>
            <param name="inResolution">Default value: 1.0f.</param>
            <param name="outDistance">Distance between farthest point of the input path the other input path.</param>
            <param name="outConnectingSegment">Segment connecting input paths having such distance.</param>
        </member>
        <member name="M:avl.PathToPathDistanceProfile(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathDistanceMode.Type,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the profile of distances between two paths.</summary>
            <param name="inPath1">First input path.</param>
            <param name="inPath2">Second input path.</param>
            <param name="inPathDistanceMode">Distance measuring method.</param>
            <param name="inResolution">Default value: 1.0f.</param>
            <param name="outDistanceProfile">Profile of distances between second path and consecutive points of first path.</param>
            <param name="outDistances">Distances between second path and consecutive points of first path.</param>
            <param name="outConnectingSegments">Segments connecting second path and consecutive points of first path having minimal length.</param>
        </member>
        <member name="M:avl.PathToPathDistance(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathDistanceMode.Type,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the minimum distance between two paths.</summary>
            <param name="inPath1">First input path.</param>
            <param name="inPath2">Second input path.</param>
            <param name="inPathDistanceMode">Distance measuring method.</param>
            <param name="inResolution">Default value: 1.0f.</param>
            <param name="outDistance">Minimal distance between input paths.</param>
            <param name="outConnectingSegment">Segment connecting input paths having minimal length.</param>
        </member>
        <member name="M:avl.PathToLineDistanceProfile(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the profile of distances between a line and the characteristic points of a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inLine">Input line.</param>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
            <param name="outDistanceProfile">Profile of distances between input line and consecutive points of input path.</param>
            <param name="outDistances">Distances between input line and consecutive points of input path.</param>
            <param name="outConnectingSegments">Segments connecting input line and consecutive points of input path having minimal length.</param>
        </member>
        <member name="M:avl.PathToLineDistance(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest distance between a path and a line.</summary>
            <param name="inPath">Input path.</param>
            <param name="inLine">Input line.</param>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
            <param name="outDistance">Minimal distance between input path and input line.</param>
            <param name="outConnectingSegment">Segment connecting input path and input line having minimal length.</param>
        </member>
        <member name="M:avl.PathToPointDistanceProfile(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the profile of distances between the specified point and the characteristic points of a path.</summary>
            <param name="inPoint">Input point.</param>
            <param name="inPath">Input path.</param>
            <param name="inResolution">Default value: 1.0f.</param>
            <param name="outDistanceProfile">Profile of distances between input point and consecutive points of input path.</param>
            <param name="outDistances">Distances between input point and consecutive points of input path.</param>
            <param name="outConnectingSegments">Segments connecting input point and consecutive points of input path.</param>
        </member>
        <member name="M:avl.PathToPointDistance(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest distance between a path and a point.</summary>
            <param name="inPoint">Input point.</param>
            <param name="inPath">Input path.</param>
            <param name="inResolution">Default value: 1.0f.</param>
            <param name="outDistance">Minimal distance between input path and input point.</param>
            <param name="outConnectingSegment">Segment connecting input path and input point having minimal length.</param>
        </member>
        <member name="M:avl.SmoothPath_Gauss(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths a path by averaging its characteristic points within a kernel using gaussian-weighted average.</summary>
            <param name="inPath">Input path.</param>
            <param name="inStdDev">Smoothing standard deviation. Default value: 0.6f.</param>
            <param name="inKernelRelativeSize">A multiple of the standard deviation determining the size of the kernel. Default value: 3.0f.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.SmoothPath_Mean(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths a path by averaging its characteristic points within a kernel.</summary>
            <param name="inPath">Input path.</param>
            <param name="inKernelRadius">Default value: 3.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.RemovePathSelfIntersections(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes all self-intersections from a given path.</summary>
            <param name="inPath">Input path.</param>
            <param name="outPath">Path with no self-intersections.</param>
        </member>
        <member name="M:avl.CreateBicircularCurve(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a bicircular curve passing through the points of the leading path.</summary>
            <param name="inLeadingPath">The path that will have its corners rounded.</param>
            <param name="inInterpolationPointCount">Number of points used for interpolation between each pair of points on the input path. Default value: 8.</param>
            <param name="outBicircularCurve">A smooth output path.</param>
        </member>
        <member name="M:avl.SegmentPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.PathSegmentationMode.Type,atl.Optional&lt;System.Single&gt;,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Arc2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits a path into parts that can be approximated as segments or arcs.</summary>
            <param name="inPath">Path to be segmented.</param>
            <param name="inSmoothingStdDev">Standard deviation used for initial gaussian smoothing of the segmented path.</param>
            <param name="inMaxDeviation">Maximal distance between any point of a classified segment to the abstract shape. Default value: 0.5f.</param>
            <param name="inSegmentationMode">Whether to use arcs for segmentation.</param>
            <param name="inMaxArcRadius">Maximal radius of an arc fitted to segment. Default value: 10.0f.</param>
            <param name="outStraight">Parts classified as straight segments.</param>
            <param name="outArciform">Parts classified as arciform segments.</param>
            <param name="outSegments">Segments corresponding to sections of path from outStraight.</param>
            <param name="outArcs">Arcs corresponding to sections of path from outArciform.</param>
        </member>
        <member name="M:avl.ConvertToEquidistantPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.EquidistanceType.Type,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new path whose characteristic points lie on the input path, but are equally spaced.</summary>
            <param name="inPath">Input path.</param>
            <param name="inStep">Requested distance between consecutive points. Default value: 1.0f.</param>
            <param name="inEquidistanceType">Defines how the distance is measured.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.ReducePath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reduces the number of points in a path preserving its shape with the specified precision.</summary>
            <param name="inPath">Input path.</param>
            <param name="inMaxDistance">Maximum distance between (possibly removed in the process) characteristic point of the input path and the output path. Default value: 0.5f.</param>
            <param name="outPath">Reduced path.</param>
            <param name="diagIntermediatePaths">Intermediate results on all levels of recursion of the Ramer algorithm.</param>
        </member>
        <member name="M:avl.PathBoundingRectangle_Deprecated(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,avl.BoundingRectangleFeature.Type,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle (can be rotated) containing a path.</summary>
            <param name="inPath">Input array of points.</param>
            <param name="inRectangleOrientation">Expected orientation of the resulting rectangle. Default value: atl::NIL.</param>
            <param name="inBoundingRectangleFeature">Determines what kind of bounding rectangle will be computed. Default value: MinimalArea.</param>
            <param name="outBoundingRectangle">The smallest bounding rectangle of the input path.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.PathSelfIntersections(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Checks if a path has any self-intersections and computes all of them.</summary>
            <param name="inPath">Input path.</param>
            <param name="outFirstSegmentIndices">First indices of the segments of the path which generate found intersection points.</param>
            <param name="outSecondSegmentIndices">Second indices of the segments of the path which generate found intersection points.</param>
        </member>
        <member name="M:avl.PathArrayPoints(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an array of paths to an array of points.</summary>
        </member>
        <member name="M:avl.PathConvexHull(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest convex shape that contains the given path.</summary>
            <param name="inPath">Input path.</param>
            <param name="outConvexHull">A closed path representing the computed convex hull.</param>
        </member>
        <member name="M:avl.PathDiameter(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds the longest segment connecting two characteristic points of a path.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathBoundingParallelogram(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BoundingRectangleFeature.Type,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest parallelogram containing a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inBoundingParallelogramFeature">Determines what kind of bounding parallelogram will be computed. Default value: MinimalArea.</param>
            <param name="outBoundingParallelogram">Smallest bounding parallelogram of the input points.</param>
            <param name="outCenter">Center of the bounding parallelogram.</param>
            <param name="outLongSide">Length of the bounding parallelogram long side.</param>
            <param name="outShortSide">Length of the bounding parallelogram short side.</param>
            <param name="outAngle">Angle of the bounding parallelogram.</param>
        </member>
        <member name="M:avl.PathBoundingRectangle_OrNil(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BoundingRectangleFeature.Type,System.Single,avl.RectangleOrientation.Type,atl.Conditional&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest rectangle containing a path; returns NIL when the path is empty.</summary>
            <param name="inPath">Input path.</param>
            <param name="inBoundingRectangleFeature">Determines what kind of bounding rectangle will be computed. Default value: MinimalArea.</param>
            <param name="inReferenceAngle">The middle angle of the valid range of the output rectangle's angle. Default value: 0.0f.</param>
            <param name="inRectangleOrientation">Orientation of the output rectangle. Default value: Horizontal.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input path.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.PathBoundingRectangle(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BoundingRectangleFeature.Type,System.Single,avl.RectangleOrientation.Type,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle containing a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inBoundingRectangleFeature">Determines what kind of bounding rectangle will be computed. Default value: MinimalArea.</param>
            <param name="inReferenceAngle">The middle angle of the valid range of the output rectangle's angle. Default value: 0.0f.</param>
            <param name="inRectangleOrientation">Orientation of the output rectangle. Default value: Horizontal.</param>
            <param name="outBoundingRectangle">The smallest bounding rectangle of the input path.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.PathBoundingRectangle_FixedAngle_OrNil(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Conditional&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest rectangle with the given orientation angle containing a path; returns NIL when the path is empty.</summary>
            <param name="inPath">Input path.</param>
            <param name="inAngle">Expected angle of the resulting rectangle.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input path.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.PathBoundingRectangle_FixedAngle(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle with the given orientation angle containing a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inAngle">Expected angle of the resulting rectangle.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input path.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.PathBoundingBox_OrNil(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Box&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box containing a path; returns NIL if the path is empty.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathBoundingBox(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box containing a path.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathBoundingCircle_OrNil(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Circle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest circle enclosing a path; returns NIL if the path is empty.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathBoundingCircle(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest circle enclosing a path.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathTurnAngleMaximum_OrNil(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.TurnAngleDirection.Type,avl.TurnAnglePrecision.Type,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the maximum of the profile of turn angles of a path; returns NIL if the path has no turn angles.</summary>
            <param name="inPath">Input path.</param>
            <param name="inAllowedTurnDirection">Allows to detect only left-turns, only right-turns or both. Default value: All.</param>
            <param name="inResultPrecision">Switches between pixel-precise or subpixel-precise detection of the found maximum.</param>
            <param name="outMaximumTurnAngleIndex">Index of found maximum.</param>
            <param name="outMaximumTurnAnglePoint">Found point of a path with maximum turn angle.</param>
            <param name="outMaximumTurnAngleAngle">Maximal turn angle of the input path.</param>
        </member>
        <member name="M:avl.PathTurnAngleMaximum(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.TurnAngleDirection.Type,avl.TurnAnglePrecision.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the maximum of the profile of turn angles of a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inAllowedTurnDirection">Allows to detect only left-turns, only right-turns or both. Default value: All.</param>
            <param name="inResultPrecision">Switches between pixel-precise or subpixel-precise detection of the found maximum.</param>
            <param name="outMaximumTurnAngleIndex">Index of found maximum.</param>
            <param name="outMaximumTurnAnglePoint">Found point of a path with maximum turn angle.</param>
            <param name="outMaximumTurnAngleAngle">Maximal turn angle of the input path.</param>
        </member>
        <member name="M:avl.PathTurnAngleLocalMaxima(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.TurnAngleDirection.Type,avl.TurnAnglePrecision.Type,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the local maxima of the profile of turn angles of a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inAllowedTurnDirection">Allows to detect only left-turns, only right-turns or both. Default value: All.</param>
            <param name="inResultPrecision">Switches between pixel-precise or subpixel-precise detection of the found maxima.</param>
            <param name="inMinTurnAngle">Minimal value of a relevant angle. Default value: 30.0f.</param>
            <param name="inMinDistance">Minimal distance on the path between two local maxima assuming each path segment has unit length. Default value: 0.0f.</param>
            <param name="inSmoothingStdDev">Standard deviation of the gaussian smoothing applied to the input path. Default value: 0.6f.</param>
            <param name="outTurnAngleMaximaIndices">Indices of found local maxima.</param>
            <param name="outTurnAngleMaximaPoints">Found local maxima of turn angle profile of the smoothed input path.</param>
            <param name="outTurnAngleMaximaAngles">Turn angles of found local maxima.</param>
            <param name="diagSmoothedPath">Input path smoothed with gaussian kernel.</param>
            <param name="diagTurnAngleProfile">Profile of turn angles at characteristic points of the smoothed input path.</param>
        </member>
        <member name="M:avl.PathAverageTurnAngle(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average absolute turn angle of a path per unit of length.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathTurnAngleProfile(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the profile of turn angles at characteristic points of a path.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathEndpoints(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the two endpoints of a path.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathLength(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the total length of the input path.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathSize(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the number of characteristic points on the input path.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathMassCenter_OrNil(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average of the path points (all, not only characteristic ones); returns NIL if the path is empty.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathMassCenter(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average of the path points (all, not only characteristic ones).</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.PathSegments(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a path to an array of line segments.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.SplitPathByLine(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits path in common points of a path and a line.</summary>
            <param name="inPath">Path being split.</param>
            <param name="inLine">Line used for splitting.</param>
            <param name="outPaths">Paths arisen from splitting the initial path.</param>
        </member>
        <member name="M:avl.SplitPathBySegment(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits path in common points of a path and a segment.</summary>
            <param name="inPath">Path being split.</param>
            <param name="inSegment">Segment used for splitting.</param>
            <param name="outPaths">Paths arisen from splitting the initial path.</param>
        </member>
        <member name="M:avl.SplitPathByPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits path in common points of two paths.</summary>
            <param name="inPath1">Path being split.</param>
            <param name="inPath2">Path used for splitting.</param>
            <param name="outPaths">Paths arisen from splitting the initial path.</param>
        </member>
        <member name="M:avl.JoinAdjacentPaths(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Joins those paths of an array which endpoints lie near enough.</summary>
            <param name="inMaxJoiningDistance">Maximal distance between edges that can be joined. Default value: 10.0f.</param>
            <param name="inMaxJoiningAngle">Maximal allowed angle between edges being joined. Default value: 30.0f.</param>
            <param name="inJoiningDistanceBalance">Determines how important distance between paths is according to their angle difference. Default value: 1.0f.</param>
            <param name="inJoiningEndingLength">Determines the length of the path end used for path angle computing. Default value: atl::NIL.</param>
            <param name="inMinPathLength">Minimal length of a path. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.PathLineIntersections(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the common points of a path and a line.</summary>
            <param name="inPath">Input path.</param>
            <param name="inLine">Input line.</param>
            <param name="outIntersectionPoints">Intersections between the path and the line.</param>
            <param name="outSegmentIndices">Indices of the segments of the path which generate found intersection points.</param>
        </member>
        <member name="M:avl.PathSegmentIntersections(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the common points of a path and a segment.</summary>
            <param name="inPath">Input path.</param>
            <param name="inSegment">Input segment.</param>
            <param name="outIntersectionPoints">Intersections between the path and the segment.</param>
            <param name="outSegmentIndices">Indices of the segments of the path which generate found intersection points.</param>
        </member>
        <member name="M:avl.PathPathIntersections(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the common points of two paths.</summary>
            <param name="inPath1">Input path.</param>
            <param name="inPath2">Input path.</param>
            <param name="outIntersectionPoints">Intersections between the input paths.</param>
            <param name="outSegmentIndices1">Indices of the segments of the first path which generate found intersection points.</param>
            <param name="outSegmentIndices2">Indices of the segments of the second path which generate found intersection points.</param>
        </member>
        <member name="M:avl.AveragePath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average of two paths (of equal size and type) point by point.</summary>
            <param name="inPath1">Input path.</param>
            <param name="inPath2">Input path.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.ConcatenatePaths_OfLoop(avl.ConcatenatePaths_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Joins open paths appearing in consecutive iterations.</summary>
            <param name="inPath">Input path.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.ConcatenatePaths_OfArray(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Joins open paths of an array.</summary>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.ConcatenatePaths(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Joins two open paths.</summary>
            <param name="inPath1">Input path.</param>
            <param name="inPath2">Input path.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.GetMaximumPath_OrNil(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFeature.Type,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the path from the input array that corresponds to the largest computed feature value; returns NIL if the array or any path inside it is empty.</summary>
            <param name="inPaths">Input paths.</param>
            <param name="inFeature">Path feature value to be computed.</param>
            <param name="outPath">Output path.</param>
            <param name="outValue">Computed feature value of the output path.</param>
        </member>
        <member name="M:avl.GetMaximumPath(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFeature.Type,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the path from the input array that corresponds to the largest computed feature value.</summary>
            <param name="inPaths">Input paths.</param>
            <param name="inFeature">Path feature value to be computed.</param>
            <param name="outPath">Output path.</param>
            <param name="outValue">Computed feature value of the output path.</param>
        </member>
        <member name="M:avl.GetMinimumPath_OrNil(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFeature.Type,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the path from the input array that corresponds to the smallest computed feature value; returns NIL if the array or any path inside it is empty.</summary>
            <param name="inPaths">Input paths.</param>
            <param name="inFeature">Path feature value to be computed.</param>
            <param name="outPath">Output path.</param>
            <param name="outValue">Computed feature value of the output path.</param>
        </member>
        <member name="M:avl.GetMinimumPath(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFeature.Type,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Returns the path from the input array that corresponds to the smallest computed feature value.</summary>
            <param name="inPaths">Input paths.</param>
            <param name="inFeature">Path feature value to be computed.</param>
            <param name="outPath">Output path.</param>
            <param name="outValue">Computed feature value of the output path.</param>
        </member>
        <member name="M:avl.SortPaths(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFilter.Type,avl.PathFeature.Type,avl.SortingOrder.Type,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Changes the order of paths from the input array accordingly to an ascending/descending sequence of their computed feature values.</summary>
            <param name="inPaths">Input paths.</param>
            <param name="inPathFilter">Determines which paths will take part in computation.</param>
            <param name="inFeature">Path feature value to be computed.</param>
            <param name="inSortingOrder">Sorting order.</param>
            <param name="outSortedPaths">Paths sorted according to the computed feature values.</param>
            <param name="outSortedValues">Computed feature values.</param>
        </member>
        <member name="M:avl.MakePathConditional(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFeature.Type,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes path feature and checks whether its value is in range.</summary>
            <param name="inPath">Input path.</param>
            <param name="inFeature">Path feature value to be computed.</param>
            <param name="inMinimum">Lowest value of the range. Default value: atl::NIL.</param>
            <param name="inMaximum">Highest value of the range. Default value: atl::NIL.</param>
            <param name="outConditionalPath">The path if the condition is met or nothing otherwise.</param>
        </member>
        <member name="M:avl.ClassifyPaths(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFilter.Type,avl.PathFeature.Type,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Splits the paths of the input array - in accordance to the relation between computed feature values and the specified range.</summary>
            <param name="inPaths">Input paths.</param>
            <param name="inPathFilter">Determines which paths will take part in computation.</param>
            <param name="inFeature">Path feature value to be computed.</param>
            <param name="inMinimum">Lowest value of the range. Default value: atl::NIL.</param>
            <param name="inMaximum">Highest value of the range. Default value: atl::NIL.</param>
            <param name="outAccepted">Paths with feature values matching the range.</param>
            <param name="outRejected">Paths with feature values outside the range.</param>
            <param name="outBelow">Paths with feature values lower than inMinimum.</param>
            <param name="outAbove">Paths with feature values higher than inMaximum.</param>
            <param name="outValues">Computed feature values.</param>
        </member>
        <member name="M:avl.SelectInnerPaths(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects paths which are visible from a point.</summary>
            <param name="inPaths">Input paths from which the inner ones will be selected.</param>
            <param name="inCenterPoint">Reference point used to determine path visibility.</param>
            <param name="inTolerance">Fraction of the path characteristic points that are allowed to be invisible from the inCenterPoint not rendering the path not-inner. Default value: 0.0f.</param>
            <param name="outInnerPaths">Paths classified as inner.</param>
        </member>
        <member name="M:avl.SelectOuterPaths(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects paths which do not obstruct visibility of other paths from a point.</summary>
            <param name="inPaths">Input paths from which the outer ones will be selected.</param>
            <param name="inCenterPoint">Reference point used to determine path visibility.</param>
            <param name="inTolerance">Fraction of the path sections that are allowed to obstruct visibility of other paths not rendering the path not-outer. Default value: 0.0f.</param>
            <param name="outOuterPaths">Paths classified as outer.</param>
        </member>
        <member name="M:avl.SelectClosedPaths(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects paths which are closed.</summary>
            <param name="inPaths">Input paths.</param>
            <param name="outClosedPaths">Paths classified as closed.</param>
        </member>
        <member name="M:avl.SelectOpenPaths(atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects paths which are open.</summary>
            <param name="inPaths">Input paths.</param>
            <param name="outOpenPaths">Paths classified as open.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="outPoints">Output points of the path.</param>
            <param name="outClosed">Output whether the path is closed.</param>
        </member>
        <member name="M:avs.AvsFilter_MakePath(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a path structure.</summary>
            <param name="inPoints">Input points of the path.</param>
            <param name="inClosed">Input whether the path is closed.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.LoadPath(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized Path object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outPath">Deserialized output Path.</param>
        </member>
        <member name="M:avl.SavePath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized Path object as avdata file.</summary>
            <param name="inPath">Path to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.SkipNotShape(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input path is closed and has no self-intersections, then it is copied to the output; otherwise Nil is returned.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.SkipEmptyPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input path has at least one point, then it is copied to the output; otherwise Nil is returned.</summary>
            <param name="inPath">Input path.</param>
            <param name="outNotEmptyPath">A copy of the input path, if it is not empty, or Nil otherwise.</param>
            <param name="outIsNotEmpty">Indication if the input path is not empty.</param>
        </member>
        <member name="M:avl.Subpath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes an open path that consists of contiguous subsequence of another path points.</summary>
            <param name="inPath">Input path.</param>
            <param name="inStart">Index of the first point of the subpath.</param>
            <param name="inPointCount">Number of points in the subpath. Default value: 1.</param>
            <param name="outPath">The resulting subpath.</param>
        </member>
        <member name="M:avl.ClosePath(avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds the segment connecting last point to the first one to a path.</summary>
        </member>
        <member name="M:avl.OpenPath(avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes the segment connecting last point to the first one from a path.</summary>
        </member>
        <member name="M:avl.GetPathSegment(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the selected segment of a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inInverse">Reversed order of segments.</param>
        </member>
        <member name="M:avl.GetPointOnPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a path point of desired distance (measured along path) from the first point of the path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inDistanceAlongPath">Distance along path from the first characteristic point to the desired point.</param>
        </member>
        <member name="M:avl.GetPathCharacteristicPoint_Interpolated(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns linear interpolation between two consecutive characteristic points of a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inIndex">Real-valued point index; fractional values result in interpolation.</param>
        </member>
        <member name="M:avl.GetPathCharacteristicPoint(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the selected characteristic point of a path.</summary>
            <param name="inPath">Input path.</param>
            <param name="inIndex">Index of a point of the input path.</param>
            <param name="inInverse">Reversed order of points.</param>
        </member>
        <member name="M:avl.CreateRectanglePath(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a closed path containing four vertices of rectangle.</summary>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.CreateEllipsePath(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Int32,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a closed path containing elliptical, equidistant points.</summary>
            <param name="inPointCount">Number of points in the resulting path. Default value: 8.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.CreateCirclePath(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a closed path containing cocircular, equidistant points.</summary>
            <param name="inPointCount">Number of points in the resulting path. Default value: 8.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.CreateArcPath(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an open path containing cocircular, equidistant points.</summary>
            <param name="inPointCount">Number of points in the resulting path. Default value: 8.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.CreateSegmentPath(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an open path containing collinear, equidistant points.</summary>
            <param name="inBegin">First point of the path.</param>
            <param name="inEnd">Last point of the path.</param>
            <param name="inPointCount">Number of points in the created path. Default value: 2.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.AppendPointToPath(avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Appends a point to a path.</summary>
            <param name="inPoint">Input point.</param>
        </member>
        <member name="M:avl.ResizePixelVectors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rescales an image treating pixels as vectors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inVectorLength">Desired vector length after normalization. Default value: 255.0f.</param>
            <param name="outImage">Rescaled image.</param>
        </member>
        <member name="M:avl.RotatePixelVectors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates image gradients.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.NormalizePixelVectors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GradientAngleRange.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adjusts gradient angles to a given range.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MeasurePixelVectors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes gradient magnitudes of an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.EnumerateImageTiles(avl.EnumerateImageTilesState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Enumerates tiles from image.</summary>
            <param name="inImage">Image to be enumerated.</param>
            <param name="inTileWidth">Tile width. Default value: 1.</param>
            <param name="inTileHeight">Tile height. Default value: atl::NIL.</param>
            <param name="inOverflowControl">Allow overflow.</param>
        </member>
        <member name="M:avl.JoinImageTiles(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Joins previously cut tiles into single image.</summary>
            <param name="inImages">Array of image tiles.</param>
            <param name="inRowCount">Defines how many output image rows there are in inImages.</param>
            <param name="inColumnCount">Defines how many images builds one row in inImages.</param>
            <param name="outJoinedImage">Glued image.</param>
        </member>
        <member name="M:avl.CutImageIntoTiles(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Generates array of image tiles, which are cut from inImage.</summary>
            <param name="inImage">Image to be cut into tiles.</param>
            <param name="inTileWidth">Demanded tile width. Default value: 1.</param>
            <param name="inTileHeight">Demanded tile height; equals inTileWidth when set to Auto. Default value: atl::NIL.</param>
            <param name="inHorizontalStep">Defines horizontal space between consecutive tiles; defaults to tile width. Can be used to produce overlapping tiles. Default value: atl::NIL.</param>
            <param name="inVerticalStep">Defines vertical space between consecutive tiles; defaults to tile height. Can be used to produce overlapping tiles. Default value: atl::NIL.</param>
            <param name="inOverflowControl">When set to true, overflowing tiles will be removed form outTiles array.</param>
            <param name="outImageTiles">Resulting image tiles.</param>
        </member>
        <member name="M:avl.CreateImageTiles_AsRegions(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Generates array of Regions, which divide image in, potentially overlapping, tiles.</summary>
            <param name="inImageFormat">Format of image for which tiles will be produced.</param>
            <param name="inTileWidth">Demanded tile width. Default value: 1.</param>
            <param name="inTileHeight">Demanded tile height; equals inTileWidth when set to Auto. Default value: atl::NIL.</param>
            <param name="inHorizontalStep">Defines horizontal space between consecutive tiles; defaults to tile width. Can be used to produce overlapping tiles. Default value: atl::NIL.</param>
            <param name="inVerticalStep">Defines vertical space between consecutive tiles; defaults to tile height. Can be used to produce overlapping tiles. Default value: atl::NIL.</param>
            <param name="inOverflowControl">When set to true, overflowing tiles will be removed form outTiles array. Default value: False.</param>
            <param name="outTiles">Array containing produced tiles.</param>
            <param name="outRowCount">Number of generated tiles rows.</param>
            <param name="outColumnCount">Number of generated tiles per row.</param>
        </member>
        <member name="M:avl.CreateImageTiles_AsBoxes(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Box&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Generates array of Boxes, which divide image in, potentially overlapping, tiles.</summary>
            <param name="inImageFormat">Format of image for which tiles will be produced.</param>
            <param name="inTileWidth">Demanded tile width. Default value: 1.</param>
            <param name="inTileHeight">Demanded tile height; equals inTileWidth when set to Auto. Default value: atl::NIL.</param>
            <param name="inHorizontalStep">Defines horizontal space between consecutive tiles; defaults to tile width. Can be used to produce overlapping tiles. Default value: atl::NIL.</param>
            <param name="inVerticalStep">Defines vertical space between consecutive tiles; defaults to tile height. Can be used to produce overlapping tiles. Default value: atl::NIL.</param>
            <param name="inOverflowControl">When set to true, overflowing tiles will be removed form outTiles array. Default value: False.</param>
            <param name="outTiles">Array containing produced tiles.</param>
            <param name="outRowCount">Number of generated tiles rows.</param>
            <param name="outColumnCount">Number of generated tiles per row.</param>
        </member>
        <member name="M:avl.SelectThresholdValue(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.ThresholdSelectionMethod.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects best threshold value using the image histogram.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inMethod">Method used to select the best threshold.</param>
            <param name="outThresholdValue">Best threshold separating background pixels from foreground pixels.</param>
            <param name="diagThresholdRatings">Contains ratings gained if that threshold would be chosen.</param>
            <param name="diagBackgroundPixelsFraction">Fraction of pixels that are darker than the index value.</param>
            <param name="diagForegroundPixelsFraction">Fraction of pixels that are brighter than the index value.</param>
        </member>
        <member name="M:avl.ThresholdImage_Hysteresis(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Thresholds an image with a hysteresis, i.e. with a lower threshold for neighboring pixels.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inMinValue">Minimum value of a pixel that is considered foreground (Auto = -INF). Default value: 128.0f.</param>
            <param name="inMaxValue">Maximum value of a pixel that is considered foreground (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inHysteresis">Defines how much the threshold criteria are lowered for pixels neighboring with other foreground pixels. Default value: 16.0f.</param>
        </member>
        <member name="M:avl.ThresholdToRegion_Color(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a region containing image pixels with values close to the given color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inRgbColor">Color to compare the image to.</param>
            <param name="inChromaAmount">Proportion of chromatic information in distance computation. Default value: 0.7f.</param>
            <param name="inMaxDifference">Maximum difference between image pixel and model color. Default value: 5.0f.</param>
            <param name="inHysteresis">Defines how much the difference criterium is lowered for pixels neighboring with other foreground pixels. Default value: 0.0f.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ThresholdToRegion_RGB(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a region containing image pixels which belongs to the specified range for each individual pixel component.</summary>
            <param name="inRgbImage">Input image, usually in the RGB color space.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inMinRed">Minimum for the first pixel component, usually Red (Auto = -INF). Default value: 128.</param>
            <param name="inMaxRed">Maximum for the first pixel component, usually Red (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inMinGreen">Minimum for the second pixel component, usually Green (Auto = -INF). Default value: 128.</param>
            <param name="inMaxGreen">Maximum for the second pixel component, usually Green (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inMinBlue">Minimum for the third pixel component, usually Blue (Auto = -INF). Default value: 128.</param>
            <param name="inMaxBlue">Maximum for the third pixel component, usually Blue (Auto = +INF). Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ThresholdToRegion_HSx(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.HSxColorModel.Type!System.Runtime.CompilerServices.IsConst,System.Int32,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a region containing image pixels which belongs to specified region in HSV, HSL or HSI space.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inColorModel">Selected color model.</param>
            <param name="inBeginHue">Lowest acceptable Hue; if higher than inEndHue, then range wrapping is used. Default value: 0.</param>
            <param name="inEndHue">Highest acceptable Hue, if lower than inBeginHue, then range wrapping is used. Default value: 255.</param>
            <param name="inMinSaturation">Default value: 128.</param>
            <param name="inMinBrightness">Minimum brightness; denotes V, L or I, depending on inColorModel. Default value: 128.</param>
            <param name="inMaxBrightness">Maximum brightness; denotes V, L or I, depending on inColorModel. Default value: atl::NIL.</param>
            <param name="outRegion">Output region.</param>
            <param name="diagHSxImage">Diagnostic image in HSx color space.</param>
        </member>
        <member name="M:avl.ThresholdToRegion_Dynamic(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Thresholds an image relatively to the average pixel value in a local rectangular neighborhood.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region in which pixels are written. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Region from which pixels are read. Default value: atl::NIL.</param>
            <param name="inRadiusX">Horizontal radius of internal mean blur. Default value: 5.</param>
            <param name="inRadiusY">Vertical radius of internal mean blur (Auto = inRadiusX). Default value: atl::NIL.</param>
            <param name="inMinRelativeValue">Minimum relative value of a pixel that is considered foreground (Auto = -INF). Default value: 5.0f.</param>
            <param name="inMaxRelativeValue">Maximum relative value of a pixel that is considered foreground (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inHysteresis">Defines how much the threshold criteria are lowered for pixels neighboring with other foreground pixels. Default value: 0.0f.</param>
            <param name="outRegion">Output region.</param>
            <param name="diagBaseImage">Diagnostic blurred image.</param>
        </member>
        <member name="M:avl.ThresholdToRegion_Relative(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Thresholds an image with a different threshold value for each pixel (inBaseImage(x, y) + inValue).</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inBaseImage">Pixels of this image are subtracted from inImage before thresholding.</param>
            <param name="inMinRelativeValue">Minimum relative value of a pixel that is considered foreground (Auto = -INF). Default value: 128.0f.</param>
            <param name="inMaxRelativeValue">Maximum relative value of a pixel that is considered foreground (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inHysteresis">Defines how much the threshold criteria are lowered for pixels neighboring with other foreground pixels. Default value: 0.0f.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ThresholdToRegion(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a region containing image pixels with values within the specified range.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inMinValue">Minimum value of a pixel that is considered foreground (Auto = -INF). Default value: 128.0f.</param>
            <param name="inMaxValue">Maximum value of a pixel that is considered foreground (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inHysteresis">Defines how much the threshold criteria are lowered for pixels neighboring with other foreground pixels. Default value: 0.0f.</param>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ThresholdImage_Color(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms each pixel value to maximum or minimum depending on the distance from a given color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inRgbColor">Color to compare the image to.</param>
            <param name="inChromaAmount">Proportion of chromatic information in distance computation. Default value: 0.7f.</param>
            <param name="inMaxDifference">Maximum difference between image pixel and model color. Default value: 5.0f.</param>
            <param name="inFuzziness">A tolerance for computed difference that results in intermediate output values. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ThresholdImage_RGB(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms each pixel value to minimum or maximum depending on whether it belongs to the specified range for each individual pixel component.</summary>
            <param name="inRgbImage">Input image, usually in the RGB color space.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inMinRed">Minimum for the first pixel component, usually Red (Auto = -INF). Default value: 128.</param>
            <param name="inMaxRed">Maximum for the first pixel component, usually Red (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inMinGreen">Minimum for the second pixel component, usually Green (Auto = -INF). Default value: 128.</param>
            <param name="inMaxGreen">Maximum for the second pixel component, usually Green (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inMinBlue">Minimum for the third pixel component, usually Blue (Auto = -INF). Default value: 128.</param>
            <param name="inMaxBlue">Maximum for the third pixel component, usually Blue (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inFuzziness">Tolerance for the ranges that results in intermediate output values.</param>
        </member>
        <member name="M:avl.ThresholdImage_HSx(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.HSxColorModel.Type,System.Int32,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms each pixel value to minimum or maximum depending on whether it belongs to specified region in the HSV, HSL or HSI color space.</summary>
            <param name="inRgbImage">Input image in the RGB color space.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inColorModel">Selected color model.</param>
            <param name="inBeginHue">Lowest acceptable Hue; if higher than inEndHue, then range wrapping is used. Default value: 0.</param>
            <param name="inEndHue">Highest acceptable Hue, if lower than inBeginHue, then range wrapping is used. Default value: 255.</param>
            <param name="inMinSaturation">Default value: 128.</param>
            <param name="inMinBrightness">Minimum brightness; denotes V, L or I, depending on inColorModel. Default value: 128.</param>
            <param name="inMaxBrightness">Maximum brightness; denotes V, L or I, depending on inColorModel. Default value: atl::NIL.</param>
            <param name="inFuzziness">Tolerance for value ranges that results in intermediate output values.</param>
            <param name="diagHSxImage">Image in HSx color space.</param>
        </member>
        <member name="M:avl.ThresholdImage_DynamicWithBase(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.ThresholdDynamicReferenceMethod.Type,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Thresholds an image relatively to some value calculated in a local rectangular neighbourhood.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region in which pixels are written. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Region from which pixels are read. Default value: atl::NIL.</param>
            <param name="inReferenceMethod">Specifies how the local threshold value will be calculated (see SmoothImage filter family). Default value: Mean.</param>
            <param name="inKernel">Kernel shape. Default value: Box.</param>
            <param name="inRadiusX">Horizontal radius of local neighbourhood. Default value: 5.</param>
            <param name="inRadiusY">Vertical radius of local neighbourhood (Auto = inRadiusX). Default value: atl::NIL.</param>
            <param name="inMinRelativeValue">Minimum relative value of a pixel that is considered foreground (Auto = -INF). Default value: 0.0f.</param>
            <param name="inMaxRelativeValue">Maximum relative value of a pixel that is considered foreground (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inFuzziness">A tolerance for inMin/MaxRelativeValue that results in intermediate output values. Clamped on half of pixel max value (e.g. max fuzziness for uint8 image is 128). Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ThresholdImage_Dynamic(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.ThresholdDynamicReferenceMethod.Type,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Thresholds an image relatively to some value calculated in a local rectangular neighbourhood.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region in which pixels are written. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Region from which pixels are read. Default value: atl::NIL.</param>
            <param name="inReferenceMethod">Specifies how the local threshold value will be calculated (see SmoothImage filter family). Default value: Mean.</param>
            <param name="inKernel">Kernel shape. Default value: Box.</param>
            <param name="inRadiusX">Horizontal radius of local neighbourhood. Default value: 5.</param>
            <param name="inRadiusY">Vertical radius of local neighbourhood (Auto = inRadiusX). Default value: atl::NIL.</param>
            <param name="inMinRelativeValue">Minimum relative value of a pixel that is considered foreground (Auto = -INF). Default value: 0.0f.</param>
            <param name="inMaxRelativeValue">Maximum relative value of a pixel that is considered foreground (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inFuzziness">A tolerance for inMin/MaxRelativeValue that results in intermediate output values. Clamped on half of pixel max value (e.g. max fuzziness for uint8 image is 128). Default value: 0.0f.</param>
            <param name="diagBaseImage">Diagnostic threshold values.</param>
        </member>
        <member name="M:avl.ThresholdImage_Relative(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Thresholds an image with a different threshold value for each pixel (inBaseImage(x, y) + inValue).</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inBaseImage">Pixels of this image are subtracted from inImage before thresholding.</param>
            <param name="inMinRelativeValue">Minimum relative value of a pixel that is considered foreground (Auto = -INF). Default value: 128.0f.</param>
            <param name="inMaxRelativeValue">Maximum relative value of a pixel that is considered foreground (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inFuzziness">A tolerance for inMin/MaxRelativeValue that results in intermediate output values. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ThresholdImage_RegionOfInterest(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.RegionOfInterest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>FIXME for testing RegionOfInterest</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inMinValue">Minimum value of a pixel that is considered foreground (Auto = -INF). Default value: 128.0f.</param>
            <param name="inMaxValue">Maximum value of a pixel that is considered foreground (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inFuzziness">A tolerance for inMin/MaxValue that results in intermediate output values. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ThresholdImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms each pixel value to maximum or minimum depending on whether they belong to the specified range.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inMinValue">Minimum value of a pixel that is considered foreground (Auto = -INF). Default value: 128.0f.</param>
            <param name="inMaxValue">Maximum value of a pixel that is considered foreground (Auto = +INF). Default value: atl::NIL.</param>
            <param name="inFuzziness">A tolerance for inMin/MaxValue that results in intermediate output values. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.CreateReverseMap(avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a reverse image transform, defined by a spatial map object.</summary>
            <param name="inSpatialMap">Definition of the transformation.</param>
        </member>
        <member name="M:avl.CreateUndistortionMap_Divisional(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a spatial transform map for undistorting images using divisional model.</summary>
        </member>
        <member name="M:avl.CreateUndistortionMap(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.LensDistortion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,System.Single,avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes a spatial transform map for undistorting images from a calibrated camera.</summary>
            <param name="inMapWidth">Width of output map, default: same as example image. Default value: atl::NIL.</param>
            <param name="inMapHeight">Height of output map, default: same as example image. Default value: atl::NIL.</param>
            <param name="inMapShift">Translation from the principal point on the image plane.</param>
            <param name="inMapRotation">Rotation of the principal point on the image plane.</param>
            <param name="inCameraRotationY">Rotation of view around Y axis (a.k.a. Pan, Azimuth or Yaw).</param>
            <param name="inCameraRotationX">Rotation of view around X axis (a.k.a. Tilt, Elevation or Pitch).</param>
            <param name="inCameraRotationZ">Rotation of view around Z axis (a.k.a. Roll, Horizon).</param>
            <param name="inImageFormat">Information about dimensions, depth and pixel type of the image.</param>
            <param name="inInterpolationMethod">Default value: Bilinear.</param>
        </member>
        <member name="M:avl.CreatePerspectiveMap_Path(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Size&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!Syste">
            <summary>Creates a perspective transform map from planes defined by paths.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inImagePath">Plane defined by a closed path made of 4 points.</param>
            <param name="inTargetPath">Target plane. If NIL then image corners are used starting from (0,0) (Width, 0) (Width, Height), (0, Height). Default value: atl::NIL.</param>
            <param name="inNewSize">New image size after remapping. Default value: atl::NIL.</param>
            <param name="inInterpolationMethod">Interpolation method used in extraction of image pixel values.</param>
            <param name="outSpatialMap">Calculated spatial map.</param>
            <param name="outTransformMatrix">Used transform matrix.</param>
        </member>
        <member name="M:avl.CreatePerspectiveMap_Points(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point2D&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Size&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitly">
            <summary>Creates a perspective transform map from four points denoting a rectangle in the world coordinates.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inImagePoints">Points define real object plane corners.</param>
            <param name="inTargetPoints">Points define target plane corners. If NIL then image corners are used starting from (0,0) (Width, 0) (Width, Height), (0, Height). Default value: atl::NIL.</param>
            <param name="inNewSize">New image size after remapping. Default value: atl::NIL.</param>
            <param name="inInterpolationMethod">Interpolation method used in extraction of image pixel values.</param>
            <param name="outSpatialMap">Created SpatialMap with perspective transform.</param>
            <param name="outTransformMatrix">Used transform matrix.</param>
        </member>
        <member name="M:avl.CreateMatrixTransformMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Size&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a spatial map which performs transform defined as a matrix.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inTransformMatrix">3x3 transform matrix.</param>
            <param name="inNewSize">New image size after remapping. Default value: atl::NIL.</param>
            <param name="inInterpolationMethod">Interpolation method used in extraction of image pixel values.</param>
            <param name="outSpatialMap">Calculated spatial map.</param>
        </member>
        <member name="M:avl.CreateSphereMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,avl.InterpolationMethod.Type,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a spatial map for transformations from a sphere surface to a flat rectangle.</summary>
            <param name="inImageFormat">Information about dimensions, depth and pixel type of the image.</param>
            <param name="inSphereRectangle">Bounding rectangle of a sphere.</param>
            <param name="inSphereRadiusCorrection">How many pixels the sphere radius is larger than the visible circle radius. Default value: 0.0f.</param>
            <param name="inNewDimension">Width and height of an image created by output spatial map application. Default value: atl::NIL.</param>
            <param name="inMargin">Width of the sphere extreme points zone excluded from spatial map. Default value: 0.</param>
            <param name="inInterpolationMethod">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="outSpatialMap">Output spatial map.</param>
            <param name="outOutputRegion">Pixels set by the spatial map application.</param>
        </member>
        <member name="M:avl.CreateCylinderMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;avl.Point2D&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,avl.InterpolationMethod.Type,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a spatial map for transformations from a cylinder surface to a flat rectangle.</summary>
            <param name="inImageFormat">Information about dimensions, depth and pixel type of the image.</param>
            <param name="inCylinderRectangle">Bounding rectangle of the cylinder.</param>
            <param name="inCylinderRadiusCorrection">How many pixels the cylinder radius is larger than the visible circle radius. Default value: 0.0f.</param>
            <param name="inOpticalAxis">Coordinates of the camera optical axis (Auto = image center). Default value: atl::NIL.</param>
            <param name="inNewWidth">Width of an image created by output spatial map application. Default value: atl::NIL.</param>
            <param name="inNewHeight">Height of an image created by output spatial map application. Default value: atl::NIL.</param>
            <param name="inMargin">Width of the cylinder extreme points zone excluded from spatial map. Default value: 0.</param>
            <param name="inInterpolationMethod">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="outSpatialMap">Output spatial map.</param>
            <param name="outOutputRegion">Pixels set by the spatial map application.</param>
        </member>
        <member name="M:avl.ConvertSpatialMap_ToNearest(avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts any spatial map to NearestNeighbour interpolation.</summary>
        </member>
        <member name="M:avl.ConvertSpatialMapToMatrixMaps(avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits a spatial map into two matrices of source coordinates.</summary>
            <param name="inRoundingOpenCV">Use same interpolation convention as cvRemap.</param>
            <param name="outMatrixX">Map of real X coordinates.</param>
            <param name="outMatrixY">Map of real Y coordinates.</param>
        </member>
        <member name="M:avl.ConvertMatrixMapsToSpatialMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type,System.Boolean,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Joins two matrices of coordinates to produce a SpatialMap for use in RemapImage.</summary>
            <param name="inImageFormat">Information about dimensions, depth and pixel type of the image.</param>
            <param name="inMatrixX">Map of real X coordinates.</param>
            <param name="inMatrixY">Map of real Y coordinates.</param>
            <param name="inInterpolationMethod">Default value: Bilinear.</param>
            <param name="inRoundingOpenCV">Use same interpolation convention as cvRemap.</param>
            <param name="outSpatialMap">Output spatial map.</param>
            <param name="outOutputRegion">Pixels set by the spatial map application.</param>
        </member>
        <member name="M:avl.LoadSpatialMap(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Deserializes a SpatialMap object from a AVDATA file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outSpatialMap">Deserialized SpatialMap.</param>
        </member>
        <member name="M:avl.SaveSpatialMap(avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Serializes a SpatialMap object to an AVDATA file.</summary>
            <param name="inSpatialMap">SpatialMap to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.UndistortImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes lens distortion from an image. To be used with a GUI based on chessboard pattern recognition.</summary>
            <param name="inImage">Input image.</param>
            <param name="inUndistortionMap">Definition of the transformation.</param>
            <param name="inMapRoi">Defines which elements of the spatial map are valid. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AddSpatialMaps(avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combines two spatial maps.</summary>
        </member>
        <member name="M:avl.CombineSpatialMaps(avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combines two spatial maps.</summary>
        </member>
        <member name="M:avl.RemapImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies a precomputed image transform, defined by a spatial map object.</summary>
            <param name="inImage">Input image.</param>
            <param name="inSpatialMap">Definition of the transformation.</param>
            <param name="inMapRoi">Defines which elements of the spatial map are valid. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.CreateImageInversePolarTransformMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PolarSpaceType.Type,avl.InterpolationMethod.Type,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a spatial map representing an image inverse polar transform.</summary>
            <param name="inImageFormat">Information about dimensions, depth and pixel type of the image.</param>
            <param name="inSpaceType">Method of transformation.</param>
            <param name="inInterpolationMethod">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="outPolarMap">Output spatial map.</param>
            <param name="outOutputRegion">Pixels set by the spatial map application.</param>
        </member>
        <member name="M:avl.CreateImagePolarTransformMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PolarSpaceType.Type,avl.InterpolationMethod.Type,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a spatial map representing an image polar transform.</summary>
            <param name="inImageFormat">Information about dimensions, depth and pixel type of the image.</param>
            <param name="inSpaceType">Method of transformation.</param>
            <param name="inInterpolationMethod">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="outPolarMap">Output spatial map.</param>
            <param name="outOutputRegion">Pixels set by the spatial map application.</param>
        </member>
        <member name="M:avl.CreateImageResizeMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.InterpolationMethod.Type,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a spatial map representing an image resizing.</summary>
            <param name="inImageFormat">Information about dimensions, depth and pixel type of the image.</param>
            <param name="inNewWidth">Width of an image created by output spatial map application.</param>
            <param name="inNewHeight">Height of an image created by output spatial map application.</param>
            <param name="inInterpolationMethod">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="outResizeMap">Output spatial map.</param>
            <param name="outOutputRegion">Pixels set by the spatial map application.</param>
        </member>
        <member name="M:avl.CreateImageRotationMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.RotationSizeMode.Type,avl.InterpolationMethod.Type,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates a spatial map representing an image rotation.</summary>
            <param name="inImageFormat">Information about dimensions, depth and pixel type of the image.</param>
            <param name="inAngle">The angle of rotation. Default value: 45.0f.</param>
            <param name="inInterpolationMethod">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="outRotationMap">Output spatial map.</param>
            <param name="outOutputRegion">Pixels set by the spatial map application.</param>
        </member>
        <member name="M:avl.TestSpatialMapApplicability(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks if a spatial map may be applied to transform the given image.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.AccessSpatialMap(avl.SpatialMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PlainType.Type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ImageFormat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type*!System.Runtime.CompilerServices.Is">
            <summary>Returns individual fields of a spatial map.</summary>
        </member>
        <member name="M:avl.TransformImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms an image by the provided transformation matrix.</summary>
            <param name="inImage">Input image.</param>
            <param name="inTransformMatrix">Transform matrix.</param>
            <param name="inInterpolation">Image quality.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.CreateAffineTransformMatrix(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates affine transform matrix matrix. Return product of matrices: Translation * Rotation * Scale * Shearing.</summary>
            <param name="inScaleX">Image scale in X axis. Default value: 1.0f.</param>
            <param name="inScaleY">Image scale in Y axis. Default value: 1.0f.</param>
            <param name="inTranslation">Image translation.</param>
            <param name="inRotation">Image rotation in degree. Default value: 0.0f.</param>
            <param name="inShearingX">Shearing in X axis coefficient.</param>
            <param name="inShearingY">Shearing in Y axis coefficient.</param>
            <param name="outTransformMatrix">Return product of matrices: Translation * Rotation * Scale * Shearing.</param>
        </member>
        <member name="M:avl.UndistortImage_DivisionModel_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies division model lens distortion to an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.TranslatePixels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.InterpolationMethod.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves the pixels of the input image by the vectors specified with inVectorImage.</summary>
            <param name="inImage">Input image.</param>
            <param name="inVectorImage">Two-channel image specifying translation vector for each pixel.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.JoinImages_OfSeries(avl.JoinImages_OfSeriesState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.JoinDirection.Type,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Conditional&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a single image by glueing together a series of input images in horizontal or vertical direction.</summary>
            <param name="inImage">Input image.</param>
            <param name="inDirection">Direction in which images are joined.</param>
            <param name="inSeriesSize">Number of images which are joined.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.JoinImages_OfArray(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.JoinDirection.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a single image by glueing together many input images in horizontal or vertical direction.</summary>
            <param name="inImages">Array of input images.</param>
            <param name="inDirection">Direction in which images are joined.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.JoinImages(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.JoinDirection.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a single image by glueing together the two input images in horizontal or vertical direction.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inDirection">Direction in which images are joined.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ImageAlongArc(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.Axis.Type,avl.InterpolationMethod.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image from pixels traversed along an arc.</summary>
            <param name="inImage">Input image.</param>
            <param name="inAxisArc">Input arc.</param>
            <param name="inAxisArcAlignment">Adjusts the axis arc to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">The width of the stripe of pixels along the given arc. Default value: 5.</param>
            <param name="inAxisType">Type of axis the transformed axis arc will be parallel to. Default value: Y.</param>
            <param name="inInterpolationMethod">The interpolation method used to compute pixel brightness in locations of not-integer coordinates. Default value: Bilinear.</param>
            <param name="outImage">Output image.</param>
            <param name="outAlignedAxisArc">Input arc after transformation (in the image coordinates).</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points corresponding to one row of the resulting image.</param>
        </member>
        <member name="M:avl.ImageAlongPath(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.Axis.Type,avl.InterpolationMethod.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image from pixels traversed along a path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inAxisPath">Input path.</param>
            <param name="inAxisPathAlignment">Adjusts the axis path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">The width of the stripe of pixels along the given path. Default value: 5.</param>
            <param name="inAxisType">Type of axis the transformed axis path will be parallel to. Default value: Y.</param>
            <param name="inInterpolationMethod">The interpolation method used to compute pixel brightness in locations of not-integer coordinates. Default value: Bilinear.</param>
            <param name="outImage">Output image.</param>
            <param name="outAlignedAxisPath">Input path after transformation (in the image coordinates).</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points corresponding to one row of the resulting image.</param>
        </member>
        <member name="M:avl.ImageInversePolarTransform(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PolarSpaceType.Type,avl.PolarInterpolationMethod.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms an image from polar or log-polar space to euclidean space.</summary>
            <param name="inImage">Input image.</param>
            <param name="inCenter">Center of the coordinate system in output image.</param>
            <param name="inInputSpaceType">Method of transformation.</param>
            <param name="inInterpolation">Method of underlying interpolation.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ImagePolarTransform(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PolarSpaceType.Type,avl.PolarInterpolationMethod.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms an image to polar or log-polar space.</summary>
            <param name="inImage">Input image.</param>
            <param name="inCenter">Center of the coordinate system in input image.</param>
            <param name="inOutputSpaceType">Method of transformation.</param>
            <param name="inInterpolation">Method of underlying interpolation.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.TranslateImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates an image by a vector, without changing its dimensions.</summary>
            <param name="inImage">Input image.</param>
            <param name="inBorder">Color used to fill pixels outside of the translated image.</param>
            <param name="inDeltaX">Horizontal shift.</param>
            <param name="inDeltaY">Vertical shift.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.CropImageToRegion(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Crops an image to the area of the specified region.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRegion">Input region.</param>
            <param name="inOutsidePixel">Color used for locations outside the region.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.CropImageToRectangle(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.CropScaleMode.Type,avl.InterpolationMethod.Type,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates an image from a rectangular fragment of another image (with black margins if requested).</summary>
            <param name="inImage">Input image.</param>
            <param name="inRectangle">Rectangle defining a rotated subimage.</param>
            <param name="inRectangleAlignment">Adjusts the rectangle to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScaleMode">InputScale keeps the input scale unchanged, AlignedScale rescales according to the input alignment scale. Default value: InputScale.</param>
            <param name="inInterpolationMethod">Default value: Bilinear.</param>
            <param name="inMargin">Width of an additional margin for the output image.</param>
            <param name="outImage">Output image.</param>
            <param name="outAlignedRectangle">Input rectangle after transformation (in the image coordinates).</param>
            <param name="outOutputAlignment">Alignment of the output image.</param>
        </member>
        <member name="M:avl.UncropImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Inverse of CropImage.</summary>
            <param name="inImage">Input image.</param>
            <param name="inSelection">The same value as in CropImage.</param>
            <param name="inWidth">Width of the original image.</param>
            <param name="inHeight">Height of the original image.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.CropImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image from a box-shaped fragment of the input image (with margins if requested).</summary>
            <param name="inImage">Input image.</param>
            <param name="inSelection">Box defining a subimage to be cropped.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ShearImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Axis.Type,avl.InterpolationMethod.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a leant image (shifts the rows).</summary>
            <param name="inImage">Input image.</param>
            <param name="inShear">Relative shift between consecutive rows or columns of the image. Default value: 0.0f.</param>
            <param name="inAxis">Switches between horizontal or vertical shearing.</param>
            <param name="inInterpolationMethod">Default value: Bilinear.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MirrorImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MirrorDirection.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reverses the order of the input image columns or rows depending on inMirrorDirection value.</summary>
            <param name="inImage">Input image.</param>
            <param name="inMirrorDirection">Reverse the order of image columns (horizontal direction) or rows (vertical direction). Default value: Vertical.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.CreateImagePyramid_Linked(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an array of images, each downsampled from the previous one. The output images may keep references to data owned by the input image.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.CreateImagePyramid_Gauss(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.GaussKernel.Type,System.Int32,System.Int32,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an array of images, each downsampled from the previous, gauss-smoothed one.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.CreateImagePyramid(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an array of images, each downsampled from the previous one.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.ResizeImage_Relative(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.ResizeMethod.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Resizes an image by a factor along each axis.</summary>
            <param name="inImage">Input image.</param>
            <param name="inHorizontalScale">Default value: 1.0f.</param>
            <param name="inVerticalScale">Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ResizeImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.ResizeMethod.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Enlarges or shrinks an image to new dimensions.</summary>
            <param name="inImage">Input image.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ShrinkImageNTimes(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shrinks an image by a natural factor along each axis.</summary>
            <param name="inImage">Input image.</param>
            <param name="inNX">Default value: 2.</param>
            <param name="inNY">Default value: 2.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DownsampleImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shrinks an image by the factor of two along each axis.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScaleStep">Defines how many times the image size is divided by 2. Default value: 1.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.RotateImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.RotationSizeMode.Type,avl.InterpolationMethod.Type,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates an image clockwise.</summary>
            <param name="inImage">Input image.</param>
            <param name="inAngle">Rotation angle (clockwise). Default value: 45.0f.</param>
            <param name="inInterpolationMethod">Default value: Bilinear.</param>
            <param name="inInverse">'True' changes rotation to counter-clockwise. Default value: False.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.TransposeImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Flips and rotates an image so that columns are exchanged with rows.</summary>
            <param name="inImage">Input image.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.TestImageEqualTo(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether two images equal.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.TestLocationInBox(avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a location is contained in the dimensions of a box.</summary>
        </member>
        <member name="M:avl.TestRectangleInImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a rectangle is contained in the dimensions of an image.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.TestPointInImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a point is contained in the dimensions of an image.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.TestBoxInImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a box is contained in the dimensions of an image.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.TestLocationInImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a location is contained in the dimensions of an image.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avs.AvsFilter_LogarithmImage(avl.ImagePointTransformsState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a natural logarithm of each pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor (default: 255). Default value: atl::NIL.</param>
            <param name="inOffset">Offset factor. Default value: 1.0f.</param>
            <param name="inNormalizeZero">Specifies whether the output range should be rescaled to start from 0.</param>
            <param name="outImage">Output image.</param>
            <param name="diagLutProfile">Profile depicting the resulting look-up table of the logarithm transform.</param>
        </member>
        <member name="M:avs.AvsFilter_CorrectGamma(avl.ImagePointTransformsState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs gamma correction.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inValue">Gamma coefficient, where 1.0 is neutral. Default value: 2.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.AvsFilter_PowerImage(avl.ImagePointTransformsState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Exponentiates each pixel to the given power.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inValue">The exponent. Default value: 2.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AddNoiseToImage(avl.RandomState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds random noise to the image</summary>
            <param name="ioState">State of generator.</param>
            <param name="inImage">Input image.</param>
            <param name="inMinValue">Minimum value of noise pixel, inclusive. Default value: 0.0f.</param>
            <param name="inMaxValue">Maximum value of noise pixel, exclusive. Default value: 256.0f.</param>
            <param name="inNoiseStrength">Noise strength. Default value: 0.5f.</param>
            <param name="inColorNoise">If 'True', noise will be generated separately for each channel.</param>
            <param name="inSeed">Random seed used to generate noise. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.LUTTransformImage(avl.LUTTransformImageState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Pixel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes pixel values for data stored in array.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inColorPoints">Last pixel value in which corresponding color will be replaced.</param>
            <param name="inColors">Colors corresponding to pixel levels defined in inColorPoints.</param>
            <param name="inComputeGradient">Compute the linear change of pixels colors between next palette colors.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ColorizeImage(avl.ColorizeImageState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.ColorPalette.Type,System.Boolean,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shows a monochromatic image in false colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inPalette">Palette of colors which is used to replace pixels. Default value: Iron.</param>
            <param name="inNegate">Reversing palette colors.</param>
            <param name="inMinValue">Minimal value of pixel that will be replaced by color from palette, otherwise first color from palette will be set. Default value: 0.</param>
            <param name="inMaxValue">Maximal value of pixel that will be replaced by color from palette, otherwise last color from palette will be set. Default value: 255.</param>
            <param name="outImage">Output image.</param>
            <param name="diagPalette">Used palette preview.</param>
        </member>
        <member name="M:avl.CropPixels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets pixels below the low value to the low value and above the high value to the high value.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inLowValue">The lower threshold for the image pixel values. Default value: 64.0f.</param>
            <param name="inHighValue">The higher threshold for the image pixel values. Default value: 192.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ResaturateImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets pixels below the low value to minimum, above the high value to maximum, and interpolates the rest.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inLowValue">The value that will be changed to minimum (usually 0). Default value: 64.0f.</param>
            <param name="inHighValue">The value that will be changed to maximum (usually 255). Default value: 192.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SquareImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Raises pixel values to the second power pixel by pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SquareRootImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms pixel values to their square roots pixel by pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AbsoluteValueImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms pixel values to their absolute values pixel by pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ReplacePixels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Substitutes pixels having the specified value with a new value.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.RescalePixels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies linear transformation to pixel values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inA">Value multiplied. Default value: 1.0f.</param>
            <param name="inB">Value added. Default value: 0.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DivideImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Divides each pixel by a scalar value.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inValue">Divisor. Default value: 2.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MultiplyImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies each pixel by a scalar value.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inValue">Multiplier. Default value: 2.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SubtractFromImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Subtracts a scalar value from each pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inValue">Value to be subtracted. Default value: 50.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AddToImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds a scalar value to each pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inValue">Value to be added. Default value: 50.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.InvertImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies numeric inversion (1/x) of the pixel values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.NegateImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reverts the pixel value range (unsigned) or applies numeric negation (signed).</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.LogarithmImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a natural logarithm of each pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor (default: 255). Default value: atl::NIL.</param>
            <param name="inOffset">Offset factor. Default value: 1.0f.</param>
            <param name="inNormalizeZero">Specifies whether the output range should be rescaled to start from 0.</param>
            <param name="outImage">Output image.</param>
            <param name="diagLutProfile">Profile depicting the resulting look-up table of the logarithm transform.</param>
        </member>
        <member name="M:avl.CorrectGamma(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs gamma correction.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inValue">Gamma coefficient, where 1.0 is neutral. Default value: 2.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.PowerImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Exponentiates each pixel to the given power.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inValue">The exponent. Default value: 2.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ImageStatistics(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Location*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Location*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Opt">
            <summary>Computes various statistics of the image pixel values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.ImageAverageHSx(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.HSxColorModel.Type,atl.Optional&lt;System.Int32&gt;,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average of the HSV, HSL or HSI image pixel values.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inColorModel">Selected color model.</param>
            <param name="inMinSaturation">Default value: 0.</param>
            <param name="outHAverage">Output hue average.</param>
            <param name="outSAverage">Output saturation average.</param>
            <param name="outBAverage">Output brightness average.</param>
        </member>
        <member name="M:avl.ImageAverage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the average of the image pixel values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outAverageColor">Average of each channel.</param>
            <param name="outAverageValue">Average of the entire image.</param>
        </member>
        <member name="M:avl.ImageSum(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the sum of the image pixel values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.ImageMaximum(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Location*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds the location and the value of the brightest pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.ImageMinimum(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Location*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds the location and the value of the darkest pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.ColorDistanceImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares each pixel with the specified color using chromatic and non-chromatic information.</summary>
            <param name="inImage">Unsigned color image used in comparison.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inRgbColor">Color to compare the image to.</param>
            <param name="inChromaAmount">Proportion of chromatic information in distance computation. Default value: 0.7f.</param>
            <param name="outValueImage">Unsigned image of distances.</param>
        </member>
        <member name="M:avl.ColorDistance(avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compares two pixels using chromatic and non-chromatic information. Assumes RGB-like color space.</summary>
            <param name="inChromaAmount">Proportion of chromatic information in distance computation. Default value: 0.7f.</param>
        </member>
        <member name="M:avl.ImageDifferenceImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.DistanceMeasure.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes an image of differences between a moving pattern and the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPatternImage">Pattern to be compared with input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inPatternRoi">Range of pixels in the pattern to be processed. Default value: atl::NIL.</param>
            <param name="inDistanceMeasure">Measure of distance.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ImageDifference(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.DistanceMeasure.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Measures dissimilarity between two images.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPatternImage">Pattern to be compared with input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inDistanceMeasure">Measure of distance.</param>
            <param name="outDifference">Value of difference between pattern and image.</param>
        </member>
        <member name="M:avl.ImageCorrelationImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.CorrelationMeasure.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes an image of correlation between a pattern and the input image at each possible location.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPatternImage">Pattern to be compared with input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inPatternRoi">Range of pixels in the pattern to be processed. Default value: atl::NIL.</param>
            <param name="inCorrelationMeasure">Measure of correlation.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ImageCorrelation(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.CorrelationMeasure.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the correlation of pattern and image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPatternImage">Pattern to be compared with input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inCorrelationMeasure">Measure of correlation.</param>
            <param name="outCorrelation">Value of correlation of pattern and image.</param>
        </member>
        <member name="M:avl.CreateCustomLut(std.function&lt;(System.Single)(System.Single)&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PlainType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PixelLut*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates Look Up Table for user provided operation on image pixels.</summary>
        </member>
        <member name="M:avl.CreateGammaCorrectionLut(System.Single!System.Runtime.CompilerServices.IsConst,avl.PlainType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PixelLut*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates Look Up Table for gamma correction operation on image pixels.</summary>
            <param name="inValue">Default value: 2.0f.</param>
        </member>
        <member name="M:avl.CreateLogarithmLut(atl.Optional&lt;System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.PlainType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PixelLut*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates Look Up Table for logarithm operation on image pixels.</summary>
            <param name="inScale">Scaling factor (default: 255). Default value: atl::NIL.</param>
            <param name="inOffset">Offset factor.</param>
            <param name="inNormalizeZero">Specifies whether the output range should be rescaled to start from 0.</param>
        </member>
        <member name="M:avl.CreatePowerLut(System.Single,avl.PlainType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PixelLut*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates Look Up Table for power operation on image pixels.</summary>
            <param name="inValue">Default value: 2.0f.</param>
        </member>
        <member name="M:avl.ApplyPixelLut(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.PixelLut!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies previously created Look Up transformation to provided image.</summary>
            <param name="inImage">Image to which LUT transformation will be applied.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inLut">LUT object, which defines transformation.</param>
            <param name="outImage">Transformed image.</param>
        </member>
        <member name="M:avl.StandardDeviationImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates image of pixels' local standard deviations.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of Interest. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be read. Default value: atl::NIL.</param>
            <param name="inKernelRadius">Radius of square kernel (width and height are 2r+1). Default value: 4.</param>
            <param name="outStdDevImage">Resulting image.</param>
        </member>
        <member name="M:avl.DilateErodeAndAverageImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates dilation, erosion and then averages them, all simultaneously for faster execution.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be read. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape.</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.DilateAndErodeImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates dilation and erosion simultaneously for faster execution.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be read. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape.</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.SmoothImage_Middle(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces each pixel with the average of maximum and minimum calculated within a kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be read. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape.</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DilateImage_Directional(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Dilates an image across the direction of associated gradients</summary>
            <param name="inImage">Input image.</param>
            <param name="inMinMagnitude">Minimum length of the gradient. Default value: 5.0f.</param>
            <param name="inMinValue">Minimum value of the pixel of the input image. Default value: 0.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.GradientImage_Mask_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GradientMaskOperator.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a gradient image using selected operator.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.GradientMagnitudeImage_Adaptive(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes illumination invariant magnitude image</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inNoiseLevel">Default value: 4.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DifferenceOfGaussians(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,System.Single,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies difference of Gaussians on an image, i.e. computes difference of two Gaussian smoothed images.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of output pixels to be computed. Default value: atl::NIL.</param>
            <param name="inStdDev">Smoothing standard deviation for the smaller kernel. Default value: 3.0f.</param>
            <param name="inStdDevRatio">Defines how many times larger is the second kernel. Default value: 1.6f.</param>
            <param name="inKernelRelativeSize">A multiple of the standard deviation determining the size of the kernel. Default value: 3.0f.</param>
            <param name="inScale">Output image scaling factor. Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
            <param name="diagKernelShape">Middle row of the kernel being used.</param>
        </member>
        <member name="M:avl.SmoothImage_Deriche(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths an image using Deriche filter.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of output pixels to be computed. Default value: atl::NIL.</param>
            <param name="inAlphaX">Horizontal coefficient. Default value: 1.0f.</param>
            <param name="inAlphaY">Vertical coefficient. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SmoothImage_Gauss_Mask(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GaussKernel.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths an image using a predefined gaussian kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inKernel">Predefined Gauss kernel.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SmoothImage_Gauss(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,atl.Optional&lt;System.Single&gt;,System.Single!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths an image using a gaussian kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of output pixels to be computed. Default value: atl::NIL.</param>
            <param name="inStdDevX">Horizontal smoothing standard deviation. Default value: 1.0f.</param>
            <param name="inStdDevY">Vertical smoothing standard deviation. Default value: atl::NIL.</param>
            <param name="inKernelRelativeSize">A multiple of the standard deviation determining the size of the kernel. Default value: 2.0f.</param>
            <param name="outImage">Output image.</param>
            <param name="diagKernelRadiusX">Horizontal radius of Gaussian kernel being used.</param>
            <param name="diagKernelRadiusY">Vertical radius of Gaussian kernel being used.</param>
        </member>
        <member name="M:avl.GradientDirAndPresenceImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GradientMaskOperator.Type,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes an image of gradient directions mapped to the range from 1 to 255. Zero means "no edge".</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of output pixels to be computed. Default value: atl::NIL.</param>
            <param name="inOperator">Defines how the gradient is computed.</param>
            <param name="inEdgeThreshold">Minimum edge magnitude (other pixels will be set to 0). Default value: 10.0f.</param>
        </member>
        <member name="M:avl.GradientMagnitudeImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GradientMaskOperator.Type,avl.MagnitudeMeasure.Type,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Measures the strength of gradient at each pixel location with Sobel or Prewitt operator.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of output pixels to be computed. Default value: atl::NIL.</param>
            <param name="inOperator">Defines how the gradient is computed.</param>
            <param name="inMeasure">Defines how the gradient magnitude is computed. Default value: Hypot.</param>
            <param name="inScale">Scales the resulting gradient magnitudes. Default value: 1.</param>
            <param name="outValueImage">Gradient magnitudes of the image.</param>
        </member>
        <member name="M:avl.GradientImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GradientOperator.Type,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a gradient image with smoothing operator of any size. The output pixels are signed.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outGradientImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inOperator">Defines how the gradient is computed.</param>
            <param name="inStdDevX">Horizontal smoothing standard deviation. Default value: 2.0f.</param>
            <param name="inStdDevY">Vertical smoothing standard deviation. Default value: atl::NIL.</param>
            <param name="outGradientImage">Gradients of the image.</param>
            <param name="diagGradientDirections">Gradient directions presented in a human readable format.</param>
        </member>
        <member name="M:avl.GradientImage_Mask(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GradientMaskOperator.Type,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a gradient image with a Sobel or Prewitt operator.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outGradientImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inOperator">Defines how the gradient is computed.</param>
            <param name="inScale">Scales the resulting gradients. Default value: 1.</param>
            <param name="outGradientImage">Gradients of the image.</param>
            <param name="diagGradientDirections">Gradient directions presented in a human readable format.</param>
        </member>
        <member name="M:avl.ErodeImage_AnyKernel(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces each pixel with the minimum of pixels within an arbitrary kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be considered in computations. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape (any).</param>
            <param name="inKernelAnchor">A location within inKernel, defining its center. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DilateImage_AnyKernel(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces each pixel with the maximum of pixels within an arbitrary kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be considered in computations. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape (any).</param>
            <param name="inKernelAnchor">A location within inKernel, defining its center. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SmoothImage_Mean_AnyKernel(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths an image by averaging pixels within an arbitrary kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be considered in computations. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape (any).</param>
            <param name="inKernelAnchor">A location within inKernel, defining its center. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SmoothImage_Median_Mask(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces each pixel with the median of pixels within a 3x3 rectangular kernel (faster).</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ErodeImage_Mask(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.MorphologyKernel.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces each pixel with the minimum of pixels within a small rectangular kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inKernel">Selects a predefined kernel.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DilateImage_Mask(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.MorphologyKernel.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces each pixel with the maximum of pixels within a small rectangular kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inKernel">Selects a predefined kernel.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SmoothImage_Mean_Mask(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.MeanKernel.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths an image by averaging pixels within a small rectangular kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inKernel">Selects a predefined kernel.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ConvolveImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Optional&lt;avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a convolution of the input image with a user-specified mask.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inMask">Image convolution kernel.</param>
            <param name="inNormalizeMaskValues">Normalize sum of weights in mask to one. Default value: False.</param>
            <param name="inMaskOrigin">Relative location of point to its mask. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SmoothImage_Median(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.SmoothImageMedianKernel.Type,System.Int32,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces each pixel with the median of pixels within a kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels being written. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels being read. Default value: atl::NIL.</param>
            <param name="inRadius">Nearly half of the kernel's size (2*R+1). Default value: 1.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SmoothImage_Mean(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths an image by averaging pixels within a rectangular kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be read. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape.</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.CloseImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes small dark structures from an image (or fills in bright ones) by applying consecutive dilation and erosion.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be considered in computations. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Selects kernel shape.</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
            <param name="diagKernel">Kernel shape.</param>
        </member>
        <member name="M:avl.OpenImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes small bright structures from an image (or fills in dark ones) by applying consecutive erosion and dilation.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be considered in computations. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape.</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
            <param name="diagKernel">Kernel shape.</param>
        </member>
        <member name="M:avl.ErodeImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces each pixel with the minimum of pixels within a kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be considered in computations. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape.</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
            <param name="diagKernel">Kernel shape.</param>
        </member>
        <member name="M:avl.DilateImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Pixel&gt;,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Replaces each pixel with the maximum of pixels within a kernel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of outImage pixels to be computed. Default value: atl::NIL.</param>
            <param name="inSourceRoi">Range of inImage pixels to be considered in computations. Default value: atl::NIL.</param>
            <param name="inBorderColor">Color of the imaginary pixels outside the image boundaries. Default value: atl::NIL.</param>
            <param name="inKernel">Kernel shape.</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
            <param name="diagKernel">Kernel shape.</param>
        </member>
        <member name="M:avs.AvsFilter_WriteVideo(avl.OutputVideoStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;)">
            <summary>Writes an image sequence to a video file one frame per iteration.</summary>
            <param name="inImage">Current frame.</param>
            <param name="inFile">File path of the output file.</param>
            <param name="inFourCC">Four-character code, designating which codec to use.</param>
            <param name="inFPS">Requested frame rate of the produced video file. Default value: 20.0f.</param>
        </member>
        <member name="M:avs.AvsFilter_WriteVideo_Deprecated(avl.OutputVideoStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.VideoEncoder.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>Writes an image sequence to a video file one frame per iteration.</summary>
            <param name="inImage">Current frame.</param>
            <param name="inFile">File path of the output file.</param>
            <param name="inFourCC">Four-character code, designating which codec to use.</param>
            <param name="inFPS">Desired frame rate of the produced video file. Default value: 20.0f.</param>
        </member>
        <member name="M:avs.AvsFilter_ReadVideo(avl.InputVideoStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads a frame sequence from a video file.</summary>
            <param name="inFile">Video file.</param>
            <param name="inStartFrame">Number of first frame to fetch.</param>
            <param name="inRepeat">Determines whether to repeat video playback.</param>
            <param name="outImage">Output image.</param>
            <param name="outFPS">FPS.</param>
            <param name="outFrameNum">Current frame number.</param>
            <param name="outMaxFrame">Last frame number.</param>
        </member>
        <member name="M:avl.GetAvailableVideoCompressors(atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>List fourCCs names of available video compressors.</summary>
            <param name="outCompressors">Available compressors.</param>
        </member>
        <member name="M:avl.WriteVideoStream(avl.OutputVideoStream!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Writes an image to a previously opened video stream.</summary>
            <param name="inOutputVideoStream">Previously opened output video stream.</param>
            <param name="inImage">Frame to be added to stream.</param>
        </member>
        <member name="M:avl.OpenOutputVideoStream_Any(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.OutputVideoStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a video stream which will be saved to a selected file.</summary>
            <param name="inFile">File path of the output file.</param>
            <param name="inVideoEncoderName">Video encoder.</param>
            <param name="inFPS">Desired frame rate of the produced video file.</param>
            <param name="inFrameWidth">Width of frame being added.</param>
            <param name="inFrameHeight">Height of frame being added.</param>
            <param name="outOutputVideoStream">Initialized output video stream.</param>
        </member>
        <member name="M:avl.GrabScreenshot(atl.Optional&lt;avl.Box&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Grabs a screenshot of the Desktop.</summary>
            <param name="inSelection">Bounding box of screen area to capture, whole desktop if not specified. Default value: atl::NIL.</param>
            <param name="outImage">Desktop screenshot image.</param>
        </member>
        <member name="M:avl.OpenOutputVideoStream(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.VideoEncoder.Type!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.OutputVideoStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a video stream which will be saved to a selected file.</summary>
            <param name="inFile">File path of the output file.</param>
            <param name="inVideoEncoder">Video encoder.</param>
            <param name="inFPS">Desired frame rate of the produced video file.</param>
            <param name="inFrameWidth">Width of frame being added.</param>
            <param name="inFrameHeight">Height of frame being added.</param>
            <param name="outOutputVideoStream">Initialized output video stream.</param>
        </member>
        <member name="M:avl.ReadVideoStream(avl.InputVideoStream!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Acquires frame from the previously opened video stream.</summary>
            <param name="inInputVideoStream">Previously opened input video stream.</param>
            <param name="inRepeat">Determines whether to repeat video playback.</param>
            <param name="outFrameNum">Current frame number.</param>
            <param name="outImage">Current frame.</param>
        </member>
        <member name="M:avl.OpenInputVideoStream(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.InputVideoStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Opens and creates a video stream from a file.</summary>
            <param name="inFile">Video file.</param>
            <param name="inStartFrame">Number of first frame to fetch.</param>
            <param name="outInputVideoStream">Initialized input video stream.</param>
            <param name="outFPS">Frames per second.</param>
            <param name="outMaxFrame">Last frame number.</param>
        </member>
        <member name="M:avl.SaveImageToTiff_Asynchronous(avl.SaveImageState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.TiffImageCompressionScheme.Type&gt;,atl.Optional&lt;System.Int32&gt;)">
            <summary>Saves an image to a TIFF file in the background thread.</summary>
            <param name="ioState">State containing information about asynchronous execution.</param>
            <param name="inImage">An image to be saved.</param>
            <param name="inFile">Path to a file.</param>
            <param name="inCompressionScheme">Compression scheme. Default value: atl::NIL.</param>
            <param name="inJpegQuality">Quality (0-100) - used only for JPEG compression scheme. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.SaveImageToTiff(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.TiffImageCompressionScheme.Type&gt;,atl.Optional&lt;System.Int32&gt;,System.Boolean)">
            <summary>Saves an image to a TIFF file.</summary>
            <param name="inImage">An image to be saved.</param>
            <param name="inFile">Path to a file.</param>
            <param name="inCompressionScheme">Compression scheme. Default value: atl::NIL.</param>
            <param name="inJpegQuality">Quality - used only for JPEG compression scheme. Default value: atl::NIL.</param>
            <param name="inIgnoreErrors">Switches to re-trying and canceling in case of errors (e.g. when the disk is full).</param>
        </member>
        <member name="M:avl.SaveImageToPng_Asynchronous(avl.SaveImageState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;)">
            <summary>Saves an image to a PNG file in the background thread.</summary>
            <param name="ioState">State containing information about asynchronous execution.</param>
            <param name="inImage">An image to be saved.</param>
            <param name="inFile">Path to a file.</param>
            <param name="inCompressionLevel">Compression level. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.SaveImageToPng(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Boolean)">
            <summary>Saves an image to a PNG file.</summary>
            <param name="inImage">An image to be saved.</param>
            <param name="inFile">Path to a file.</param>
            <param name="inCompressionLevel">Compression level. Default value: atl::NIL.</param>
            <param name="inIgnoreErrors">Switches to re-trying and canceling in case of errors (e.g. when the disk is full).</param>
        </member>
        <member name="M:avl.SaveImageToJpeg_Asynchronous(avl.SaveImageState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;)">
            <summary>Saves an image to a JPEG file in the background thread.</summary>
            <param name="ioState">State containing information about asynchronous execution.</param>
            <param name="inImage">An image to be saved.</param>
            <param name="inFile">Path to a file.</param>
            <param name="inQuality">Quality. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.SaveImageToJpeg(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Boolean)">
            <summary>Saves an image to a JPEG file.</summary>
            <param name="inImage">An image to be saved.</param>
            <param name="inFile">Path to a file.</param>
            <param name="inQuality">Quality. Default value: atl::NIL.</param>
            <param name="inIgnoreErrors">Switches to re-trying and canceling in case of errors (e.g. when the disk is full).</param>
        </member>
        <member name="M:avl.SaveImageToBuffer(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ImageFileFormat.Type,avl.ByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves an image to a file stored in memory.</summary>
            <param name="inImage">An image to be saved.</param>
            <param name="inImageFileFormat">Image file format.</param>
            <param name="outBuffer">Buffer containing image file data.</param>
        </member>
        <member name="M:avl.SaveImage_Asynchronous(avl.SaveImageState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.ImageFileFormat.Type&gt;,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves an image to a file in the background thread.</summary>
            <param name="ioState">State containing information about asynchronous execution.</param>
            <param name="inImage">An image to be saved.</param>
            <param name="inImageFileFormat">If Nil the format will be chosen on the basis of extension. Default value: atl::NIL.</param>
            <param name="inFile">Path to a file.</param>
        </member>
        <member name="M:avl.SaveImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.ImageFileFormat.Type&gt;,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Saves an image to a file.</summary>
            <param name="inImage">An image to be saved.</param>
            <param name="inImageFileFormat">If Nil the format will be chosen on the basis of extension. Default value: atl::NIL.</param>
            <param name="inFile">Path to a file.</param>
            <param name="inIgnoreErrors">Switches to re-trying and canceling in case of errors (e.g. when the disk is full).</param>
        </member>
        <member name="M:avl.GrabImage_FromFiles_ResetState">
            <summary>Resets global state of GrabImage_FromFiles filter</summary>
        </member>
        <member name="M:avl.GrabImage_FromFiles(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.ImageFileFormat.Type&gt;,avl.FileSortingOrder.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Simulates capturing a frame from a camera.</summary>
            <param name="inDirectory">Input directory.</param>
            <param name="inFileType">File format of the images. Default value: atl::NIL.</param>
            <param name="inSortingOrder">Sorting order.</param>
            <param name="inRepeat">Determines whether to repeat reading directory after reading all files.</param>
            <param name="inProcessSubdirectories">Flag indicating whether to load images from the subdirectories or not.</param>
            <param name="inInvert">Flag indicating whether to enumerate images backwards or not.</param>
            <param name="inLoadAlphaChannel">Flag indicating whether to load alpha channel of the image or not.</param>
            <param name="outImage">Output image.</param>
            <param name="outFilePath">Output file path.</param>
            <param name="outFileName">Output file name.</param>
        </member>
        <member name="M:avl.EnumerateImages(avl.EnumerateFilesState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.ImageFileFormat.Type&gt;,avl.FileSortingOrder.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Scans a disk directory for image files and then returns the images one by one in consecutive iterations.</summary>
            <param name="inDirectory">Input directory.</param>
            <param name="inFileType">File format of the images. Default value: atl::NIL.</param>
            <param name="inSortingOrder">Sorting order.</param>
            <param name="inRepeat">Determines whether to repeat reading directory after reading all files.</param>
            <param name="inProcessSubdirectories">Flag indicating whether to load images from the subdirectories or not.</param>
            <param name="inInvert">Flag indicating whether to enumerate images backwards or not.</param>
            <param name="inLoadAlphaChannel">Flag indicating whether to load alpha channel of the image or not.</param>
            <param name="outImage">Output image.</param>
            <param name="outFilePath">Output file path.</param>
            <param name="outFileName">Output file name.</param>
        </member>
        <member name="M:avl.LoadImageFromBuffer(avl.ByteBuffer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads a single image from a file stored in memory.</summary>
            <param name="inBuffer">Source buffer containing image file data.</param>
            <param name="inOffset">Image data start position in source buffer. Default value: 0.</param>
            <param name="inLength">Image data length in source buffer. Default value: atl::NIL.</param>
            <param name="inLoadAlphaChannel">Whether to load the alpha channel (if exists) as an additional image channel.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.LoadImage(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads a single image from a file.</summary>
            <param name="inFile">Path to a file.</param>
            <param name="inLoadAlphaChannel">Whether to load the alpha channel (if exists) as an additional image channel.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ImageStandardDeviation(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates standard deviation of image pixel values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of Interest. Default value: atl::NIL.</param>
            <param name="outStandardDeviation">Calculated standard deviation.</param>
        </member>
        <member name="M:avl.GradientImageRidges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.NonMaximaMethod.Type,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds ridge pixels in a gradient image.</summary>
            <param name="outRegion">Output region.</param>
        </member>
        <member name="M:avl.ImageRidges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Polarity.Type,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single!System.Runtime.CompilerServices.IsConst,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds ridge pixels in an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inPolarity">Specifies the type of ridges to be detected (Bright, Dark or Any).</param>
            <param name="inMinValue">Minimal value of pixel to be considered. Default value: atl::NIL.</param>
            <param name="inMaxValue">Maximal value of pixel to be considered. Default value: atl::NIL.</param>
            <param name="inNoiseLevel">Defines how much stronger a pixel has to be than its neighbors to be deemed a ridge pixel.</param>
            <param name="outRidges">Region of ridges.</param>
        </member>
        <member name="M:avl.ImageSharpness(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a value dependent on sharpness of the image. The value is bigger for sharper images.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.ImageCorners_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns corners of an image.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.ImageCenter(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the geometrical center of an image.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.ImageLocalMinima(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,atl.Optional&lt;avl.ImageLocalExtremaVerification!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Extremum2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds image locations characterized by locally minimal pixel values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inConsiderLowlands">Consider multi-pixel minima (lowlands) or not.</param>
            <param name="inMinValue">Minimal value of maximum to be considered. Default value: atl::NIL.</param>
            <param name="inMaxValue">Maximal value of minimum to be considered. Default value: atl::NIL.</param>
            <param name="inMinDistance">Minimal distance between two found minima.</param>
            <param name="inMinimaVerification">Minima verification structure. Default value: atl::NIL.</param>
            <param name="outLocalMinima">Found local minima.</param>
            <param name="outMinimaRegions">Regions of local minima (plateaus and singletons).</param>
        </member>
        <member name="M:avl.ImageLocalMaxima(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,atl.Optional&lt;avl.ImageLocalExtremaVerification!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Extremum2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds image locations characterized by locally maximal pixel values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inConsiderPlateaus">Consider multi-pixel maxima (plateaus) or not.</param>
            <param name="inMinValue">Minimal value of maximum to be considered. Default value: atl::NIL.</param>
            <param name="inMaxValue">Maximal value of minimum to be considered. Default value: atl::NIL.</param>
            <param name="inMinDistance">Minimal distance between two found maxima.</param>
            <param name="inMaximaVerification">Maxima verification structure. Default value: atl::NIL.</param>
            <param name="outLocalMaxima">Found local maxima.</param>
            <param name="outMaximaRegions">Regions of local maxima (plateaus and singletons).</param>
        </member>
        <member name="M:avl.ImageMassCenter(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a point with coordinates equal to image mass center in brightness scale.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.DistanceTransform(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Single,System.Single,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes an image in which the pixel values denote the estimated distances to the nearest bright pixel in the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inThreshold">Minimal brightness above which pixels are called bright. Default value: 128.</param>
            <param name="inStraightDistance">Distance between two neighboring in a row or a column pixels. Default value: 1.0f.</param>
            <param name="inDiagonalDistance">Distance between two pixels connected by vertices. Default value: 1.414f.</param>
            <param name="inMaxDistance">Maximum value of the calculated distance. Default value: 255.0f.</param>
            <param name="outImage">Output distance image.</param>
        </member>
        <member name="M:avl.ImageProfileAlongPath(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,System.Single,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServ">
            <summary>Creates a series of segments across the input path, measures the average pixel intensity on each of the segments, and creates the final profile from that values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanPath">Path along which the profile is extracted.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan area. Default value: 5.</param>
            <param name="inInterpolationMethod">Interpolation method used to compute pixel brightness in locations of not-integer coordinates. Default value: Bilinear.</param>
            <param name="inSmoothingStdDev">Standard deviation of the gaussian smoothing applied to the extracted profile. Default value: 0.6f.</param>
            <param name="outProfile">The resulting profile of the pixel brightness.</param>
            <param name="outPath">The path consisting of the points from which the resulting profile is extracted.</param>
            <param name="outAlignedScanPath">Input scan path after transformation (in the image coordinates).</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avl.ImageProjection(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.ProjectionDirection.Type,avl.ProjectionMode.Type,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average (or other statistic) for each image row or column and then merges the obtained results into a profile.</summary>
            <param name="inImage">Monochromatic image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inProjectionDirection">Combine pixel values for image rows (horizontal) or columns (vertical).</param>
            <param name="inProjectionMode">Determines how the pixel values are combined. Default value: Sum.</param>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.ImageOrientation(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the orientation of an image using image moments. The result range is from 0.0 to 180.0.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.ImageMoment(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.ImageMomentType.Type,System.Boolean,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the selected moment of an image in regular and normalized (divided by sum of pixel values) variant.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.ImageHistogram(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the histogram of the image pixel values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inChannelIndex">Selects a channel of the input image.</param>
            <param name="inBinSize">Width of a single histogram bin. Default value: 1.0f.</param>
            <param name="inDomainBegin">The lowest value that will be considered in the output histogram. Default value: 0.0f.</param>
            <param name="inDomainEnd">The upper-bound for values that will be considered in the output histogram. Default value: 256.0f.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.ImagePixelValues(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns an array of pixel values from the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.ImagePixels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Pixel&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns an array of pixels from the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.AutoAdjustColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adjusts image colors by stretching each channel separately.</summary>
            <param name="inImage">Input image.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SharpenImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.KernelShape.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Enhances contrast of an image so that it appears sharper.</summary>
            <param name="inImage">Input image.</param>
            <param name="inContrastFactor">Value representing the strength of the contrast enhancement. Default value: 1.0f.</param>
            <param name="inKernel">Kernel shape.</param>
            <param name="inRadiusX">Nearly half of the kernel's width (2*R+1). Default value: 1.</param>
            <param name="inRadiusY">Nearly half of the kernel's height (2*R+1), or same as inRadiusX. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.InpaintImage(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Fills in a region of the image with pixel values interpolated from the borders of the area.</summary>
            <param name="inLambda">Ratio between vertical and horizontal interpolation. Default value: 0.5f.</param>
            <param name="inRegionToInpaint">Region to be inpainted.</param>
        </member>
        <member name="M:avl.NormalizeLocalContrast(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Normalizes local contrast of the image using Wallis filter.</summary>
            <param name="inMonoImage">Monochromatic input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inTargetMean">Target local mean. Default value: 128.0f.</param>
            <param name="inTargetVariance">Target local variance. Default value: 90.0f.</param>
            <param name="inUniformnessScale">Radius of neighbourhood to uniformize. Default value: 10.</param>
            <param name="inBrightnessPreserveRatio">How much of original brightness to be kept. Default value: 0.1f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.EqualizeImageHistogram(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Maps image pixels to new values to achieve uniform distribution of intensities in the range (0, 255).</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inSaturateBrightestFraction">Fraction of the brightest pixels skipped during normalization. Default value: 0.0f.</param>
            <param name="inSaturateDarkestFraction">Fraction of the darkest pixels skipped during normalization. Default value: 0.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.NormalizeImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,System.Single,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rescales an image linearly, so that its minimum becomes inNewMinimum and the maximum of the remaining pixels becomes inNewMaximum.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inNewMinimum">Desired minimum value of the resulting image. Default value: 0.0f.</param>
            <param name="inNewMaximum">Desired maximum value of the resulting image. Default value: 255.0f.</param>
            <param name="inSaturateBrightestFraction">Fraction of the brightest pixels skipped during normalization. Default value: 0.0f.</param>
            <param name="inSaturateDarkestFraction">Fraction of the darkest pixels skipped during normalization. Default value: 0.0f.</param>
            <param name="outImage">Rescaled image.</param>
            <param name="outA">Multiplicative parameter of the applied linear transformation of pixel values.</param>
            <param name="outB">Additive parameter of the applied linear transformation of pixel values.</param>
            <param name="diagLinearNormalizedRegion">Region of image that has been linearly normalized.</param>
        </member>
        <member name="M:avs.DrawShapeRegions_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.ShapeRegion&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServic">
            <summary>Draws ShapeRegion objects on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inShapeRegions">Default value: { }.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawShapeRegions_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.ShapeRegion&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerS">
            <summary>Draws ShapeRegion objects on an image with two colors, depending on the status of each ShapeRegion (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inShapeRegions">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawShapeRegions_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.ShapeRegion&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDerefe">
            <summary>Draws ShapeRegion objects on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inShapeRegions">Default value: { }.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawDimensionLines_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Segment2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.MetricUnit.Type,System.Single,System.Boolean!System.Runtime.Com">
            <summary>Draws dimension lines on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inSegments">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inHeadSize">Default value: 5.0f.</param>
            <param name="inScale">px / mm. Default value: 1.0f.</param>
            <param name="inMetricUnit">Default value: Millimetres.</param>
            <param name="inTextSize">Default value: 12.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawDimensionLines_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Segment2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerS">
            <summary>Draws dimension lines on an image with two colors, depending on the status of each dimension line (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inSegments">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inHeadSize">Default value: 5.0f.</param>
            <param name="inScale">px / mm. Default value: 1.0f.</param>
            <param name="inMetricUnit">Default value: Millimetres.</param>
            <param name="inTextSize">Default value: 12.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawDimensionLines_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Segment2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.MetricUnit.Type,System.Single,System.Boolean!System.Runtime.CompilerServices.IsConst">
            <summary>Draws dimension lines on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inSegments">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inHeadSize">Default value: 5.0f.</param>
            <param name="inScale">px / mm. Default value: 1.0f.</param>
            <param name="inMetricUnit">Default value: Millimetres.</param>
            <param name="inTextSize">Default value: 12.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawStringLabels_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.StringLabel&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Bo">
            <summary>Draws strings (text) on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inLabels">String to draw. Default value: { }.</param>
            <param name="inLocationAnchor">Default value: MiddleCenter.</param>
            <param name="inColors">Color for each string to be drawn. Default value: atl::NIL.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inSize">Height of a character in pixels. Default value: 16.0f.</param>
            <param name="inOrientationAngle">Orientation of text in degrees. Default value: 0.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="inBackgroundColor">Color of pixels drawn on image in text row. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawStringLabels_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.StringLabel&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.">
            <summary>Draws strings (text) on an image with two colors, depending on the status of each string (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inLabels">Default value: { }.</param>
            <param name="inLocationAnchor">Default value: MiddleCenter.</param>
            <param name="inColorIfTrue">Color corresponding to True value on inCondition input. Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Color corresponding to False value on inCondition input. Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inSize">Height of a character in pixels. Default value: 16.0f.</param>
            <param name="inOrientationAngle">Orientation of text in degrees. Default value: 0.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="inBackgroundColor">Color of pixels drawn on image in text row. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawStringLabels_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.StringLabel&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Boolean!System.Runtime.">
            <summary>Draws strings (text) on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inLabels">Strings to be drawn. Default value: { }.</param>
            <param name="inLocationAnchor">Default value: MiddleCenter.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inSize">Height of a character in pixels. Default value: 16.0f.</param>
            <param name="inOrientationAngle">Orientation of text in degrees. Default value: 0.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="inBackgroundColor">Color of pixels drawn on image in text row. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawStrings_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;atl.String&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Location&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Dr">
            <summary>Draws strings (text) on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inStrings">String to draw. Default value: { }.</param>
            <param name="inLocations">Center point of each string to draw. Default value: { }.</param>
            <param name="inLocationAnchor">Default value: MiddleCenter.</param>
            <param name="inColors">Color for each string to be drawn. Default value: atl::NIL.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inSize">Height of a character in pixels. Default value: 16.0f.</param>
            <param name="inOrientationAngle">Orientation of text in degrees. Default value: 0.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="inBackgroundColor">Color of pixels drawn on image in text row. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawStrings_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;atl.String&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Location&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.Comp">
            <summary>Draws strings (text) on an image with two colors, depending on the status of each string (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inStrings">Default value: { }.</param>
            <param name="inLocations">Default value: { }.</param>
            <param name="inLocationAnchor">Default value: MiddleCenter.</param>
            <param name="inColorIfTrue">Color corresponding to True value on inCondition input. Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Color corresponding to False value on inCondition input. Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inSize">Height of a character in pixels. Default value: 16.0f.</param>
            <param name="inOrientationAngle">Orientation of text in degrees. Default value: 0.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="inBackgroundColor">Color of pixels drawn on image in text row. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawStrings_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;atl.String&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Location&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Run">
            <summary>Draws strings (text) on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inStrings">Strings to be drawn. Default value: { }.</param>
            <param name="inLocations">Center position of strings. Default value: { }.</param>
            <param name="inLocationAnchor">Default value: MiddleCenter.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inSize">Height of a character in pixels. Default value: 16.0f.</param>
            <param name="inOrientationAngle">Orientation of text in degrees. Default value: 0.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="inBackgroundColor">Color of pixels drawn on image in text row. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRegionsOfInterest_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.RegionOfInterest&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws regions of interest on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRois">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRegionsOfInterest_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.RegionOfInterest&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime">
            <summary>Draws regions of interest on an image with two colors, depending on the status of each region (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inRois">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRegionsOfInterest_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.RegionOfInterest&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws regions of interest on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRois">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRegions_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Region&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws regions on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRegions">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRegions_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Region&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.Is">
            <summary>Draws regions on an image with two colors, depending on the status of each region (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inRegions">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRegions_SingleColor_Linked(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Region&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws regions on an image with a single color. In-place version.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRegions">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRegions_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Region&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws regions on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRegions">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawBoxes_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Box&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws boxes on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inBoxes">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawBoxes_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Box&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image">
            <summary>Draws boxes on an image with two colors, depending on the status of each box (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inBoxes">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawBoxes_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Box&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws boxes on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inBoxes">Default value: { }.</param>
            <param name="inOpacity">Default value: 1.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawCoordinateSystems_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.CoordinateSystem2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.">
            <summary>Draws coordinate systems on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inCoordinateSystems">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inArrowSize">Default value: 5.0f.</param>
            <param name="inPixelScale">How many pixels long will be axis of a coordinate system with unit scale. Default value: 20.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawCoordinateSystems_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.CoordinateSystem2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runti">
            <summary>Draws coordinate systems on an image with two colors, depending on the status of each coordinate system (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inCoordinateSystems">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inArrowSize">Default value: 5.0f.</param>
            <param name="inPixelScale">How many pixels long will be axis of a coordinate system with unit scale. Default value: 20.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawCoordinateSystems_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.CoordinateSystem2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsCo">
            <summary>Draws coordinate systems on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inCoordinateSystems">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inArrowSize">Default value: 5.0f.</param>
            <param name="inPixelScale">How many pixels long will be axis of a coordinate system with unit scale. Default value: 20.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRectangles_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Rectangle2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices">
            <summary>Draws rectangles on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRectangles">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRectangles_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Rectangle2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerSer">
            <summary>Draws rectangles on an image with two colors, depending on the status of each rectangle (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inRectangles">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawRectangles_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Rectangle2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDerefere">
            <summary>Draws rectangles on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRectangles">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawPoints_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Point2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImpli">
            <summary>Draws points on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPoints">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawPoints_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Point2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.Is">
            <summary>Draws points on an image with two colors, depending on the status of each point (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inPoints">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawPoints_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Point2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws points on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPoints">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawPaths_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Path&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitl">
            <summary>Draws paths on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPaths">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawPaths_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Path&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImpl">
            <summary>Draws paths on an image with two colors, depending on the status of each path (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inPaths">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawPaths_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Path&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws paths on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPaths">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawLines_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Line2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplici">
            <summary>Draws lines on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inLines">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawLines_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Line2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsIm">
            <summary>Draws lines on an image with two colors, depending on the status of each line (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inLines">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawLines_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Line2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws lines on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inLines">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawVectors_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Vector2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Point2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!Syste">
            <summary>Draws vectors at associated initial points on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inVectors">Default value: { }.</param>
            <param name="inInitialPoints">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inHeadSize">Default value: 5.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawVectors_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Vector2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Point2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsI">
            <summary>Draws vectors on an image with two colors, depending on the status of each vector (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inVectors">Default value: { }.</param>
            <param name="inInitialPoints">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inHeadSize">Default value: 5.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawVectors_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Vector2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Point2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerSer">
            <summary>Draws vectors on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inVectors">Default value: { }.</param>
            <param name="inInitialPoints">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inHeadSize">Default value: 5.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawSegments_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Segment2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MarkerType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplic">
            <summary>Draws segments on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inSegments">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inMarkerType">Default value: Arrow.</param>
            <param name="inMarkerSize">Default value: 5.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawSegments_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Segment2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerService">
            <summary>Draws segments on an image with two colors, depending on the status of each segment (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inSegments">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inMarkerType">Default value: Arrow.</param>
            <param name="inMarkerSize">Default value: 5.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawSegments_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Segment2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MarkerType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Syst">
            <summary>Draws segments on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inSegments">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inMarkerType">Default value: Arrow.</param>
            <param name="inMarkerSize">Default value: 5.0f.</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawArcs_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Arc2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitl">
            <summary>Draws arcs on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inArcs">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawArcs_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Arc2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImpl">
            <summary>Draws arcs on an image with two colors, depending on the status of each arc (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inArcs">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawArcs_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Arc2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws arcs on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inArcs">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawEllipses_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Rectangle2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.I">
            <summary>Draws ellipses on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inEllipses">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawEllipses_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Rectangle2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServi">
            <summary>Draws ellipses on an image with two colors, depending on the status of each ellipse (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inEllipses">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawEllipses_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Rectangle2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenc">
            <summary>Draws ellipses on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inEllipses">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawCircles_Palette(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Circle2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Pixel&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImp">
            <summary>Draws circles on an image with multiple colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inCircles">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawCircles_TwoColors(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Circle2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;System.Boolean&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.">
            <summary>Draws circles on an image with two colors, depending on the status of each circle (usually: green or red for pass/fail status).</summary>
            <param name="inImage">Input image.</param>
            <param name="inCircles">Default value: { }.</param>
            <param name="inColorIfTrue">Default value: Pixel ( X: 0.0f Y: 200.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inColorIfFalse">Default value: Pixel ( X: 200.0f Y: 0.0f Z: 0.0f W: 0.0f ).</param>
            <param name="inConditions">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avs.DrawCircles_SingleColor(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Circle2D&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws circles on an image with a single color.</summary>
            <param name="inImage">Input image.</param>
            <param name="inCircles">Default value: { }.</param>
            <param name="inDrawingStyle">Default value: DrawingStyle ( DrawingMode: HighQuality  Opacity: 1.0f  Thickness: 1.0f  Filled: False  PointShape: Nil  PointSize: 1.0f ).</param>
            <param name="inForceRgb">Filter will convert monochromatic image to RGB if needed. Default value: True.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DrawGridImage(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">
            <summary>Draws an image as a tile on an image considered to be a grid of tiles.</summary>
            <param name="inTileImage">Image to be pasted to the grid.</param>
            <param name="inColumnIndex">Column index in the grid.</param>
            <param name="inRowIndex">Row index in the grid.</param>
        </member>
        <member name="M:avl.DrawImages(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Image&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;atl.Conditional&lt;avl.Location&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws an array of images on an image.</summary>
            <param name="inDrawnImages">Images to be pasted on ioImage.</param>
            <param name="inLocations">Locations at which the image will be pasted.</param>
        </member>
        <member name="M:avl.DrawImage(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws an image on another one.</summary>
            <param name="inDrawnImage">Image to be pasted on ioImage.</param>
            <param name="inLocation">Location at which the image will be pasted.</param>
        </member>
        <member name="M:avl.DrawShapeRegion(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ShapeRegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws a ShapeRegion object on an image.</summary>
        </member>
        <member name="M:avl.DrawDimensionLine(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.MetricUnit.Type,System.Single)">
            <summary>Draws a dimension line on an image.</summary>
            <param name="inHeadSize">Default value: 5.0f.</param>
            <param name="inScale">px / mm. Default value: 1.0f.</param>
            <param name="inMetricUnit">Default value: avl::MetricUnit::Millimeters.</param>
            <param name="inTextSize">Default value: 12.0f.</param>
        </member>
        <member name="M:avl.DrawString(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,atl.Optional&lt;avl.Pixel&gt;!Sys">
            <summary>Draws a string on an image.</summary>
            <param name="inLocationAnchor">Default value: MiddleCenter.</param>
            <param name="inSize">Height of a character. Default value: 12.0f.</param>
            <param name="inOrientationAngle">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.DrawRegionOfInterest(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionOfInterest!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>Draws a region of interest on an image.</summary>
            <param name="inRoi">Range of pixels to be processed.</param>
        </member>
        <member name="M:avl.DrawRegion(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>Draws a region on an image.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.DrawBox(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>Draws a box on an image.</summary>
        </member>
        <member name="M:avl.DrawCoordinateSystem(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>Draws a pair of arrows representing a coordinate system on an image.</summary>
            <param name="inArrowSize">Default value: 5.0f.</param>
            <param name="inPixelScale">How many pixels long will be axis of a coordinate system with unit scale. Default value: 20.0f.</param>
        </member>
        <member name="M:avl.DrawRectangle(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws a rectangle on an image.</summary>
        </member>
        <member name="M:avl.DrawPoint(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws a point on an image.</summary>
        </member>
        <member name="M:avl.DrawPath(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws a path on an image.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.DrawLine(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws a line on an image.</summary>
        </member>
        <member name="M:avl.DrawVector(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>Draws a vector at an associated initial point on an image.</summary>
            <param name="inHeadSize">Default value: 5.0f.</param>
        </member>
        <member name="M:avl.DrawSegment(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MarkerType.Type!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)">
            <summary>Draws a segment on an image.</summary>
            <param name="inMarkerType">Default value: Arrow.</param>
            <param name="inMarkerSize">Default value: 5.0f.</param>
        </member>
        <member name="M:avl.DrawArc(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws an arc on an image.</summary>
        </member>
        <member name="M:avl.DrawEllipse(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws an ellipse on an image.</summary>
        </member>
        <member name="M:avl.DrawCircle(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DrawingStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Draws a circle on an image.</summary>
        </member>
        <member name="M:avl.AddChannels_Saturation(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a monochromatic image by summing the values of the input image channels with saturation.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">output mono image.</param>
        </member>
        <member name="M:avl.AddChannels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a monochromatic image by summing the values of the input image channels.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">output mono image.</param>
        </member>
        <member name="M:avl.SplitChannels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Creates several monochromatic images from individual channels of the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="outMonoImage1">Image of the first channel.</param>
            <param name="outMonoImage2">Image of the second channel.</param>
            <param name="outMonoImage3">Image of the third channel (if exists).</param>
            <param name="outMonoImage4">Image of the fourth channel (if exists).</param>
        </member>
        <member name="M:avl.ReverseChannels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reverses the order of channels in an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="outImage">Output image with reversed channels.</param>
        </member>
        <member name="M:avl.MergeChannels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a multichannel image from several monochromatic ones.</summary>
            <param name="inMonoImage1">An image that becomes the first channel.</param>
            <param name="inMonoImage2">An image that becomes the second channel.</param>
            <param name="inMonoImage3">An image that becomes the third channel. Default value: atl::NIL.</param>
            <param name="inMonoImage4">An image that becomes the fourth channel. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AverageChannels_Weighted(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,System.Int32,System.Int32,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a monochromatic image from weighted averages of the input image channels.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inWeight1">Weight of the first channel.</param>
            <param name="inWeight2">Weight of the second channel.</param>
            <param name="inWeight3">Weight of the third channel.</param>
            <param name="inWeight4">Weight of the fourth channel.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AverageChannels_Linked(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a monochromatic image by averaging the input image channels. The output image may keep a reference to data owned by the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AverageChannels(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a monochromatic image by averaging the input image channels.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SelectChannel(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image from a single channel of the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ConvertPixelType(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.PlainType.Type,System.Int32,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the type of pixel components.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inNewType">Type of the output image. Default value: UInt8.</param>
            <param name="inDepthDelta">Pixel values will be multiplied by 2^inDepthDelta. For example, use -4 to convert 12-bit to 8-bit images. Default value: 0.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ConvertToMultichannel(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a multichannel image from a monochromatic one by replicating its channel.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inNewDepth">Default value: 3.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.NthImage_OfArray(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>For each pixel location, get value of n-th (increasing) pixel among input images.</summary>
            <param name="inReverse">Reverse the ordering of pixel values to decreasing. Default value: False.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MedianImages_OfArray(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Compute median value for each pixel of images from an array.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AverageImages_OfArray(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Averages images from an array pixel by pixel.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DifferenceImage_Flex(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.TileTranslationMode.Type,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the non-negative distances between corresponding pixel values using tiles.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inTileWidth">Default value: 16.</param>
            <param name="inTileTranslationMode">Default value: FourDirections.</param>
            <param name="inOutputFromColorImage">Flag indicating whether to use every channel of the input images separately to compute results or only channels average. Default value: False.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.VisualizeHeatMap(avl.ColorizeImageState,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ColorPalette.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Colorizes heat-map and blends it with background image</summary>
            <param name="inImage">Input image.</param>
            <param name="inHeatMap">Confidence of defect at each pixel.</param>
            <param name="inPalette">Default value: BlackYellowRed.</param>
            <param name="inThreshold">Minimum defect confidence for choosing more of heat-map color than of input image color. Default value: 64.</param>
            <param name="inFuzziness">Confidence distance from inThreshold within which heat-map colors and input image colors are linearly interpolated; Auto = INF. Default value: 0.</param>
            <param name="inMinValue">Default value: 0.</param>
            <param name="inMaxValue">Default value: 255.</param>
            <param name="inForceMono">Converts input image to monochromatic.</param>
            <param name="outImage">Output image.</param>
            <param name="diagPalette">Used palette preview.</param>
        </member>
        <member name="M:avl.BlendImages(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes weighted sum pixel by pixel.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inAmount1">Default value: 0.5f.</param>
            <param name="inAmount2">Default value: 0.5f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.LerpImages(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Interpolates two images linearly pixel by pixel.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inLambda">Interpolation between the input images where 0.0 value is equal to inImage0 and 1.0 to inImage1. Default value: 0.5f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ComposeImages(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Takes pixels from the first image within the specified region and from the other one elsewhere.</summary>
            <param name="inImage1">First source of pixels marked in inRegion.</param>
            <param name="inImage2">Background image.</param>
            <param name="inRegion">Region which describes which pixels should be taken from inImage1.</param>
            <param name="inRoi">Region in which pixels should be processed otherwise black pixels are placed. Default value: atl::NIL.</param>
            <param name="outImage">Image composed of tho input images.</param>
        </member>
        <member name="M:avl.MaximumImage_OfLoop(avl.MaximumImage_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the maximum of images appearing in consecutive iterations pixel by pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MaximumImage_OfArray(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the maximum of images of an array pixel by pixel.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MaximumImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image from the higher pixel values of each corresponding pair.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MinimumImage_OfLoop(avl.MinimumImage_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the minimum of images appearing in consecutive iterations pixel by pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MinimumImage_OfArray(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the minimum of images of an array pixel by pixel.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MinimumImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image from the lower pixel values of each corresponding pair.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AverageImages(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Averages two images pixel by pixel.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DifferenceImage_Shifted(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the non-negative distances between corresponding pixel values.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DifferenceImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the non-negative distances between corresponding pixel values.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DivideImages(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Divides two images pixel by pixel.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inScale">Output image scaling factor. Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MultiplyImages_OfLoop(avl.MultiplyImages_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies images appearing in consecutive iterations pixel by pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inScale">Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MultiplyImages_OfArray(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies images of an array pixel by pixel.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inScale">Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MultiplyImages(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies two images pixel by pixel.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inScale">Output image scaling factor. Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SubtractImages(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Subtracts two images pixel by pixel. The result is signed.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inScale">Output image scaling factor. Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AddImages_OfLoop(avl.AddImages_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds images appearing in consecutive iterations pixel by pixel.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inScale">Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AddImages_OfArray(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds images of an array pixel by pixel.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inScale">Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.AddImages(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds two images pixel by pixel.</summary>
            <param name="inImage1">First input image.</param>
            <param name="inImage2">Second input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inScale">Output image scaling factor. Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.LabToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from L*a*b* to Red-Green-Blue.</summary>
        </member>
        <member name="M:avl.RgbToLab(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Red-Green-Blue to L*a*b*.</summary>
        </member>
        <member name="M:avl.Rgb555ToRgb888(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a RGB555 image into a RGB888 one.</summary>
        </member>
        <member name="M:avl.Rgb888ToRgb555(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a RGB888 image into a RGB555 one.</summary>
        </member>
        <member name="M:avl.Rgb565ToRgb888(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a RGB565 image into a RGB888 one.</summary>
        </member>
        <member name="M:avl.Rgb888ToRgb565(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a RGB888 image into a RGB565 one.</summary>
        </member>
        <member name="M:avl.YCoCgToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from pseudointensitY-Orange-Green into Red-Green-Blue.</summary>
        </member>
        <member name="M:avl.RgbToYCoCg(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Red-Green-Blue into pseudointensitY-Orange-Green.</summary>
        </member>
        <member name="M:avl.CmykToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Cyan-Magenta-Yellow-Key into Red-Green-Blue.</summary>
        </member>
        <member name="M:avl.RgbToCmyk(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Red-Green-Blue into Cyan-Magenta-Yellow-Key.</summary>
        </member>
        <member name="M:avl.RgbToHsi(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Red-Green-Blue into Hue-Saturation-Intensity.</summary>
        </member>
        <member name="M:avl.HsiToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Hue-Saturation-Intensity into Red-Green-Blue.</summary>
        </member>
        <member name="M:avl.YuvToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from YUV into Red-Green-Blue.</summary>
        </member>
        <member name="M:avl.RgbToYuv(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Red-Green-Blue into YUV.</summary>
        </member>
        <member name="M:avl.XyzToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from XYZ to Red-Green-Blue.</summary>
        </member>
        <member name="M:avl.RgbToXyz(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Red-Green-Blue to XYZ.</summary>
        </member>
        <member name="M:avl.RgbToHsl(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Red-Green-Blue to Hue-Saturation-Luminance.</summary>
        </member>
        <member name="M:avl.HslToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Hue-Saturation-Luminance to Red-Green-Blue.</summary>
        </member>
        <member name="M:avl.RgbToBayer(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BayerType.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a RGB color image into Bayer-encoded color image.</summary>
        </member>
        <member name="M:avl.BayerToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BayerType.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a Bayer-encoded color image into RGB color space.</summary>
        </member>
        <member name="M:avl.Yuv442ToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a YUV-encoded image into RGB color space.</summary>
        </member>
        <member name="M:avl.HsvToRgb(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Hue-Saturation-Value to Red-Green-Blue.</summary>
        </member>
        <member name="M:avl.RgbToHsv(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts color space from Red-Green-Blue to Hue-Saturation-Value.</summary>
        </member>
        <member name="M:avs.AvsFilter_AccessImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PlainType.Type*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="outWidth">Output image width.</param>
            <param name="outHeight">Output image height.</param>
            <param name="outDepth">Output number of image color channels.</param>
            <param name="outType">Output pixel format.</param>
            <param name="outPixelSize">Output pixel size in bytes.</param>
            <param name="outPitch">Length of images pixel line with padding.</param>
        </member>
        <member name="M:avl.ExpandImagePitch(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new image with additional pitch size.</summary>
            <param name="inImage">Input array.</param>
            <param name="inDeltaPitch">Additional pitch bytes for line.</param>
            <param name="outImage">Element from the array.</param>
        </member>
        <member name="M:avl.AvsFilter_GetImageArrayElement_Linked(atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts a single element from an array of images at the specified index.</summary>
            <param name="inArray">Input array.</param>
            <param name="inIndex">Index within the array.</param>
            <param name="inInverse">Reversed order in the array. Default value: False.</param>
            <param name="outImage">Element from the array.</param>
        </member>
        <member name="M:avl.CreateImageFromSurface(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PlainType.Type,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Double&gt;,atl.Optional&lt;System.Single&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image of z-values of the given points.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inPixelType">Output image pixel type. Default value: Real.</param>
            <param name="inPixelOffset">Offset that the input surface values have in the output image; if set to Nil, surface zOffset is chosen. Default value: atl::NIL.</param>
            <param name="inPixelScale">Scale that the input surface values have in the output image; if set to Nil, surface zScale is chosen. Default value: 1.0D.</param>
            <param name="inMissingPointValue">Value assigned to pixels where point is undefined. Default value: 0.0f.</param>
            <param name="outImage">Input surface depth image.</param>
        </member>
        <member name="M:avl.CreateImageFromPoint3DGrid(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image of z-values of the given points.</summary>
            <param name="inMissingPointValue">Value assigned to pixels where point is undefined.</param>
            <param name="inPixelOffset">Value added to every pixel. Default value: 0.0f.</param>
            <param name="inPixelScale">Value every pixel is multiplied by. Default value: 1.0f.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.RealignImagePitch(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new image with a standard pitch alignment.</summary>
            <param name="inImage">Input image.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.JoinProfilesIntoImage_OfSeries(avl.JoinProfilesIntoImage_OfSeriesState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Conditional&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image by joining 1D profiles, which appear in consecutive iterations.</summary>
            <param name="inProfile">Input profile.</param>
            <param name="inSeriesSize">Number of profiles that constitute a single image.</param>
            <param name="outImage">A depth image every inSeriesSize iterations, or Nil in all other iterations.</param>
        </member>
        <member name="M:avl.JoinProfilesIntoImage(atl.Array&lt;avl.Profile&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image by joining an array of 1D profiles into consecutive image rows.</summary>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.LoadImageObject(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized Image object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outImage">Deserialized output Image.</param>
        </member>
        <member name="M:avl.SaveImageObject(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized Image object as avdata file.</summary>
            <param name="inImage">Image to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.MakeImage(atl.Array&lt;avl.Pixel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.PlainType.Type,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a pixel array to a single-channel image.</summary>
            <param name="inWidth">Output image width.</param>
            <param name="inHeight">Output image height.</param>
            <param name="inType">Output image pixel type. Default value: UInt8.</param>
            <param name="inDepth">Output image depth.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.MatrixToImage(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a matrix image to a single-channel real image.</summary>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ImageToMatrix(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a single-channel image to a matrix.</summary>
        </member>
        <member name="M:avl.ImageCharacteristicPoint(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a characteristic point of image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPointAnchor">Selecting one of the 9 characteristic points. Default value: TopLeft.</param>
        </member>
        <member name="M:avl.TestImage(avl.TestImageId.Type,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a sample image.</summary>
            <param name="inImageId">ID of test image.</param>
            <param name="outRgbImage">Output color image.</param>
            <param name="outMonoImage">Output mono image.</param>
        </member>
        <member name="M:avl.EmptyImage(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.PlainType.Type!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a uniform image.</summary>
            <param name="inWidth">Width of the created image. Default value: 320.</param>
            <param name="inHeight">Height of the created image. Default value: 240.</param>
            <param name="inColor">Color of all pixels of the created image.</param>
            <param name="inChannels">Number of channels. Default value: 3.</param>
            <param name="inPixelType">Default value: UInt8.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.ImageBox(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Produces the box of image dimensions</summary>
            <param name="inImage">Input image.</param>
            <param name="outBox">Output box.</param>
        </member>
        <member name="M:avl.SetImageColumn(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets pixel values in a single entire column of an image.</summary>
            <param name="inChannelIndex">Selects a channel of the input image. Default value: atl::NIL.</param>
            <param name="inColumnIndex">Selects a column of the input image.</param>
            <param name="inValues">New values for specified column.</param>
        </member>
        <member name="M:avl.GetImageColumn(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Pixel&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts an array of pixel values from a single column of an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inChannelIndex">Selects a channel of the input image. Default value: atl::NIL.</param>
            <param name="inColumnIndex">Selects a column of the input image.</param>
            <param name="outValues">Output pixel values of the column.</param>
            <param name="outPixels">Output pixels of the column.</param>
        </member>
        <member name="M:avl.SetImageRow(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets pixel values in a single entire row of an image.</summary>
            <param name="inChannelIndex">Selects a channel of the input image. Default value: atl::NIL.</param>
            <param name="inRowIndex">Selects a row of the input image.</param>
            <param name="inValues">New values for specified row.</param>
        </member>
        <member name="M:avl.GetImageRow(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Pixel&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts an array of pixel values from a single row of an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inChannelIndex">Selects a channel of the input image. Default value: atl::NIL.</param>
            <param name="inRowIndex">Selects a row of the input image.</param>
            <param name="outValues">Output pixel values of the row.</param>
            <param name="outPixels">Output pixels of the row.</param>
        </member>
        <member name="M:avl.SetImagePixels(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Location&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets pixels of an image to the selected value.</summary>
            <param name="inLocations">Locations of the pixels to be set.</param>
            <param name="inPixel">New pixel value.</param>
        </member>
        <member name="M:avl.SetImagePixel(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets a pixel of an image to the selected value.</summary>
            <param name="inLocation">Location of the pixel to be set.</param>
            <param name="inPixel">New pixel value.</param>
        </member>
        <member name="M:avl.GetImagePixel_Interpolated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.InterpolationMethod.Type,avl.Pixel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns an interpolated single pixel of an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPoint">Point on the input image to be accessed.</param>
            <param name="inInterpolation">Default value: Bilinear.</param>
            <param name="outPixel">Output pixel.</param>
            <param name="outValue">Average pixel value.</param>
        </member>
        <member name="M:avl.GetImagePixel(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a single pixel of an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inLocation">Location of the pixel to be accessed.</param>
            <param name="outPixel">Output pixel.</param>
            <param name="outValue">Average pixel value.</param>
        </member>
        <member name="M:avl.ClearImage(avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sets image pixels to the specified value.</summary>
            <param name="inRegion">Input region. Default value: atl::NIL.</param>
            <param name="inValue">The new background color.</param>
        </member>
        <member name="M:avl.CopyImageData(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an image copy with the same size and pixel format.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.CropHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Confines a histogram to its continuous segment.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inStart">Index of the first element of the input histogram that will be included in the output histogram.</param>
            <param name="inLength">Number of bins in the output histogram.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.TestHistogramDominatesHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks whether values in the first histogram are greater or equal than corresponding values in the second histogram</summary>
            <param name="inHistogram1">Input histogram1.</param>
            <param name="inHistogram2">Input histogram2.</param>
        </member>
        <member name="M:avl.AbsoluteHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms each bin value to its absolute value.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.NegateHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Negates each bin value.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.SubtractFromHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Decreases each bin value by a number.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inValue">Input value. Default value: 2.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.AddToHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Increases each bin value by a number.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inValue">Input value. Default value: 0.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.DivideHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Divides each bin value by a number.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inValue">Input value. Default value: 2.0f.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MultiplyHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies each bin value by a number.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inValue">Input value. Default value: 2.0f.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.HistogramIntersection(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates normalized histogram intersection norm.</summary>
            <param name="inHistogram1">First input histogram.</param>
            <param name="inHistogram2">Second input histogram.</param>
        </member>
        <member name="M:avl.HistogramDistance(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DistanceMeasure.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the numeric distance between two histograms.</summary>
            <param name="inHistogram1">First input histogram.</param>
            <param name="inHistogram2">Second input histogram.</param>
            <param name="inDistanceMeasure">Measure of distance.</param>
            <param name="outDistance">Output distance value.</param>
        </member>
        <member name="M:avl.SmoothHistogram_Mean(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths a histogram by averaging points within a kernel.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inKernelRadius">Defines the width of the kernel as 2*R+1. Default value: 3.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.SmoothHistogram_Gauss(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Smooths a histogram by averaging points within a kernel using gaussian-weighted average.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inStdDev">Smoothing standard deviation. Default value: 0.6f.</param>
            <param name="inKernelRelativeSize">Default value: 3.0f.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.HistogramLocalMinima(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the histogram local minima.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outMinimaLocations">Output minima locations.</param>
            <param name="outMinimaValues">Output minima values.</param>
        </member>
        <member name="M:avl.HistogramLocalMaxima(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the histogram local maxima.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outMaximaLocations">Output maxima locations.</param>
            <param name="outMaximaValues">Output maxima values.</param>
        </member>
        <member name="M:avl.HistogramSize(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the number of histogram bins.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outSize">Output size.</param>
        </member>
        <member name="M:avl.HistogramSum(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the sum of histogram bin values.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outSum">Output sum.</param>
        </member>
        <member name="M:avl.HistogramMinimum(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes histogram bar values minimum - its location and value.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outMinimumLocation">Output minimum location.</param>
            <param name="outMinimumValue">Output minimum value.</param>
        </member>
        <member name="M:avl.HistogramMaximum(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes histogram bar values maximum - its location and value.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outMaximumLocation">Output maximum location.</param>
            <param name="outMaximumValue">Output maximum value.</param>
        </member>
        <member name="M:avl.HistogramAverage(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average of histogram bin values.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outAverage">Output average.</param>
        </member>
        <member name="M:avl.HistogramDataQuantile(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the specified quantile of the histogrammed numeric data.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inQuantilePoint">Default value: 0.5f.</param>
        </member>
        <member name="M:avl.HistogramDataMedian(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the median of the histogrammed numeric data.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outMedian">Median of the histogrammed data.</param>
        </member>
        <member name="M:avl.HistogramDataNthValue(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.SortingOrder.Type!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes nth smallest (or largest) value of the histogrammed numeric data.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outNthValue">Nth smallest (or largest) value of the histogrammed data.</param>
        </member>
        <member name="M:avl.HistogramDataSize(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the number of elements of the histogrammed numeric data.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outSize">Number of elements of the histogrammed data.</param>
        </member>
        <member name="M:avl.HistogramDataMaximum(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the approximation of the largest value of the histogrammed numeric data.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outMaximum">Maximum of the histogrammed data.</param>
        </member>
        <member name="M:avl.HistogramDataMinimum(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the approximation of the smallest value of the histogrammed numeric data.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outMinimum">Minimum of the histogrammed data.</param>
        </member>
        <member name="M:avl.HistogramDataStandardDeviation(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the standard deviation of the histogrammed numeric data.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outStandardDeviation">Standard deviation of the histogrammed data.</param>
        </member>
        <member name="M:avl.HistogramDataVariance(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the variance of the histogrammed numeric data.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outVariance">Variance of the histogrammed data.</param>
        </member>
        <member name="M:avl.HistogramDataAverage(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average of the histogrammed numeric data.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outAverage">Average of the histogrammed data.</param>
        </member>
        <member name="M:avl.DifferenceHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes histogram representing difference between corresponding bars of given histograms.</summary>
            <param name="inHistogram1">Input histogram1.</param>
            <param name="inHistogram2">Input histogram2.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MinimumHistogram_OfLoop(avl.MinimumHistogram_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the minimum of histograms appearing in consecutive iterations bar by bar.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MinimumHistogram_OfArray(atl.Array&lt;avl.Histogram&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the minimum of histograms of an array bar by bar.</summary>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MinimumHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the minimum of two histograms bar by bar.</summary>
            <param name="inHistogram1">Input histogram1.</param>
            <param name="inHistogram2">Input histogram2.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MaximumHistogram_OfLoop(avl.MaximumHistogram_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the maximum of histograms appearing in consecutive iterations bar by bar.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MaximumHistogram_OfArray(atl.Array&lt;avl.Histogram&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the maximum of histograms of an array bar by bar.</summary>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MaximumHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the maximum of two histograms bar by bar.</summary>
            <param name="inHistogram1">Input histogram1.</param>
            <param name="inHistogram2">Input histogram2.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.DivideHistograms(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Divides two histograms bar by bar.</summary>
            <param name="inHistogram1">Input histogram1.</param>
            <param name="inHistogram2">Input histogram2.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MultiplyHistograms_OfLoop(avl.MultiplyHistograms_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiply histograms appearing in consecutive iterations bar by bar.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MultiplyHistograms_OfArray(atl.Array&lt;avl.Histogram&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiply histograms of an array bar by bar.</summary>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.MultiplyHistograms(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Multiplies two histograms bar by bar.</summary>
            <param name="inHistogram1">Input histogram1.</param>
            <param name="inHistogram2">Input histogram2.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.SubtractHistograms(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Subtracts two histograms bar by bar.</summary>
            <param name="inHistogram1">Input histogram1.</param>
            <param name="inHistogram2">Input histogram2.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.AddHistograms_OfLoop(avl.AddHistograms_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds histograms appearing in consecutive iterations bar by bar.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.AddHistograms_OfArray(atl.Array&lt;avl.Histogram&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds histograms of an array bar by bar.</summary>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.AddHistograms(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds two histograms bar by bar.</summary>
            <param name="inHistogram1">Input histogram1.</param>
            <param name="inHistogram2">Input histogram2.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a histogram.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outBinSize">Output bin size.</param>
            <param name="outDomainStart">Output domain begin.</param>
            <param name="outDomainLength">Output length of domain.</param>
            <param name="outBins">Output histogram data.</param>
        </member>
        <member name="M:avl.SkipEmptyDataHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Histogram&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input histogram contains any non-zero bin, then the histogram is copied to the output; otherwise Nil is returned.</summary>
            <param name="inHistogram">Input histogram.</param>
        </member>
        <member name="M:avl.SkipEmptyHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Histogram&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input histogram contains at least one bin, then it is copied to the output; otherwise Nil is returned.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outNotEmptyHistogram">The histogram, if it is not empty.</param>
            <param name="outIsNotEmpty">Indication if the input histogram is not empty.</param>
        </member>
        <member name="M:avl.ConvertToCumulativeHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the cumulative histogram of input histogram.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.LoadHistogram(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized Histogram object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outHistogram">Deserialized output Histogram.</param>
        </member>
        <member name="M:avl.SaveHistogram(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized Histogram object as avdata file.</summary>
            <param name="inHistogram">Histogram to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.CreateHistogram(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates the histogram of the array of real numbers.</summary>
            <param name="inArray">Array from which histogram will be generated.</param>
            <param name="inWeights">Weights corresponding to the elements of 'inArray'. Default value: atl::NIL.</param>
            <param name="inBinSize">Input bin size. Default value: 1.0f.</param>
            <param name="inDomainStart">Input domain begin. Default value: atl::NIL.</param>
            <param name="inDomainLength">Input domain length. Default value: atl::NIL.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.HistogramIndices(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns an array of histogram elements indices</summary>
            <param name="inHistogram">Input histogram.</param>
        </member>
        <member name="M:avl.SetHistogramCorrespondingBin(avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Int32)">
            <summary>Selects a bin that the given value in the histogram domain falls into and sets the value of this bin.</summary>
            <param name="inBinSelectionValue">Input value in the histogram domain that will be used to select the bin.</param>
            <param name="inNewValue">Input new value to be set.</param>
        </member>
        <member name="M:avl.GetHistogramCorrespondingBin(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Selects a bin that the given value in the histogram domain falls into and returns the value of this bin.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inBinSelectionValue">Input value in the histogram domain that will be used to select the bin.</param>
            <param name="outValue">Output value of the bin.</param>
        </member>
        <member name="M:avl.SetHistogramBin(avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Int32)">
            <summary>Sets the value of a single histogram bin.</summary>
            <param name="inIndex">Input bin index.</param>
            <param name="inInverse">Reversed order of bins.</param>
            <param name="inNewValue">Input new value to be set.</param>
        </member>
        <member name="M:avl.GetHistogramBin(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the value of a single histogram bin.</summary>
            <param name="inHistogram">Input histogram.</param>
            <param name="inIndex">Input bin index.</param>
            <param name="inInverse">Reversed order of bins.</param>
            <param name="outValue">Output value of the bin.</param>
        </member>
        <member name="M:avl.CreateUniformHistogram(System.Int32,System.Single,System.Single,System.Single,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an uniform histogram of desired parameters with common value of all bins.</summary>
            <param name="inValue">Common value for all bins of the constructed histogram.</param>
            <param name="inBinSize">Length of the domain section represented by each bin. Default value: 1.0f.</param>
            <param name="inDomainStart">First value of the domain represented by the histogram. Default value: 0.0f.</param>
            <param name="inDomainLength">Length of the domain represented by the histogram. Default value: 256.0f.</param>
            <param name="outHistogram">The resulting histogram.</param>
        </member>
        <member name="M:avl.MakeHistogram(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a histogram assuming given bin values.</summary>
            <param name="inValues">Input array of bin values.</param>
            <param name="inDomainStart">Input domain begin. Default value: 0.0f.</param>
            <param name="inDomainLength">Input domain length. Default value: 256.0f.</param>
            <param name="inBinSize">Input length of the domain range covered by a single bin. Default value: 1.0f.</param>
            <param name="outHistogram">Output histogram.</param>
        </member>
        <member name="M:avl.RotateVector3D_Deprecated(avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,System.Boolean,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a 3D vector around another 3D vector (the axis).</summary>
            <param name="inAxisVector">Vector to rotate around,.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inUseAxisLength">Assume axis length to be the rotation angle, ignore inAngle (Rodrigues' Rotation).</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotatePoint3DArray_Deprecated(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,System.Boolean,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates an array of 3D points around an axis (point+vector) in 3D.</summary>
            <param name="inAxisVector">The direction vector of the rotation axis.</param>
            <param name="inCenter">An arbitrary point on the rotation axis.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inUseAxisLength">Assume axis length to be the rotation angle, ignore inAngle (Rodrigues' Rotation).</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotatePoint3D_Deprecated(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,System.Boolean,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a 3D point around an axis (point+vector) in 3D.</summary>
            <param name="inAxisVector">The direction vector of the rotation axis.</param>
            <param name="inCenter">An arbitrary point on the rotation axis.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inUseAxisLength">Assume axis length to be the rotation angle, ignore inAngle (Rodrigues' Rotation).</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.CropSegment3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a segment contained in a box in 3D from another segment in 3D.</summary>
        </member>
        <member name="M:avl.CropLine3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a segment contained in a box in 3D from a line in 3D.</summary>
        </member>
        <member name="M:avl.RotateCircle3D(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Circle3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a circle in 3D around an axis in 3D.</summary>
            <param name="inAxis">The rotation axis.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotatePlane(avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a plane in 3D around an axis in 3D.</summary>
            <param name="inAxis">The rotation axis.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotateLine3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a line in 3D around an axis in 3D.</summary>
            <param name="inAxis">The rotation axis.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotateSegment3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a segment in 3D around an axis in 3D.</summary>
            <param name="inAxis">The rotation axis.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotateVector3D(avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a 3D vector around another 3D vector (the axis).</summary>
            <param name="inAxisVector">Vector to rotate around.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotatePoint3DArray(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates an array of 3D points around an axis in 3D.</summary>
            <param name="inAxis">The rotation axis.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotatePoint3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a 3D point around an axis in 3D.</summary>
            <param name="inAxis">The rotation axis.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RescaleVector3D(avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Lengthens or shortens a 3D vector relatively preserving its direction.</summary>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.ResizeVector3D_Delta(avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extends length of a 3D vector by adding a value preserving its direction.</summary>
            <param name="inDelta">Value added to vector length. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ResizeVector3D(avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Lengthens or shortens a 3D vector preserving its direction.</summary>
            <param name="inNewLength">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.ResizeCircle3D_Delta(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Circle3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes radius of a circle in 3D by adding a value.</summary>
            <param name="inDelta">Value added to circle radius. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ResizeCircle3D(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Circle3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes radius of a circle in 3D.</summary>
            <param name="inNewSize">New value for radius. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.RescaleCircle3D(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Circle3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes radius of a circle in 3D and translates its center in relation to a reference point.</summary>
            <param name="inReferencePoint">The point to which the distance of the circle center is changed (circle center by default). Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslateCircle3D(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Circle3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shifts a circle in 3D by a vector.</summary>
            <param name="inCircle3D">Input circle.</param>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outCircle3D">Shifted circle.</param>
        </member>
        <member name="M:avl.RescalePlane(avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the input plane distance to a reference point.</summary>
            <param name="inReferencePoint">The point to which the distance of plane is changed.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslatePlane(avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shifts a plane in 3D by a vector.</summary>
            <param name="inPlane">Input plane.</param>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outPlane">Shifted plane.</param>
        </member>
        <member name="M:avl.RescaleLine3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the input line in 3D distance to a reference point.</summary>
            <param name="inLine3D">Input line in 3D.</param>
            <param name="inReferencePoint">The point to which the distance of line in 3D is changed.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslateLine3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shifts a line in 3D by a vector.</summary>
            <param name="inLine3D">Input line in 3D.</param>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outLine3D">Shifted line.</param>
        </member>
        <member name="M:avl.ReverseSegment3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Swaps the two endpoints of a segment in 3D.</summary>
        </member>
        <member name="M:avl.RescaleSegment3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Lengthens or shortens a segment in 3D relatively.</summary>
            <param name="inSegment3D">Input segment in 3D.</param>
            <param name="inReferencePoint">The point to which all distances change linearly (the mass center by default). Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor (negative values invert the segment). Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.ResizeSegment3D_Delta(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes length of a segment in 3D by adding a value preserving its orientation and center point.</summary>
            <param name="inDelta">Value added to segment length. Default value: 0.0f.</param>
            <param name="inAnchor">Anchor point, 0 means the beginning, 1 means the end of the segment. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.ResizeSegment3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Lengthens or shortens a segment in 3D to a new length preserving its orientation and center point.</summary>
            <param name="inNewLength">Default value: 1.0f.</param>
            <param name="inAnchor">Anchor point, 0 means the beginning, 1 means the end of the segment. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.TranslateSegment3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shifts a segment in 3D by a vector.</summary>
            <param name="inSegment3D">Input segment in 3D.</param>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outSegment3D">Shifted segment.</param>
        </member>
        <member name="M:avl.RescaleBox3D(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the distances of box in 3D to a reference point.</summary>
            <param name="inReferencePoint">Point to which the distances will be changed.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.ResizeBox3D_Delta(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the dimensions of a box in 3D by adding some values.</summary>
            <param name="inBox3D">Input box.</param>
            <param name="inAnchor">Point of the box in 3D which position will not change.</param>
            <param name="inXLengthDelta">Value added to length of the box in X axis. Default value: 0.0f.</param>
            <param name="inYLengthDelta">Value added to length of the box in X axis. Default value: 0.0f.</param>
            <param name="inZLengthDelta">Value added to length of the box in X axis. Default value: 0.0f.</param>
            <param name="outBox3D">Resized box.</param>
        </member>
        <member name="M:avl.ResizeBox3D_Relative(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Resizes a box in 3D to relatively defined dimensions.</summary>
            <param name="inBox3D">Input box in 3D.</param>
            <param name="inAnchor">Point of the box in 3D which position will not change.</param>
            <param name="inXScale">Scale factor in X axis. Default value: 1.0f.</param>
            <param name="inYScale">Scale factor in Y axis. Default value: 1.0f.</param>
            <param name="inZScale">Scale factor in Z axis. Default value: 1.0f.</param>
            <param name="outBox3D">Resized box.</param>
        </member>
        <member name="M:avl.ResizeBox3D(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the dimensions of a box in 3D.</summary>
            <param name="inBox3D">Input box in 3D.</param>
            <param name="inAnchor">Point of the box in 3D which position will not change.</param>
            <param name="inNewXLength">Target length of the box in x-coordinate. Default value: atl::NIL.</param>
            <param name="inNewYLength">Target length of the box in y-coordinate. Default value: atl::NIL.</param>
            <param name="inNewZLength">Target length of the box in z-coordinate. Default value: atl::NIL.</param>
            <param name="outBox3D">Resized box.</param>
        </member>
        <member name="M:avl.TranslateBox3D(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shifts a box in 3D by a vector.</summary>
            <param name="inBox3D">Input box in 3D.</param>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
            <param name="outBox3D">Shifted box.</param>
        </member>
        <member name="M:avl.ProjectLineOntoPlane3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Projects a line 3D onto a plane.</summary>
            <param name="outLineOnPlane">Line in 3D projected on a plane orthogonally.</param>
        </member>
        <member name="M:avl.ProjectPoint2DOntoPlane3D(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Projects a point on a plane Z=0 onto a given plane, translating it parallel to Z axis.</summary>
            <param name="outPointOnPlane">Point projected on a plane parallel to Z axis.</param>
        </member>
        <member name="M:avl.ProjectPointOntoPlane3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Projects a point 3D onto a plane.</summary>
            <param name="outPointOnPlane">Point projected on a plane orthogonally.</param>
        </member>
        <member name="M:avl.ProjectPointOnLine3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Projects a point 3D onto a line in 3D.</summary>
            <param name="outPointOnLine3D">Point projected on a line orthogonally.</param>
        </member>
        <member name="M:avl.ProjectPointPerspective(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a point through a perspective projection, parallel to the Z axis.</summary>
            <param name="inCenter">Center of projection, i.e. the target for projected points (x_focal, y_focal, z).</param>
            <param name="inFocalPoint">The camera center, i.e. the point we measure (x, y, z) against.</param>
            <param name="inFocalLength">The multiplier for the x and y coordinates, which is divided by z. If negative, projects in opposite direction.</param>
        </member>
        <member name="M:avl.ProjectPointOrthogonal(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a point through a simple orthogonal projection, parallel to the Z axis.</summary>
            <param name="inCenter">Center of projection, i.e. the target for projected points (0, 0, z).</param>
        </member>
        <member name="M:avl.TransformPoint3DArray(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies a general transformation expressed by a matrix to an array of 3D points.</summary>
            <param name="inTransform">Transformation 3x3 matrix.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TransformPoint3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies a general transformation expressed by a matrix to a 3D point.</summary>
            <param name="inTransform">Transformation 3x3 matrix.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RescalePoint3DArray(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the distances of array points to a reference point.</summary>
            <param name="inReferencePoint">Point to which the distances will be changed.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RescalePoint3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the distance of a point to a reference point.</summary>
            <param name="inReferencePoint">Point to which the distance will be changed.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslatePoint3D_Toward(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a point in 3D towards another point in 3D by a specified distance.</summary>
            <param name="inTargetPoint">Defines the direction of the translation.</param>
            <param name="inDistance">The distance between inPoint3D and outPoint3D.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslatePoint3DArray(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates an array of points by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslatePoint3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a point by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TestLine3DThroughCircle3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a line in 3D goes through a circle in 3D.</summary>
        </member>
        <member name="M:avl.TestPoint3DInBox3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a point in 3D lies in a box in 3D.</summary>
        </member>
        <member name="M:avl.PlanePlaneIntersection3D(avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Line3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a common line in 3D of two planes.</summary>
        </member>
        <member name="M:avl.CirclePlaneIntersection3D(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes common points of a circle in 3D and a plane.</summary>
        </member>
        <member name="M:avl.LinePlaneIntersection3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the intersection point of a line in 3D and a plane.</summary>
        </member>
        <member name="M:avl.SegmentPlaneIntersection3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the intersection point of a segment in 3D and a plane.</summary>
        </member>
        <member name="M:avl.BoxIntersection3D(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the common part of two boxes in 3D.</summary>
        </member>
        <member name="M:avl.LerpVectors3D(avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two 3D vectors.</summary>
            <param name="inLambda">Interpolation between the input 3D vectors where 0.0 value is equal to inVector0 and 1.0 to inVector1. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.LerpSegments3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two segments in 3D.</summary>
            <param name="inLambda">Interpolation between the input segments where 0.0 value is equal to inSegment0 and 1.0 to inSegment. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.LerpPoints3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two points in 3D.</summary>
            <param name="inLambda">Interpolation between the input points where 0.0 value is equal to inPoint0 and 1.0 to inPoint1. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.FitCircleToPoints3D(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Optional&lt;avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;avl.Circle3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Approximates points in 3D with a circle using selected outliers suppression method.</summary>
            <param name="outCircle">Fitted circle or nothing if method failed to converge.</param>
        </member>
        <member name="M:avl.FitSegmentToPoints3D(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Segment3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Approximates points in 3D with a segment using selected outliers suppression method.</summary>
            <param name="inOutlierSuppression">Default value: Tukey.</param>
            <param name="outSegment">Fitted segment or nothing if method failed to converge.</param>
        </member>
        <member name="M:avl.FitLineToPoints3D_M(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MEstimator.Type,System.Single,System.Int32,atl.Optional&lt;avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Approximates points in 3D with a line using selected M-estimator for outlier suppression.</summary>
            <param name="inClippingFactor">Multitude of standard deviation within which points are considered inliers. Default value: 2.5f.</param>
            <param name="inIterationCount">Number of iterations of outlier suppressing algorithm. Default value: 5.</param>
            <param name="inInitialLine">Initial approximation (if available). Default value: atl::NIL.</param>
            <param name="outInliers">Points matching the computed line.</param>
        </member>
        <member name="M:avl.FitLineToPoints3D(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Approximates points in 3D with a line using the Least Squares method.</summary>
        </member>
        <member name="M:avl.FitPlaneToPoints_M(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MEstimator.Type,System.Single,System.Int32,atl.Optional&lt;avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.Compile">
            <summary>Approximates points with a plane using selected M-estimator for outlier suppression.</summary>
            <param name="inClippingFactor">Multitude of standard deviation within which points are considered inliers. Default value: 2.5f.</param>
            <param name="inIterationCount">Number of iterations of outlier suppressing algorithm. Default value: 5.</param>
            <param name="inInitialPlane">Initial approximation (if available). Default value: atl::NIL.</param>
            <param name="outInliers">Points matching the computed plane.</param>
            <param name="outDistances">Distances of the input points to a resulting plane.</param>
            <param name="outSignedDistanceSum">Sum of signed distances of the input points to a resulting plane.</param>
            <param name="outDistanceSum">Sum of distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistances">Squared distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistanceSum">Sum of squared distances of the input points to a resulting plane.</param>
        </member>
        <member name="M:avl.FitPlaneToPoints(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Approximates points with a plane using the Least Squares method.</summary>
            <param name="outPlane">Fitted plane.</param>
            <param name="outDistances">Distances of the input points to a resulting plane.</param>
            <param name="outSignedDistanceSum">Sum of signed distances of the input points to a resulting plane.</param>
            <param name="outDistanceSum">Sum of distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistances">Squared distances of the input points to a resulting plane.</param>
            <param name="outSquaredDistanceSum">Sum of squared distances of the input points to a resulting plane.</param>
        </member>
        <member name="M:avl.Circle3DBoundingBox(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box in 3D containing a circle in 3D.</summary>
        </member>
        <member name="M:avl.Circle3DPerimeterLength(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the length of a circle in 3D perimeter.</summary>
        </member>
        <member name="M:avl.Circle3DArea(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a circle in 3D.</summary>
        </member>
        <member name="M:avl.Segment3DBoundingBox(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box in 3D containing a segment in 3D.</summary>
        </member>
        <member name="M:avl.Segment3DLine(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the line in 3D passing through a segment.</summary>
            <param name="inSegment3D">Input segment in 3D.</param>
            <param name="outLine3D">The resulting line.</param>
        </member>
        <member name="M:avl.Segment3DVector(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the vector [x2 - x1, y2 - y1, z2 - z1]</summary>
        </member>
        <member name="M:avl.Segment3DBisector(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a plane passing through the center of a segment in 3D at a right angle.</summary>
        </member>
        <member name="M:avl.Segment3DLength(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the length of a segment in 3D.</summary>
        </member>
        <member name="M:avl.Segment3DCenter(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the center point of a segment in 3D.</summary>
        </member>
        <member name="M:avl.Boxes3DBoundingBox3D_OrNil(atl.Array&lt;avl.Box3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Box3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the bounding box 3D of given boxes in 3D; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.BoxesBoundingBox3D(atl.Array&lt;avl.Box3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the bounding box 3D of given boxes in 3D.</summary>
        </member>
        <member name="M:avl.Box3DCenter(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the center of the input box in 3D.</summary>
        </member>
        <member name="M:avl.Box3DSurfaceArea(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the surface area of the input box in 3D.</summary>
        </member>
        <member name="M:avl.Box3DVolume(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the volume of the input box in 3D.</summary>
        </member>
        <member name="M:avl.Box3DCharacteristicPoint(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a characteristic point of a box in 3D.</summary>
            <param name="inPoint3DAnchor">Selecting one of the 27 characteristic points.</param>
        </member>
        <member name="M:avl.PointsMassCenter3D(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the central point of the input points.</summary>
            <param name="inPoints">Input array of points.</param>
            <param name="outMassCenter">Central point of input points.</param>
        </member>
        <member name="M:avl.Plane3DNormalVector(avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the normal vector of a line</summary>
        </member>
        <member name="M:avl.Plane3DOrientation(avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the orientation of a plane as angles in the range from 0 to 180 between the plane and coordinate planes.</summary>
            <param name="outPointOnPlane">Projection of the beginning of the coordinate axes on the input plane.</param>
        </member>
        <member name="M:avl.PointsBoundingBox3D_OrNil(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Box3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box in 3D containing an array of points in 3D; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.PointsBoundingBox3D(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box in 3D containing an array of points in 3D.</summary>
        </member>
        <member name="M:avl.Vector3DElevation(avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the angle between a 3D vector's projection to the XY plane and itself measured toward Z axis, as an angle in the range from -90 to 90.</summary>
        </member>
        <member name="M:avl.Vector3DAzimuth(avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the angle between a 3D vector's projection to the XY plane and the X axis measured toward Y axis, as an angle in the range from 0 to 360.</summary>
        </member>
        <member name="M:avl.Vector3DLength(avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the length of a 3D vector.</summary>
        </member>
        <member name="M:avl.PointSequenceDistances3D(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Segment3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distances between consecutive points of a point sequence in 3D.</summary>
        </member>
        <member name="M:avl.SegmentToSegmentDistance3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between two segments in 3D.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.LineToLineDistance3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between two lines in 3D.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.CircleToPlaneDistance3D(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a circle in 3D and a plane.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.SegmentToPlaneDistance3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a segment in 3D and a plane.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToCircleDistance3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a 3D point and a circle in 3D.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToLineDistance3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a 3D point and a line in 3D.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToSegmentDistance3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a 3D point and a segment in 3D.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToPlaneDistance3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a 3D point and a plane.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToPointDistance3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Measures the distance between two 3D points.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.CircleThroughPoints3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Circle3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a circle in 3D passing through three noncollinear 3D points.</summary>
            <param name="outCircle3D">Circle in 3D passing through the specified 3D points; or Nil if the points are collinear.</param>
        </member>
        <member name="M:avl.LineThroughPoints3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a line in 3D passing through two points.</summary>
            <param name="inPoint1">A point on the created line.</param>
            <param name="inPoint2">Another point on the created line.</param>
            <param name="outLine3D">The resulting line in 3D.</param>
        </member>
        <member name="M:avl.LineThroughPoint3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a line in 3D passing through a point with given direction.</summary>
            <param name="inPoint3D">A point on the created line.</param>
            <param name="inDirectionVector">Desired direction of the line.</param>
            <param name="outLine3D">The resulting line in 3D.</param>
        </member>
        <member name="M:avl.PlaneThroughLineAndPoint3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a plane passing through a line and a point in 3D.</summary>
        </member>
        <member name="M:avl.PlaneThroughPoints3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a plane passing through three distinct points in 3D.</summary>
        </member>
        <member name="M:avl.VectorBetweenPoints3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a vector representing distance from one point in 3D to another.</summary>
        </member>
        <member name="M:avs.AvsFilter_AccessSphere(avl.Sphere3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a sphere.</summary>
            <param name="inSphere">Input sphere.</param>
            <param name="outCenter">Center of the sphere.</param>
            <param name="outRadius">Output radius.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessBox3D(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a box in 3D.</summary>
            <param name="inBox3D">Input box in 3D.</param>
            <param name="outX">Input box x-coordinate.</param>
            <param name="outY">Input box y-coordinate.</param>
            <param name="outZ">Input box z-coordinate.</param>
            <param name="outXLength">Length in X axis.</param>
            <param name="outYLength">Length in Y axis.</param>
            <param name="outZLength">Length in Z axis.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessCircle3D(avl.Circle3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a circle in 3D.</summary>
            <param name="inCircle">Input circle.</param>
            <param name="outCenter">Center of the circle.</param>
            <param name="outPlane">Plane the circle lies on.</param>
            <param name="outRadius">Output radius.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessLine3D(avl.Line3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a line in 3D.</summary>
            <param name="inLine3D">Input line in 3D.</param>
            <param name="outPoint">Point on the input line.</param>
            <param name="outDelta">Vector of the input line.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessSegment3D(avl.Segment3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a segment 3D.</summary>
            <param name="inSegment">Input segment.</param>
            <param name="outPoint1">First point of the segment.</param>
            <param name="outPoint2">Second point of the segment.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessPlane(avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a plane.</summary>
            <param name="inPlane">Input plane.</param>
            <param name="outA">Output plane parameter A.</param>
            <param name="outB">Output plane parameter B.</param>
            <param name="outC">Output plane parameter C.</param>
            <param name="outD">Output plane parameter D.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessPoint3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a 3d point.</summary>
            <param name="inPoint">Input point.</param>
            <param name="outX">Output x-coordinate.</param>
            <param name="outY">Output y-coordinate.</param>
            <param name="outZ">Output z-coordinate.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeSphere(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Sphere3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a sphere structure from individual fields.</summary>
            <param name="inCenter">Center of the sphere.</param>
            <param name="inRadius">Sphere radius.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeBox3D(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a 3D box structure from individual fields.</summary>
            <param name="inX">Input x-coordinate.</param>
            <param name="inY">Input y-coordinate.</param>
            <param name="inZ">Input z-coordinate.</param>
            <param name="inXLength">Input length in X axis.</param>
            <param name="inYLength">Input length in Y axis.</param>
            <param name="inZLength">Input length in Z axis.</param>
            <param name="outBox3D">Output box 3D.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeCircle3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Plane3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Circle3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a 3D circle structure from individual fields.</summary>
            <param name="inCenter">Center of the circle.</param>
            <param name="inPlane">Plane the circle is parallel to.</param>
            <param name="inRadius">Circle radius.</param>
        </member>
        <member name="M:avs.AvsFilter_MakePoint3D(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a 3D point.</summary>
        </member>
        <member name="M:avs.AvsFilter_MakeLine3D(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,avl.Line3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a line in 3D structure from individual fields.</summary>
        </member>
        <member name="M:avs.AvsFilter_MakeSegment3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a segment 3D structure from individual fields.</summary>
            <param name="inPoint1">First point of the segment.</param>
            <param name="inPoint2">Second point of the segment.</param>
        </member>
        <member name="M:avs.AvsFilter_MakePlane(System.Single,System.Single,System.Single,System.Single,avl.Plane3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a plane structure from individual fields.</summary>
            <param name="inA">First plane parameter.</param>
            <param name="inB">Second plane parameter.</param>
            <param name="inC">Third plane parameter.</param>
            <param name="inD">Fourth plane parameter.</param>
        </member>
        <member name="M:avl.RemoveInvalidPoints3D(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes invalid 3D points from an array (i.e. points with NaN or INF coordinates).</summary>
        </member>
        <member name="M:avl.CreateSegment3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Segment3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Produces a segment in 3D of given parameters.</summary>
            <param name="inPoint3D">A point on the created segment.</param>
            <param name="inPointAnchor">Anchor point, 0 means the beginning, 1 means the end of the segment.</param>
            <param name="inDirectionVector">Desired direction of the segment.</param>
            <param name="inLength">Desired length of the segment in pixels.</param>
            <param name="outSegment3D">The resulting segment.</param>
        </member>
        <member name="M:avl.CreateBox3D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.Box3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a box in 3D.</summary>
        </member>
        <member name="M:avl.TestBox3DIntersectsWith(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether two boxes in 3D have non-empty intersection.</summary>
        </member>
        <member name="M:avl.TestBox3DInBox3D(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a box in 3D is contained in another one.</summary>
        </member>
        <member name="M:avl.TestBox3DNotEmpty(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether the box in 3D is not empty.</summary>
        </member>
        <member name="M:avl.TestBox3DEmpty(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether the box in 3D is empty.</summary>
        </member>
        <member name="M:avl.SkipEmptyBox3D(avl.Box3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Box3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input box in 3D has all dimensions different from zero, then it is copied to the output; otherwise Nil is returned.</summary>
        </member>
        <member name="M:avl.RandomPoint3D(avl.RandomState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optiona">
            <summary>Creates random 3D point inside given box</summary>
            <param name="ioState">State of generator.</param>
            <param name="inSeed">Random seed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.PointAlongArc(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Axis.Type,System.Single,System.Boolean,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms a point to a coordinate system in which the 'axis' arc is vertical or horizontal.</summary>
            <param name="inPoint">Input point.</param>
            <param name="inAxis">Input axis arc.</param>
            <param name="inAxisType">Type of axis the input axis arc is parallel to. Default value: Y.</param>
            <param name="inAxisCoordinate">Coordinate of the axis arc. Default value: 0.0f.</param>
            <param name="inInverse">Switches to the inverse operation. Default value: True.</param>
            <param name="outPoint">Transformed point.</param>
        </member>
        <member name="M:avl.PointAlongPath(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Axis.Type,System.Single,System.Boolean,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms a point to a coordinate system in which the 'axis' path is vertical or horizontal.</summary>
            <param name="inPoint">Input point.</param>
            <param name="inAxis">Input axis path.</param>
            <param name="inAxisType">Type of axis the input axis path is parallel to. Default value: Y.</param>
            <param name="inAxisCoordinate">Coordinate of the axis path. Default value: 0.0f.</param>
            <param name="inInverse">Switches to the inverse operation. Default value: True.</param>
            <param name="outPoint">Transformed point.</param>
        </member>
        <member name="M:avl.InvertCoordinateSystem(avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Inverts a coordinate system.</summary>
        </member>
        <member name="M:avl.AlignCoordinateSystem(avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves a nested coordinate system from its local coordinate system to the absolute one.</summary>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotateCoordinateSystem(avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a coordinate system around a center point.</summary>
            <param name="inCenter">Center of rotation (the coordinate system's center by default). Default value: atl::NIL.</param>
            <param name="inAngle">Clockwise rotation angle.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslateCoordinateSystem(avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a coordinate system by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RescaleArc(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes radius of an arc and translates its center in relation to a reference point.</summary>
            <param name="inReferencePoint">The point to which the distance of the arc center is changed (no change by default). Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.AlignArc(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves an arc from a local coordinate system to the absolute one.</summary>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
        </member>
        <member name="M:avl.RotateArc(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates an arc clockwise around center point.</summary>
            <param name="inCenter">Center of rotation (the arc's center by default). Default value: atl::NIL.</param>
            <param name="inAngle">Clockwise rotation angle.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslateArc(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates an arc by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.ResizeArc_Delta(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes radius of an arc by adding a value.</summary>
            <param name="inDelta">Value added to arc radius. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ResizeArc(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes radius of an arc.</summary>
            <param name="inNewSize">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.ReverseArc(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Inverts the direction of the arc.</summary>
        </member>
        <member name="M:avl.ResizeRectangle_Delta(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,System.Single,System.Single,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes dimensions of a rectangle by adding some values.</summary>
            <param name="inAnchor">Default value: TopLeft.</param>
            <param name="inWidthDelta">Value added to width of the rectangle. Default value: 0.0f.</param>
            <param name="inHeightDelta">Value added to height of the rectangle. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ResizeRectangle_Relative(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,System.Single,System.Single,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes dimensions of a rectangle relatively.</summary>
            <param name="inAnchor">Default value: TopLeft.</param>
            <param name="inWidthScale">Default value: 1.0f.</param>
            <param name="inHeightScale">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.ResizeRectangle(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes dimensions of a rectangle.</summary>
            <param name="inAnchor">Default value: TopLeft.</param>
        </member>
        <member name="M:avl.RescaleRectangle(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the corners and the dimensions of a rectangle.</summary>
            <param name="inReferencePoint">The point, to which all distance will be changed proportionally. Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.AlignRectangle(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves a rectangle from a local coordinate system to the absolute one.</summary>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
        </member>
        <member name="M:avl.RotateRectangle(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a rectangle clockwise around a center point.</summary>
            <param name="inCenter">Center of rotation (the rectangle's point by default). Default value: atl::NIL.</param>
            <param name="inAngle">Clockwise rotation angle.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslateRectangle(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a rectangle by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RotateAngle_Toward(System.Single,System.Single,avl.AngleRange.Type,System.Single,System.Boolean,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the input direction in the direction of minimum rotation toward the target direction.</summary>
        </member>
        <member name="M:avl.RotateAngle(System.Single,System.Single,avl.AngleRange.Type,System.Boolean,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Adds two angles.</summary>
        </member>
        <member name="M:avl.RotateVector(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a vector clockwise.</summary>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RescaleVector(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Lengthens or shortens a vector relatively preserving its direction.</summary>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.ResizeVector_Delta(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extends length of a vector by adding a value preserving its direction.</summary>
            <param name="inDelta">Value added to vector length. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ResizeVector(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Lengthens or shortens a vector preserving its direction.</summary>
            <param name="inNewLength">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.ResizeCircle_Delta(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes radius of a circle by adding a value.</summary>
            <param name="inDelta">Value added to circle radius. Default value: 0.0f.</param>
        </member>
        <member name="M:avl.ResizeCircle(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes radius of a circle.</summary>
            <param name="inNewSize">New value for radius. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.RescaleCircle(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes radius of a circle and translates its center in relation to a reference point.</summary>
            <param name="inReferencePoint">The point to which the distance of the circle center is changed (no change by default). Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.AlignCircle(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves a circle from a local coordinate system to the absolute one.</summary>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
        </member>
        <member name="M:avl.RotateCircle(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a circle clockwise around a center point.</summary>
            <param name="inCenter">Center of rotation.</param>
            <param name="inAngle">Clockwise rotation angle.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslateCircle(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a circle by a vector.</summary>
            <param name="inDelta">Vector of translation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RescaleLine(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the distance of a line to a reference point.</summary>
            <param name="inReferencePoint">The point to which all distances change linearly.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.AlignLine(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves a line from a local coordinate system to the absolute one.</summary>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
        </member>
        <member name="M:avl.CropLineToRectangle(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a segment contained in a rectangle from a line.</summary>
            <param name="inRectangle">Rectangle defining a region the input line will be cropped to.</param>
        </member>
        <member name="M:avl.CropLine(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a segment contained in a box from a line.</summary>
            <param name="inBox">Box defining a region the input line will be cropped to.</param>
        </member>
        <member name="M:avl.RotateLine(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a line clockwise around a center point.</summary>
            <param name="inCenter">Center of rotation.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslateLine(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a line by a vector.</summary>
            <param name="inDelta">Vector of translation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.ReverseSegment(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Swaps the two endpoints of a segment.</summary>
        </member>
        <member name="M:avl.RescaleSegment(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Lengthens or shortens a segment relatively.</summary>
            <param name="inReferencePoint">The point to which all distances change linearly (the mass center by default). Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor (negative values invert the segment). Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.ResizeSegment_Delta(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes length of a segment by adding a value preserving its orientation and center point.</summary>
            <param name="inDelta">Value added to segment length. Default value: 0.0f.</param>
            <param name="inAnchor">Default value: 0.5f.</param>
        </member>
        <member name="M:avl.ResizeSegment(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Lengthens or shortens a segment to a new length preserving its orientation and center point.</summary>
            <param name="inNewLength">Default value: 1.0f.</param>
            <param name="inAnchor">Default value: 0.5f.</param>
        </member>
        <member name="M:avl.AlignSegment(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves a segment from a local coordinate system to the absolute one.</summary>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
        </member>
        <member name="M:avl.CropSegment(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a segment contained in a box from another segment.</summary>
        </member>
        <member name="M:avl.RotateSegment(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a segment clockwise around a center point.</summary>
            <param name="inCenter">Center of rotation (by default the mass center). Default value: atl::NIL.</param>
            <param name="inAngle">Clockwise angle of rotation.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslateSegment(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a segment by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.CropPointArray(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes points not contained in a box from an array.</summary>
        </member>
        <member name="M:avl.RescalePointArray(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the distances of points from an array to a reference point.</summary>
            <param name="inReferencePoint">Point to which the distances will be changed (the mass center by default). Default value: atl::NIL.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.AlignPointArray(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves an array of points from a local coordinate system to the absolute one.</summary>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
        </member>
        <member name="M:avl.RotatePointArray(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates an array of points clockwise around a center point.</summary>
            <param name="inCenter">Center of rotation (the mass center by default). Default value: atl::NIL.</param>
            <param name="inAngle">Clockwise rotation angle.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslatePointArray(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates an array of points by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.RescalePoint(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the distance of a point to a reference point.</summary>
            <param name="inReferencePoint">Point to which the distance will be changed.</param>
            <param name="inScale">Scaling factor. Default value: 1.0f.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.AlignPoint(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Moves a point from a local coordinate system to the absolute one.</summary>
            <param name="inAlignment">Coordinate system to align to.</param>
            <param name="inInverse">Switches to the inverse transform.</param>
        </member>
        <member name="M:avl.RotatePoint(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Rotates a point clockwise around a center point.</summary>
            <param name="inCenter">Center of rotation.</param>
            <param name="inAngle">Clockwise rotation angle.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslatePoint_Toward(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a point towards another point by a specified distance.</summary>
            <param name="inTargetPoint">Defines the direction of the translation.</param>
            <param name="inDistance">The distance between inPoint and outPoint.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.TranslatePoint(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a point by a vector.</summary>
            <param name="inDelta">Translation vector.</param>
            <param name="inInverse">Switches to the inverse operation.</param>
        </member>
        <member name="M:avl.CreatePointGraph(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Array&lt;atl.Array&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a graph of points that lay close to each other.</summary>
            <param name="inPoints">Input points.</param>
            <param name="inMaxRank">Maximum connections going out of one point. Default value: 8.</param>
            <param name="inMaxDistance">Maximum distance between adjacent point in the graph. Default value: 10.0f.</param>
            <param name="inMaxRelativeDistance">Maximum distance in relation to the shortest distance for a point. Default value: atl::NIL.</param>
            <param name="outGraph">Graph of points (adjacency list).</param>
            <param name="outDistances">Distances between adjacent points in the graph.</param>
            <param name="diagSegments">Graph edges, useful for visualization.</param>
        </member>
        <member name="M:avl.TestPointInRectangle(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a point lies in a rectangle.</summary>
        </member>
        <member name="M:avl.TestPointInBox(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a point lies in a box.</summary>
        </member>
        <member name="M:avl.TestPointInSegment_Deprecated(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a point lies in a segment.</summary>
        </member>
        <member name="M:avl.TestPointInCircle(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a point lies inside a circle.</summary>
        </member>
        <member name="M:avl.NormalizeSegmentOrientation_ByCoordinate(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Axis.Type!System.Runtime.CompilerServices.IsConst,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes orientation of the given segment according to coordinates along selected axis.</summary>
            <param name="inAxis">Default value: X.</param>
            <param name="outSegment">A segment in which the first point will have smaller coordinate along the selected axis.</param>
        </member>
        <member name="M:avl.NormalizeSegmentOrientation_ByPointDistance(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes orientation of the given segment according to distance to the given point.</summary>
            <param name="inReferencePoint">A point relative to which distances are measured.</param>
            <param name="outSegment">A segment in which the first point is closer to inReferencePoint.</param>
        </member>
        <member name="M:avl.NormalizeSegmentOrientation_ByBaseOrientation(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes orientation of the given segment according to base orientation.</summary>
            <param name="inBaseOrientation">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.NormalizeRectangleOrientation(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.RectangleOrientation.Type!System.Runtime.CompilerServices.IsConst,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes orientation of the given rectangle according to parameters.</summary>
            <param name="inRectangle">Input rectangle.</param>
            <param name="inReferenceAngle">The middle angle of the valid range of the output rectangle's angle. Default value: 0.0f.</param>
            <param name="inRectangleOrientation">Orientation of the output rectangle. Default value: Horizontal.</param>
        </member>
        <member name="M:avl.RemoveInvalidPoints(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Removes invalid points from an array (i.e. points with NaN or INF coordinates).</summary>
        </member>
        <member name="M:avl.TestRectangleIntersectsWith(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests if two rectangles intersect.</summary>
        </member>
        <member name="M:avl.SegmentArcIntersection(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the common points of an arc and a segment.</summary>
        </member>
        <member name="M:avl.LineArcIntersection(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the common points of an arc and a line.</summary>
        </member>
        <member name="M:avl.SegmentCircleIntersection(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the common points of a circle and a segment.</summary>
        </member>
        <member name="M:avl.LineCircleIntersection(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes common points of a circle and a line.</summary>
        </member>
        <member name="M:avl.LineSegmentIntersection(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a common point of a line and a segment.</summary>
        </member>
        <member name="M:avl.LineLineIntersection(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a common point of two lines.</summary>
        </member>
        <member name="M:avl.SegmentArrayIntersections(atl.Array&lt;avl.Segment2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a common points or segment of any segments from the set.</summary>
            <param name="inSegments">Input segments.</param>
            <param name="outIntersectionPoints">Intersection points.</param>
            <param name="outFirstIntersectionIndices">First indices of the input segments which corresponds to the intersection points.</param>
            <param name="outSecondIntersectionIndices">Second indices of the input segments which corresponds to the intersection points.</param>
            <param name="outOverlapSegments">Overlap segments.</param>
            <param name="outFirstOverlapIndices">First indices of the input segments which corresponds to the overlap segments.</param>
            <param name="outSecondOverlapIndices">Second indices of the input segments which corresponds to the overlap segments.</param>
        </member>
        <member name="M:avl.SegmentSegmentIntersection(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a common point of two segments.</summary>
        </member>
        <member name="M:avl.CircleCircleIntersection(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes common points of two circles.</summary>
        </member>
        <member name="M:avl.AveragePoint_OfLoop_Deprecated(avl.AveragePoint_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the central point of the points appearing in consecutive iterations</summary>
        </member>
        <member name="M:avl.MedianAngle(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.AngleRange.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the median angle of the input angles.</summary>
        </member>
        <member name="M:avl.AveragePoint(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the middle point of two input points.</summary>
        </member>
        <member name="M:avl.LerpPaths(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two paths.</summary>
            <param name="inPath1">First input path.</param>
            <param name="inLambda">Interpolation between the input paths where 0.0 value is equal to inPath0 and 1.0 to inPath1. Default value: 0.5f.</param>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.LerpAngles(System.Single,System.Single,atl.Optional&lt;avl.RotationDirection.Type&gt;,avl.AngleRange.Type,System.Single,System.Boolean,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two angles in the direction of minimum turn.</summary>
            <param name="inRotationDirection">Clockwise, counter-clockwise or auto. Default value: atl::NIL.</param>
            <param name="inLambda">Interpolation between the input angles where 0.0 value is equal to inAngle0 and 1.0 to inAngle1.</param>
        </member>
        <member name="M:avl.LerpVectors_Radial(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.RotationDirection.Type&gt;,System.Single!System.Runtime.CompilerServices.IsConst,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two radial vectors.</summary>
            <param name="inRotationDirection">Clockwise, counter-clockwise or auto. Default value: atl::NIL.</param>
            <param name="inLambda">Interpolation between the input vectors where 0.0 value is equal to inVector0 and 1.0 to inVector1. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.LerpVectors(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two vectors.</summary>
            <param name="inLambda">Interpolation between the input vectors where 0.0 value is equal to inVector0 and 1.0 to inVector1. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.LerpSegments(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two segments.</summary>
            <param name="inLambda">Interpolation between the input segments where 0.0 value is equal to inSegment0 and 1.0 to inSegment1. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.LerpPoints(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Linearly interpolates between two points.</summary>
            <param name="inLambda">Interpolation between the input points where 0.0 value is equal to inPoint0 and 1.0 to inPoint1. Default value: 0.5f.</param>
        </member>
        <member name="M:avl.DetectPointSegments_Ex(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Detect points that lie along multiple segments.</summary>
            <param name="inPoints">Points to connect.</param>
            <param name="inMaxDistance">Maximum distance between connected points. Default value: 10.0f.</param>
            <param name="inMaxRank">Maximum number of neighbour candidates considered when joining points. Default value: 4.</param>
            <param name="inMaxRelativeDistance">Maximum distance in relation to the shortest distance for a point. Default value: 2.0f.</param>
            <param name="inMaxTurnAngle">Maximum angle between consecutive path segments. Default value: 5.0f.</param>
            <param name="inMinPointCount">Minimum number of points in one path. Default value: 3.</param>
            <param name="outPointSegments">Segments connecting first and last point of each path.</param>
            <param name="outPaths">Paths of connected points.</param>
        </member>
        <member name="M:avl.LocateMultipleObjects_Points_GeoHash(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.CoordinateSystem2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;">
            <summary>Finds an occurrence of the pattern in the input points.</summary>
            <param name="inPoints">Input points.</param>
            <param name="inPattern">Points to be fitted.</param>
            <param name="inAllowRotation">Default value: True.</param>
            <param name="inAllowScale">Default value: False.</param>
            <param name="inTileSize">Defines size of the square tile on the plane. Default value: 0.01f.</param>
            <param name="inInitialDetectionThreshold">Defines how many points have to be matched during initial detection. Default value: 0.75f.</param>
            <param name="inMaxDeviation">Maximal pixel distance between two points considered matched. Default value: 1.0f.</param>
            <param name="inMinScore">The minimum proportion of points correctly matched. Default value: 0.75f.</param>
            <param name="inMinDistance">Minimal distance between two found occurrences. Default value: 10.0f.</param>
        </member>
        <member name="M:avl.LocateSingleObject_Points_ICP(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Conditional&lt;avl.CoordinateSystem2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds an occurrence of the pattern in the input points.</summary>
            <param name="inPoints">Input points.</param>
            <param name="inPattern">Points to be fitted.</param>
            <param name="inAllowRotation">Default value: True.</param>
            <param name="inAllowScale">Default value: False.</param>
            <param name="inMaxIterationCount">Maximal number of iteration for ICP. Default value: 10.</param>
            <param name="inMatchFraction">Defines fraction of points that is being fitted in every iteration. Default value: 0.5f.</param>
            <param name="inInitialTransformCount">Number of initial transforms for ICP. Default value: 10.</param>
        </member>
        <member name="M:avl.PointsBestAlignment(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds the alignment that maps input model points to data points with minimum error.</summary>
        </member>
        <member name="M:avl.LocateSingleObject_Points(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Conditional&lt;avl.CoordinateSystem2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.">
            <summary>Finds an occurrence of the pattern in the input points.</summary>
            <param name="inPoints">Input points.</param>
            <param name="inPattern">Points to be fitted.</param>
            <param name="inMaxDeviation">Maximal pixel distance between two points considered matched. Default value: 2.0f.</param>
            <param name="inMinScore">The minimum proportion of points correctly matched. Default value: 1.0f.</param>
            <param name="diagRotationCount">Number of rotation tried.</param>
        </member>
        <member name="M:avl.DetectPointSegments(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Detect points that lie along multiple segments.</summary>
            <param name="inPoints">Points to connect.</param>
            <param name="inMaxDistance">Maximum distance between connected points. Default value: 10.0f.</param>
            <param name="inMaxRank">Maximum number of neighbour candidates considered when joining points. Default value: 4.</param>
            <param name="inMaxRelativeDistance">Maximum distance in relation to the shortest distance for a point. Default value: 2.0f.</param>
            <param name="inMaxTurnAngle">Maximum angle between consecutive path segments. Default value: 5.0f.</param>
            <param name="inMinPointCount">Minimum number of points in one path. Default value: 3.</param>
            <param name="outPointSegments">Segments connecting first and last point of each path.</param>
            <param name="outPaths">Paths of connected points.</param>
        </member>
        <member name="M:avl.FitLineToPoints_LTE(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Approximates points with a line using Least Trimmed Error algorithm.</summary>
            <param name="inPoints">Input points.</param>
            <param name="inSeedSubsetSize">Number of points in one combination for getting a sample line. Default value: 3.</param>
            <param name="inEvalSubsetSize">Number of closest points used for evaluation of a sample line, or Auto if seed points are to be used. Default value: atl::NIL.</param>
            <param name="outLine">Fitted line.</param>
            <param name="outLTInliers">Inlying points of the best LTE line.</param>
            <param name="outLTError">The Least Trimmed Error.</param>
            <param name="diagIterationCount">Number of combinations considered.</param>
        </member>
        <member name="M:avl.FitLineToPoints_TheilSen(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.TheilSenVariant.Type,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Approximates points with a line using TheilSen algorithm, optionally with Siegel's improvement.</summary>
            <param name="inPoints">Input points.</param>
            <param name="inVariant">Switches between Theil-Sen and Siegel methods.</param>
            <param name="outLine">Fitted line.</param>
        </member>
        <member name="M:avl.FitLineToPoints_RANSAC(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Single,atl.Optional&lt;System.Int32&gt;,atl.Conditional&lt;avl.Line2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Approximates points with a line using a RANSAC algorithm.</summary>
            <param name="inMaxOutlierCount">Determines how many outlier points can be present to end the search. Default value: 0.</param>
            <param name="inMaxInlierDistance">Distance from the output line for a point to be considered an inlier. Default value: 3.0f.</param>
            <param name="inIterationCount">Number of iterations; Auto means that all point pairs will be used. Default value: 42.</param>
        </member>
        <member name="M:avl.FitArcToPath(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Arc2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Approximates path by an arc using the selected outliers suppression method and considering path's start and end.</summary>
            <param name="inPath">Input path.</param>
            <param name="outArc">Fitted arc or nothing if the computations failed to converge.</param>
        </member>
        <member name="M:avl.FitArcToPoints(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Arc2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Approximates points with an arc using the selected outliers suppression method.</summary>
            <param name="outArc">Fitted arc or nothing if the computations failed to converge.</param>
        </member>
        <member name="M:avl.FitCircleToPoints(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Circle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Approximates points with a circle using selected outliers suppression method.</summary>
            <param name="outCircle">Fitted circle or nothing if method failed to converge.</param>
        </member>
        <member name="M:avl.FitSegmentToPoints(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.MEstimator.Type&gt;,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Approximates points with a segment using selected outliers suppression method.</summary>
        </member>
        <member name="M:avl.FitLineToPoints_M(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MEstimator.Type,System.Single,System.Int32,atl.Optional&lt;avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Approximates points with a line using selected M-estimator for outlier suppression.</summary>
            <param name="inClippingFactor">Multitude of standard deviation within which points are considered inliers. Default value: 2.5f.</param>
            <param name="inIterationCount">Number of iterations of outlier suppressing algorithm. Default value: 5.</param>
            <param name="inInitialLine">Initial approximation (if available). Default value: atl::NIL.</param>
            <param name="outInliers">Points matching the computed line.</param>
        </member>
        <member name="M:avl.FitLineToPoints(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Approximates points with a line using the Least Squares method.</summary>
        </member>
        <member name="M:avl.PointsBoundingParallelogram(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BoundingRectangleFeature.Type,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest parallelogram containing an array of points.</summary>
            <param name="inPoints">Input array of points.</param>
            <param name="inBoundingParallelogramFeature">Determines what kind of bounding parallelogram will be computed. Default value: MinimalArea.</param>
            <param name="outBoundingParallelogram">Smallest bounding parallelogram of the input points.</param>
            <param name="outCenter">Center of the bounding parallelogram.</param>
            <param name="outLongSide">Length of the bounding parallelogram long side.</param>
            <param name="outShortSide">Length of the bounding parallelogram short side.</param>
            <param name="outAngle">Angle of the bounding parallelogram.</param>
        </member>
        <member name="M:avl.RectangleCharacteristicPoints(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Point2D*!System">
            <summary>Computes rectangle's characteristic points.</summary>
        </member>
        <member name="M:avl.PointsBoundingRectangle_Deprecated(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,avl.BoundingRectangleFeature.Type,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle containing an array of points.</summary>
            <param name="inPoints">Input array of points.</param>
            <param name="inRectangleOrientation">Expected orientation of the resulting rectangle. Default value: atl::NIL.</param>
            <param name="inBoundingRectangleFeature">Determines what kind of bounding rectangle will be computed. Default value: MinimalArea.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input points.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.RectangleBoundingBox(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box containing a rectangle.</summary>
        </member>
        <member name="M:avl.RectanglePerimeterLength(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the perimeter length of a rectangle.</summary>
        </member>
        <member name="M:avl.RectangleArea(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a rectangle.</summary>
        </member>
        <member name="M:avl.RectangleCharacteristicPoint(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a characteristic point (e.g. the top-left) of the input rectangle.</summary>
            <param name="inPointAnchor">Default value: TopLeft.</param>
        </member>
        <member name="M:avl.RectangleCenter(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the center point of a rectangle.</summary>
        </member>
        <member name="M:avl.PointsDiameter(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds the longest segment connecting two points from a given array.</summary>
            <param name="inPoints">Input array of points.</param>
            <param name="outDiameter">Longest segment found.</param>
            <param name="outDiameterLength">Length of longest segment found.</param>
        </member>
        <member name="M:avl.PointsBoundingRectangle_OrNil(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BoundingRectangleFeature.Type,System.Single,avl.RectangleOrientation.Type,atl.Conditional&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest rectangle containing an array of points; returns NIL when the array is empty.</summary>
            <param name="inPoints">Input array of points.</param>
            <param name="inBoundingRectangleFeature">Determines what kind of bounding rectangle will be computed. Default value: MinimalArea.</param>
            <param name="inReferenceAngle">The middle angle of the valid range of the output rectangle's angle. Default value: 0.0f.</param>
            <param name="inRectangleOrientation">Orientation of the output rectangle. Default value: Horizontal.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input points.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.PointsBoundingRectangle(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BoundingRectangleFeature.Type,System.Single,avl.RectangleOrientation.Type,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle containing an array of points.</summary>
            <param name="inPoints">Input array of points.</param>
            <param name="inBoundingRectangleFeature">Determines what kind of bounding rectangle will be computed. Default value: MinimalArea.</param>
            <param name="inReferenceAngle">The middle angle of the valid range of the output rectangle's angle. Default value: 0.0f.</param>
            <param name="inRectangleOrientation">Orientation of the output rectangle. Default value: Horizontal.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input points.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.PointsBoundingRectangle_FixedAngle_OrNil(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Conditional&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest rectangle with the given orientation angle containing an array of points; returns NIL when the array is empty.</summary>
            <param name="inPoints">Input array of points.</param>
            <param name="inAngle">Expected angle of the resulting rectangle.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input points.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.PointsBoundingRectangle_FixedAngle(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle with the given orientation angle containing an array of points.</summary>
            <param name="inPoints">Input array of points.</param>
            <param name="inAngle">Expected angle of the resulting rectangle.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input points.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.PointsConvexHull(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest convex shape that contains the given array of points.</summary>
            <param name="outConvexHull">A closed path representing the computed convex hull.</param>
        </member>
        <member name="M:avl.PointsBoundingCircle_OrNil(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Circle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest circle containing an array of points; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.PointsBoundingCircle(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest circle containing an array of points.</summary>
        </member>
        <member name="M:avl.PointsBoundingBox_OrNil(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Box&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box containing an array of points; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.PointsBoundingBox(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box containing an array of points.</summary>
        </member>
        <member name="M:avl.VectorsMedian(atl.Array&lt;avl.Vector2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Vector2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the geometric median of the input vectors.</summary>
            <param name="inVectors">Input vectors.</param>
            <param name="inWeights">Optional input weights. Default value: atl::NIL.</param>
            <param name="inMaxIterationCount">Maximum number of iterations. Default value: 10.</param>
            <param name="outGeometricMedian">Geometric median.</param>
            <param name="outDistanceSum">Sum of distances from input vectors to geometric median.</param>
            <param name="diagApproximationSteps">Approximate geometric medians calculated during subsequent iterations.</param>
        </member>
        <member name="M:avl.PointsMedian(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the geometric median of the input points.</summary>
            <param name="inPoints">Input points.</param>
            <param name="inWeights">Optional input weights. Default value: atl::NIL.</param>
            <param name="inMaxIterationCount">Maximum number of iterations. Default value: 10.</param>
            <param name="outGeometricMedian">Geometric median.</param>
            <param name="outDistanceSum">Sum of distances from input points to geometric median.</param>
            <param name="diagApproximationSteps">Approximate geometric medians calculated during subsequent iterations.</param>
        </member>
        <member name="M:avl.PointsMassCenter_OrNil(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the central point of the input points; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.PointsMassCenter(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the central point of the input points.</summary>
        </member>
        <member name="M:avl.VectorLength(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the length of a vector.</summary>
        </member>
        <member name="M:avl.VectorDirection(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the direction angle of a vector as an angle in range the from 0 to 360.</summary>
        </member>
        <member name="M:avl.LineNormalVector(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the normal vector of a line</summary>
        </member>
        <member name="M:avl.LineOrientation(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the orientation angle of a line as angle in the range from 0 to 180.</summary>
        </member>
        <member name="M:avl.CircleBoundingRectangle(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes the smallest rectangle containing a circle.</summary>
            <param name="inCircle">Input circle.</param>
            <param name="inAngle">Expected angle of the resulting rectangle. Default value: atl::NIL.</param>
            <param name="outBoundingRectangle">Smallest bounding rectangle of the input circle.</param>
            <param name="outCenter">Center of the bounding rectangle.</param>
            <param name="outLongSide">Length of the bounding rectangle long side.</param>
            <param name="outShortSide">Length of the bounding rectangle short side.</param>
        </member>
        <member name="M:avl.CircleBoundingBox(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the smallest box containing a circle.</summary>
        </member>
        <member name="M:avl.CircleSection(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes an arciform section of the circle perimeter.</summary>
            <param name="inCircle">Input circle.</param>
            <param name="inStartAngle">Direction at which the arc begins.</param>
            <param name="inSweepAngle">Angular length of the arc (may be negative).</param>
        </member>
        <member name="M:avl.CirclePerimeterLength(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the length of a circle perimeter.</summary>
        </member>
        <member name="M:avl.CircleArea(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the area of a circle.</summary>
        </member>
        <member name="M:avl.CircleCharacteristicPoint(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a characteristic point (e.g. the top-left) of a box containing the input circle.</summary>
            <param name="inPointAnchor">Default value: TopLeft.</param>
        </member>
        <member name="M:avl.SegmentOrientation(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.AngleRange.Type,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the orientation of a segment.</summary>
            <param name="inAngleRange">Switches between 0-180 or 0-360 degrees. Default value: _0_180.</param>
        </member>
        <member name="M:avl.SegmentVector(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the vector [x2 - x1, y2 - y1]</summary>
        </member>
        <member name="M:avl.SegmentLine(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the line passing through a segment.</summary>
            <param name="inSegment">Input segment.</param>
            <param name="outLine">The resulting line.</param>
        </member>
        <member name="M:avl.SegmentNormalVector(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes an unitary vector perpendicular to the segment.</summary>
        </member>
        <member name="M:avl.SegmentBisector(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a line passing through the center of a segment at a right angle.</summary>
        </member>
        <member name="M:avl.SegmentLength(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the length of a segment.</summary>
        </member>
        <member name="M:avl.SegmentCenter(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the center point of a segment.</summary>
        </member>
        <member name="M:avl.ArcCircle(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the circle containing an arc.</summary>
            <param name="inArc">Input arc.</param>
            <param name="outCircle">Circle containing the arc.</param>
        </member>
        <member name="M:avl.ArcLength(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the length of an arc.</summary>
        </member>
        <member name="M:avl.ArcEndpoints(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes two endpoints of an arc.</summary>
            <param name="outPoint1">First endpoint.</param>
            <param name="outPoint2">Second endpoint.</param>
        </member>
        <member name="M:avl.ArcMidpoint(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the midpoint of an arc.</summary>
        </member>
        <member name="M:avl.PointSequenceDistances(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Single,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distances between consecutive points of a point sequence.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToArcDistance(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a point and an arc.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToCircleDistance(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a point and a circle.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.CircleToCircleDistance(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between two circles.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.SegmentToSegmentDistance(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between two segments.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToSegmentDistance(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a point and a segment.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToLineDistance_Oriented(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the signed distance between a point and a line with direction.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToLineDistance_Simple(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Measures the distance between a point and a line.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToLineDistance(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between a point and a line.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToPointDistance(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the distance between two points.</summary>
            <param name="inResolution">Number of real-world units per one pixel. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.SplitRectangle(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SplitDirection.Type!System.Runtime.CompilerServices.IsConst,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits the rectangle into two along the direction.</summary>
        </member>
        <member name="M:avl.CreateCoordinateSystemFromVector(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a coordinate system from a vector.</summary>
            <param name="inScale">Default value: 1.0f.</param>
            <param name="inScaleDivisor">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.CreateCoordinateSystemFromSegment(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,System.Single,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a coordinate system with the origin on a given segment.</summary>
            <param name="inPointAnchor">Default value: 0.0f.</param>
            <param name="inScale">Default value: 1.0f.</param>
            <param name="inScaleDivisor">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.CreateCoordinateSystemFromRectangle(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,System.Single,System.Single,System.Single,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a coordinate system from a rectangle.</summary>
            <param name="inPointAnchor">Default value: TopLeft.</param>
            <param name="inScale">Default value: 1.0f.</param>
            <param name="inScaleDivisor">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.CreateCoordinateSystemFromTwoPoints(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a coordinate system with two points on its axes.</summary>
            <param name="inScale">Default value: 1.0f.</param>
            <param name="inScaleDivisor">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.CreateCoordinateSystemFromPoint(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a coordinate system with the specified origin.</summary>
            <param name="inPoint">Origin of the created coordinate system.</param>
            <param name="inScale">Default value: 1.0f.</param>
            <param name="inScaleDivisor">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.ProjectPointsOnCircle(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Arc2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Projects points onto a circle.</summary>
            <param name="inPoints">Points to be projected.</param>
            <param name="inCircle">Circle the points will be projected on.</param>
            <param name="outProjectionPoints">Projected points.</param>
            <param name="outProjectionArc">Arc containing the projected points.</param>
        </member>
        <member name="M:avl.ProjectPointOnCircle(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Projects a point onto a circle.</summary>
        </member>
        <member name="M:avl.ProjectPointsOnLine(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Projects points onto a line.</summary>
        </member>
        <member name="M:avl.ProjectPointOnLine(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Projects a point onto a line.</summary>
        </member>
        <member name="M:avl.CircleTangents(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Line2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Line2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes circle tangent lines passing through a point.</summary>
        </member>
        <member name="M:avl.CircleThroughPoints(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Circle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a circle passing through three noncollinear points.</summary>
            <param name="outCircle">Circle passing through the specified points; or Nil if the points are collinear.</param>
        </member>
        <member name="M:avl.LineThroughPoint(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a line passing through a point with given angle.</summary>
        </member>
        <member name="M:avl.LineThroughPoints(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a line passing through two distinct points.</summary>
        </member>
        <member name="M:avl.VectorBetweenPoints(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes a vector representing distance from one point to another.</summary>
        </member>
        <member name="M:avs.AvsFilter_AccessCoordinateSystem(avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a coordinate system.</summary>
            <param name="outOrigin">Origin of the coordinate system.</param>
            <param name="outAngle">Clock-wise orientation angle.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessRectangle(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a rectangle.</summary>
            <param name="outOrigin">Origin of the rectangle.</param>
            <param name="outAngle">Clock-wise orientation angle.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessLine(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a line.</summary>
            <param name="inLine">Input line.</param>
            <param name="outA">Output line parameter A.</param>
            <param name="outB">Output line parameter B.</param>
            <param name="outC">Output line parameter C.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessArc(avl.Arc2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of an arc.</summary>
        </member>
        <member name="M:avs.AvsFilter_AccessCircle(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a circle.</summary>
            <param name="inCircle">Input circle.</param>
            <param name="outCenter">Center of the circle.</param>
            <param name="outRadius">Output radius.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessSegment(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a segment.</summary>
            <param name="outPoint1">First point of the segment.</param>
            <param name="outPoint2">Second point of the segment.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessVector(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a vector.</summary>
            <param name="inVector">Input vector.</param>
            <param name="outDeltaX">Output delta along x-axis.</param>
            <param name="outDeltaY">Output delta along y-axis.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessStringLabel(avl.StringLabel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a StringLabel structure.</summary>
        </member>
        <member name="M:avs.AvsFilter_AccessPoint(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a point.</summary>
            <param name="inPoint">Input point.</param>
            <param name="outX">Output x-coordinate.</param>
            <param name="outY">Output y-coordinate.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeCoordinateSystem(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a coordinate system structure from individual fields.</summary>
            <param name="inOrigin">Origin of the coordinate system.</param>
            <param name="inAngle">Clock-wise orientation angle.</param>
            <param name="inScale">Default value: 1.0f.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeRectangle(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a rectangle structure from individual fields.</summary>
            <param name="inOrigin">Origin of the rectangle.</param>
            <param name="inAngle">Clock-wise orientation angle.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeLine(System.Single,System.Single,System.Single,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a line structure from individual fields.</summary>
            <param name="inA">First linear parameter.</param>
            <param name="inB">Second linear parameter.</param>
            <param name="inC">Third linear parameter.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeArc(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an arc structure from individual fields.</summary>
            <param name="inCenter">Center of the arc.</param>
            <param name="inRadius">The arc radius.</param>
            <param name="inStartAngle">Direction at which the arc begins.</param>
            <param name="inSweepAngle">Length of the arc (may be negative).</param>
        </member>
        <member name="M:avs.AvsFilter_MakeCircle(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a circle structure from individual fields.</summary>
            <param name="inCenter">Center of the circle.</param>
            <param name="inRadius">Circle radius.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeSegment(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a segment structure from individual fields.</summary>
            <param name="inPoint1">First point of the segment.</param>
            <param name="inPoint2">Second point of the segment.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeVector(System.Single,System.Single,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a vector structure from individual fields.</summary>
            <param name="inDeltaX">Delta along x-axis.</param>
            <param name="inDeltaY">Delta along y-axis.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeStringLabel(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StringLabel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a StringLabel structure from individual fields.</summary>
        </member>
        <member name="M:avs.AvsFilter_MakePoint(System.Single,System.Single,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a point structure from individual fields.</summary>
            <param name="inX">Horizontal coordinate.</param>
            <param name="inY">Vertical coordinate.</param>
        </member>
        <member name="M:avl.CreateRectangularPointGrid(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImpli">
            <summary>Creates a grid of points in a described rectangle.</summary>
            <param name="inRectangle">Where points should be inscribed.</param>
            <param name="inRowCount">Number of rows the grid will have.</param>
            <param name="inColumnCount">Number of columns the grid will have.</param>
            <param name="outPointGrid">Output points.</param>
        </member>
        <member name="M:avl.CreatePointGrid(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a grid of points.</summary>
            <param name="inPoint">A starting point of the created grid.</param>
            <param name="inAnchor">Anchor of the reference point. Default value: TopLeft.</param>
            <param name="inRowCount">Number of rows the grid will have.</param>
            <param name="inColumnCount">Number of columns the grid will have.</param>
            <param name="inRowStep">Distance between consecutive rows of the created grid. Default value: 1.0f.</param>
            <param name="inColumnStep">Distance between consecutive columns of the created grid. Default value: 1.0f.</param>
            <param name="outPointGrid">Created point grid.</param>
        </member>
        <member name="M:avl.CreateSegment(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Produces a segment of given parameters.</summary>
            <param name="inPoint">A point on the created segment.</param>
            <param name="inPointAnchor">Anchor point, 0 means the beginning, 1 means the end of the segment.</param>
            <param name="inDirection">Desired direction of the segment in degrees.</param>
            <param name="inLength">Desired length of the segment in pixels.</param>
            <param name="outSegment">The resulting segment.</param>
        </member>
        <member name="M:avl.CreateVector(System.Single,System.Single,avl.Vector2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Produces a vector of given length and direction.</summary>
            <param name="inLength">Desired length of the vector in pixels.</param>
            <param name="inDirection">Desired direction of the vector in degrees.</param>
            <param name="outVector">The resulting vector.</param>
        </member>
        <member name="M:avl.NormalizeRectangleOrientation_Deprecated(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,avl.RectangleOrientation.Type!System.Runtime.CompilerServices.IsConst,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes orientation of the given rectangle according to parameters.</summary>
            <param name="inRectangle">Input rectangle.</param>
            <param name="inMinAngle">Lower bound of the output rectangle's angle. Default value: -90.0f.</param>
            <param name="inRectangleOrientation">Orientation of the output rectangle. Default value: Horizontal.</param>
        </member>
        <member name="M:avl.CreateRectangle(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,System.Single,System.Single,System.Single,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a rectangle from an aligned point.</summary>
            <param name="inPointAnchor">Alignment of the input point relatively to the box of the position. Default value: TopLeft.</param>
            <param name="inAngle">Clock-wise orientation angle.</param>
            <param name="inWidth">Width of the created rectangle.</param>
            <param name="inHeight">Height of the created rectangle.</param>
        </member>
        <member name="M:avl.CreateArc(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,System.Single,System.Single,System.Single,avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an arc from an aligned point, radius, and angle range.</summary>
            <param name="inPointAnchor">Alignment of the point relatively to the box of the circle. Default value: MiddleCenter.</param>
            <param name="inRadius">Circle radius.</param>
            <param name="inStartAngle">Direction at which the arc begins.</param>
            <param name="inSweepAngle">Length of the arc (may be negative).</param>
        </member>
        <member name="M:avl.CreateCircle(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,System.Single,avl.Circle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a circle from an aligned point and radius.</summary>
            <param name="inPointAnchor">Alignment of the point relatively to the box of the circle. Default value: MiddleCenter.</param>
            <param name="inRadius">Circle radius.</param>
        </member>
        <member name="M:avl.RandomPoint(avl.RandomState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates random point inside given box</summary>
            <param name="ioState">State of generator.</param>
            <param name="inBox">Bounding box of generated points.</param>
            <param name="inSeed">Random seed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.AngleBetweenLines(avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Measures the smaller and the larger angle between two lines.</summary>
        </member>
        <member name="M:avl.CreateDataPartition(atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Divides input set to test and train set, trying to maintain balance in class distribution in both resulting sets.</summary>
            <param name="inTestToTrainingRatio">Default value: 0.75f.</param>
            <param name="inRandomSeed">Default value: 0.</param>
        </member>
        <member name="M:avl.MeasureClassificationQuality_Multiclass(atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates classification performance metrics for multiclass problems.</summary>
        </member>
        <member name="M:avl.MeasureClassificationQuality_Binary(atl.Array&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates classification performance metrics for binary problems.</summary>
        </member>
        <member name="M:avl.ClusterPoints2D_SingleLink(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst,atl.Array&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Clusters data using hierarchical single-link algorithm.</summary>
            <param name="inPoints">Array of points to cluster.</param>
            <param name="inClusters">Number of clusters to extract. Default value: atl::NIL.</param>
            <param name="inMaxDistance">Maximum distance between two closest points in a cluster. Default value: atl::NIL.</param>
            <param name="outClusters">Resulting Point2D clusters.</param>
        </member>
        <member name="M:avl.FindConnectedComponents(atl.Array&lt;atl.Array&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds connected components in a graph given as set of bidirectional connections.</summary>
            <param name="inConnections">List of connections for each element.</param>
            <param name="outComponents">List of input element indices for each connected component.</param>
            <param name="outElementLabels">Index of a component for each input element.</param>
        </member>
        <member name="M:avl.ClusterData_KMeans(atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,avl.KMeansClusteringMethod.Type!System.Runtime.CompilerServices.IsConst,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Clusters data using KMeans algorithm.</summary>
            <param name="inData">Data set, array of examples.</param>
            <param name="inClusters">Number of clusters to extract. Default value: 2.</param>
            <param name="inMaxIterations">Maximal number of procedure iterations. Default value: 200.</param>
            <param name="inSeed">Seed to init random engine. Default value: 5489.</param>
            <param name="inTerminationFactor">Additional factor of procedure stop. Default value: 1.5f.</param>
            <param name="inClusteringMethod">KMeans variant to use. Default value: KMeansPlusPlus.</param>
            <param name="outCentroids">Resulting centroid points in feature space.</param>
            <param name="outPointToClusterAssignment">Array of input point assignments to generated clusters.</param>
            <param name="outDistanceSum">Sum of squared distances from points to its respective cluster centroids.</param>
        </member>
        <member name="M:avl.ClusterPoints2D(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Conditional&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Clusters 2D points using K Means Clustering method.</summary>
            <param name="inPoints">Array of points to cluster.</param>
            <param name="inClusters">Number of clusters to extract. Default value: 2.</param>
            <param name="inMaxIterations">Maximal number of KMeans iterations. Default value: 200.</param>
            <param name="outClusters">Resulting Point2D clusters.</param>
            <param name="outCentroids">Center of found clusters.</param>
            <param name="outDistanceSum">Sum of distance squares from points in array to its respective cluster center.</param>
        </member>
        <member name="M:avl.ClusterPoints3D(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;atl.Conditional&lt;atl.Array&lt;avl.Point3D&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Conditional&lt;avl.Point3D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Clusters 3D points using K Means Clustering method.</summary>
            <param name="inPoints">Array of points to cluster.</param>
            <param name="inClusters">Number of clusters to extract. Default value: 2.</param>
            <param name="inMaxIterations">Maximal number of KMeans iterations. Default value: 200.</param>
            <param name="outClusters">Resulting Point3D clusters.</param>
            <param name="outCentroids">Center of found clusters.</param>
            <param name="outDistanceSum">Sum of distance squares from points in array to its respective cluster center.</param>
        </member>
        <member name="M:avl.SVM_ClassifyMultiple(avl.SvmModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Classifies input points based on trained model</summary>
            <param name="inSvmModel">Input trained model.</param>
            <param name="inVectorArray">Data vector array of unknown classes.</param>
            <param name="outPredictions">Predicted classes.</param>
            <param name="outModelClasses">All known model classes in order.</param>
            <param name="outClassProbabilities">For each data vector the probability of belonging to each class.</param>
        </member>
        <member name="M:avl.SVM_ClassifySingle(avl.SvmModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Classifies input features based on a trained model</summary>
            <param name="inSvmModel">Input trained model.</param>
            <param name="inVector">Data vector of unknown class.</param>
            <param name="outPrediction">Predicted classes.</param>
            <param name="outModelClasses">All known model classes in order.</param>
            <param name="outClassProbabilities">For each data vector the probability of belonging to each class.</param>
        </member>
        <member name="M:avl.SVM_Train(avl.SvmModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SvmModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Trains SVM model</summary>
            <param name="inSvmModel">Initialized SVM model.</param>
            <param name="inVectorArray">Training data vector array.</param>
            <param name="inAnswerArray">Correct classes for data vectors.</param>
            <param name="outSvmModel">Trained model.</param>
            <param name="outTrainingAccuracy">Accuracy of prediction on training set.</param>
        </member>
        <member name="M:avl.SVM_Init(atl.Optional&lt;System.Single&gt;,System.Single,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Boolean,avl.SvmModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Initializes SVM model</summary>
            <param name="inKernelGamma">Gamma parameter for Rbf kernel. Default value: 0.0001f.</param>
            <param name="inKernelGammaScale">Gamma parameter scale. Default value: 1.0f.</param>
            <param name="inRegularizationConstant">Preventing overfitting. Default value: 1.0f.</param>
            <param name="inNu">Tradeoff between training accuracy and number of SV. Default value: atl::NIL.</param>
            <param name="inStoppingEpsilon">Epsilon for stopping criterium. Default value: 0.001f.</param>
            <param name="inUseShrinkingHeuristics">May speed up computations. Default value: True.</param>
            <param name="outSvmModel">Output model.</param>
        </member>
        <member name="M:avl.ReversePCATransform(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PCAModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reverses Principal Component Analysis (PCA) process. Can be used to transform data back to original feature space.</summary>
            <param name="inTransformedMatrix">Data that was transformed earlier.</param>
            <param name="inPCAModel">PCA model used to create inTransformedMatrix.</param>
            <param name="outMatrix">inTransformedMatrix transformed back to its original feature space.</param>
        </member>
        <member name="M:avl.ApplyPCATransform(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PCAModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Applies previously obtained Principal Component Analysis (PCA) transformation coefficients to new data.</summary>
            <param name="inMatrix">Input data with variables in columns and examples in rows.</param>
            <param name="inPCAModel">Previously created PCA model to apply to data provided in inMatrix.</param>
            <param name="outTransformedMatrix">Transformed inMatrix.</param>
        </member>
        <member name="M:avl.CreatePCATransform(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,avl.PCAModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs the Principal Component Analysis (PCA) on provided data, creates the feature vector and normalization coefficients (mean and standard deviation of variables).</summary>
            <param name="inMatrix">Input data, where variables are in column, and examples are in rows.</param>
            <param name="inDimensions">How many data dimensions (variables) to be left in transformed data.</param>
            <param name="inVarianceToLeave">How many of input data variance should be left in transformed data; overrides inDimensions input. Default value: 0.95f.</param>
            <param name="outPCAModel">Resulting PCA model.</param>
            <param name="outTransformedMatrix">Transformed inMatrix with reduced dimensionality.</param>
            <param name="diagCovarianceMatrix">Covariance matrix of input data.</param>
            <param name="diagNormalizedData">Input data after normalization: scaling and centering.</param>
            <param name="diagUsedFeatureIndices">Indices of columns in inMatrix, which were used as Principal Components.</param>
        </member>
        <member name="M:avl.NormalizeMatrixData(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;!System.Runtime.CompilerServices.IsConst,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Treats Matrix as a data frame, where examples are in rows while columns represent features, and normalizes the data by subtracting mean from each column and dividing it by its standard deviation.</summary>
            <param name="inMatrix">Input data frame.</param>
            <param name="inMeansVector">If provided, will be used in normalization of inMatrix. Default value: atl::NIL.</param>
            <param name="inStandardDeviationsVector">If provided, will be used in normalization of inMatrix. Default value: atl::NIL.</param>
            <param name="outNormalizedMatrix">Resulting normalized matrix.</param>
            <param name="outMeansVector">Resulting Means vector - copy of inMeansVector, or calculated Means, if inMeansVector was set NIL.</param>
            <param name="outStandardDeviationsVector">Resulting StdDevs vector - copy of inStandardDeviationsVector, or calculated Means, if inStandardDeviationsVector was set NIL.</param>
        </member>
        <member name="M:avl.MatrixPseudoEigenvectors(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the pseudo-eigenvalues and pseudo-eigenvectors of a symmetrical square matrix.</summary>
            <param name="outEigenvectors">Row matrix of eigenvectors.</param>
            <param name="outEigenvalues">Array of eigenvalues.</param>
        </member>
        <member name="M:avl.MatrixDeterminant(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Find the determinant of a square matrix.</summary>
        </member>
        <member name="M:avl.MLP_Respond(avl.MlpModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates multilayer perceptron answer.</summary>
            <param name="inMlpModel">Trained MlpModel object.</param>
            <param name="inInputVector">Input vector of features used to calculate classifier response.</param>
            <param name="outResponseVector">Calculated response.</param>
        </member>
        <member name="M:avl.MLP_Train(avl.MlpModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Single,System.Single,atl.Optional&lt;System.Int32&gt;,avl.MlpModel*!Sy">
            <summary>Creates and trains multilayer perceptron classifier.</summary>
            <param name="inMlpModel">Initialized MLP model.</param>
            <param name="inInputVectorArray">Array of features used to train model.</param>
            <param name="inResponseVectorArray">Array of answers which classifier should get.</param>
            <param name="inTestInputVectorArray">Array of features used to test classifier during training process. Default value: atl::NIL.</param>
            <param name="inTestResponseVectorArray">Array of answers used to test classifier during training process. Default value: atl::NIL.</param>
            <param name="inIterationCount">Learning iteration count. Default value: 100.</param>
            <param name="inLearningRate">Learning factor. Default value: 1.0f.</param>
            <param name="inMomentum">Learning momentum ratio. Default value: 0.01f.</param>
            <param name="inRandomSeed">Number used as starting random seed. Default value: atl::NIL.</param>
            <param name="outMlpModel">Trained MlpModel.</param>
            <param name="diagErrorChartLearning">Mean error of testing results data during learning process.</param>
            <param name="diagErrorChartTesting">Mean error during learning process.</param>
        </member>
        <member name="M:avl.MLP_Init(atl.Optional&lt;atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.ActivationFunction.Type,avl.MlpPreprocessing.Type,atl.Optional&lt;System.Int32&gt;,System.Int32,System.Int32,avl.MlpModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates multilayer perceptron model.</summary>
            <param name="inHiddenLayers">Internal structure of MLP network. Default value: atl::NIL.</param>
            <param name="inActivationFunction">Type of activation function used to calculate neural response.</param>
            <param name="inPreprocessing">Method of processing input data before learning.</param>
            <param name="inRandomSeed">Number used as starting random seed. Default value: atl::NIL.</param>
            <param name="inInputCount">MLP network input count. Default value: 1.</param>
            <param name="inOutputCount">MLP network output count. Default value: 1.</param>
            <param name="outMlpModel">Initialized MlpModel.</param>
        </member>
        <member name="M:avl.LinearRegression_TheilSen(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.TheilSenVariant.Type,avl.LinearFunction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes linear regression of given point set using TheilSen algorithm.</summary>
            <param name="inYValues">Sequence of ordinates.</param>
            <param name="inXValues">Sequence of abscissae, or {0, 1, 2, ...} by default. Default value: atl::NIL.</param>
            <param name="inVariant">Switches between Theil-Sen and Siegel methods.</param>
            <param name="outLinearFunction">Linear function approximating the given point set.</param>
            <param name="outEstimatedValues">The result of application of the computed function to the X values.</param>
            <param name="outResiduals">Difference between an input Y value and the corresponding estimated value.</param>
        </member>
        <member name="M:avl.Statistics_OfLoop(avl.Statistics_OfLoopState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;Syste">
            <summary>Computes basic statistical information out of real numbers appearing in consecutive iterations.</summary>
            <param name="ioState">Stores information from previous iterations.</param>
            <param name="inValue">Value used to compute statistical informations.</param>
            <param name="inBufferSize">Defines how many numbers are taken into account. Default value: 10.</param>
            <param name="inOutlierCount">Defines how many outliers should be removed from the input values. Default value: 0.</param>
            <param name="inUseSampleFormula">Defines, whether to use population, or sample formulas.</param>
            <param name="outMean">Mean of the input values.</param>
            <param name="outMedian">Median of the input values.</param>
            <param name="outStandardDeviation">Standard deviation of the input values.</param>
            <param name="outMinimum">Minimum of the input values.</param>
            <param name="outMaximum">Maximum of the input values.</param>
            <param name="outSpread">Difference between maximum and minimum of the input values.</param>
            <param name="outLinearTrend">First parameter of the linear regression function (multiplier).</param>
        </member>
        <member name="M:avl.Statistics_OfArray(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;">
            <summary>Computes basic statistical information out of an array of real numbers. The array must be not empty.</summary>
            <param name="inValues">Values used to compute statistical informations.</param>
            <param name="inOutlierCount">Defines how many outliers should be removed from the input values. Default value: 0.</param>
            <param name="inUseSampleFormula">Defines, whether to use population, or sample formulas. Default value: False.</param>
            <param name="outMean">Mean of the input values.</param>
            <param name="outMedian">Median of the input values.</param>
            <param name="outStandardDeviation">Standard deviation of the input values, treated as population.</param>
            <param name="outMinimum">Minimum of the input values.</param>
            <param name="outMaximum">Maximum of the input values.</param>
            <param name="outSpread">Difference between maximum and minimum of the input values.</param>
            <param name="outLinearTrend">First parameter of the linear regression function (multiplier).</param>
        </member>
        <member name="M:avl.LinearRegression_LTE(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,avl.LinearFunction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerSer">
            <summary>Computes linear regression of given point set using Least Trimmed Error algorithm.</summary>
            <param name="inYValues">Sequence of ordinates.</param>
            <param name="inXValues">Sequence of abscissae, or {0, 1, 2, ...} by default. Default value: atl::NIL.</param>
            <param name="inSeedSubsetSize">Number of points in one combination for getting a sample line. Default value: 3.</param>
            <param name="inEvalSubsetSize">Number of closest points used for evaluation of a sample line, or Auto if seed points are to be used. Default value: atl::NIL.</param>
            <param name="outLinearFunction">Linear function approximating the given point set.</param>
            <param name="outEstimatedValues">The result of application of the computed function to the X values.</param>
            <param name="outResiduals">Difference between an input Y value and the corresponding estimated value.</param>
            <param name="outYInliers">Coordinate of the inlying points of the best LTE line.</param>
            <param name="outXInliers">Coordinate of the inlying points of the best LTE line.</param>
            <param name="outLTError">The Least Trimmed Error.</param>
            <param name="diagIterationCount">Number of combinations considered.</param>
        </member>
        <member name="M:avl.LinearRegression_M(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MEstimator.Type,System.Single,System.Int32,atl.Optional&lt;avl.LinearFunction!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.LinearFunction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes linear regression of given point set using selected M-estimator for outlier suppression.</summary>
            <param name="inYValues">Sequence of ordinates.</param>
            <param name="inXValues">Sequence of abscissae, or {0, 1, 2, ...} by default. Default value: atl::NIL.</param>
            <param name="inClippingFactor">Multitude of standard deviation within which points are considered inliers. Default value: 2.5f.</param>
            <param name="inIterationCount">Number of iterations of outlier suppressing algorithm. Default value: 5.</param>
            <param name="inInitialLinearFunction">Initial approximation of the output linear function (if available). Default value: atl::NIL.</param>
            <param name="outLinearFunction">Linear function approximating the given point set.</param>
            <param name="outEstimatedValues">The result of application of the computed function to the X values.</param>
            <param name="outResiduals">Difference between an input Y value and the corresponding estimated value.</param>
        </member>
        <member name="M:avl.LinearRegression_RANSAC(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,System.Single,atl.Optional&lt;System.Int32&gt;,avl.LinearFunction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes linear regression of given point set using RANSAC.</summary>
            <param name="inYValues">Sequence of ordinates.</param>
            <param name="inXValues">Sequence of abscissae, or {0, 1, 2, ...} by default. Default value: atl::NIL.</param>
            <param name="inMaxOutlierCount">Determines how many outlier points can be present to end the search. Default value: atl::NIL.</param>
            <param name="inMaxInlierDistance">Distance from a line for point to be considered an inlier.</param>
            <param name="inIterationCount">Number of iterations; Auto means that all point pairs will be used. Default value: atl::NIL.</param>
            <param name="outLinearFunction">Linear function approximating the given point set.</param>
            <param name="outEstimatedValues">The result of application of the computed function to the X values.</param>
            <param name="outResiduals">Difference between an input Y value and the corresponding estimated value.</param>
        </member>
        <member name="M:avl.LinearRegression(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.LinearFunction*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes linear regression of given point set.</summary>
            <param name="inYValues">Sequence of ordinates.</param>
            <param name="inXValues">Sequence of abscissae, or {0, 1, 2, ...} by default. Default value: atl::NIL.</param>
            <param name="outLinearFunction">Linear function approximating the given point set.</param>
            <param name="outEstimatedValues">The result of application of the computed function to the X values.</param>
            <param name="outResiduals">Difference between an input Y value and the corresponding estimated value.</param>
            <param name="outRSquared">Coefficient of determination of output function.</param>
        </member>
        <member name="M:avl.KNN_Classify(avl.KNNModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Metric.Type!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Classify data using the KNN classifier.</summary>
            <param name="inKNNModel">Trained KNN model.</param>
            <param name="inFeature">Vector of features.</param>
            <param name="inK">Numbers of neighbors.</param>
            <param name="inDistanceType">Geometry distance type used to calculate neighbors.</param>
        </member>
        <member name="M:avl.KNN_Train(avl.KNNModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.KNNModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Trains KNN classifier using sample data.</summary>
            <param name="inKNNModel">Initialized KNN model.</param>
            <param name="inFeatures">Array of features array.</param>
            <param name="inClasses">Array of classes corresponding to feature array elements.</param>
            <param name="outKNNModel">Trained KNN model.</param>
        </member>
        <member name="M:avl.KNN_Init(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.KNNModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Initializes the KNN classifier.</summary>
            <param name="inClassCount">Number of classes.</param>
            <param name="inDimensionCount">Length of feature vector.</param>
            <param name="outKNNModel">Initialized KNN model.</param>
        </member>
        <member name="M:avl.GMM_LogProb(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Gaussian&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Queries previously trained GMM about log probability of some data being described by that gaussian mixture.</summary>
        </member>
        <member name="M:avl.SamplePointFromGaussian(avl.Gaussian!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns pseudorandom point drawn from multinomial gaussian distribution.</summary>
            <param name="inSeed">Default value: 5489.</param>
        </member>
        <member name="M:avl.GMM_Train(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Gaussian&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Intializes Gaussian Mixture Model using Expectation-Maximization method</summary>
            <param name="inMixtureCount">Default value: 2.</param>
            <param name="inMaxIterations">Default value: 200.</param>
            <param name="inSeed">Default value: 5489.</param>
        </member>
        <member name="M:avl.HistogramToIntegerArray_Deprecated(avl.Histogram!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a histogram to an array of its bin values.</summary>
            <param name="inHistogram">Input histogram.</param>
        </member>
        <member name="M:avl.PathToSegment2DArray_Deprecated(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a path to an array of line segments.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.StringLabelToString(avl.StringLabel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a StringLabel object to a String.</summary>
        </member>
        <member name="M:avl.SurfaceToImage(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a surface object to an image.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.SurfaceToPoint3DArray(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a surface object to an array of points.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="outPoint3DArray">Output point array.</param>
        </member>
        <member name="M:avl.SurfaceToPoint3DGrid(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point3DGrid*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a surface object to a grid of points.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="outPoint3DGrid">Output point grid.</param>
        </member>
        <member name="M:avl.Point3DGridToPoint3DArray(avl.Point3DGrid!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a grid of points to an array of points.</summary>
        </member>
        <member name="M:avl.Point3DArrayToPoint2DArray(atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an array of points in 3D to an array of points in 2D by ignoring their Z coordinates.</summary>
        </member>
        <member name="M:avl.Point3DToPoint2D(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a point in 3D to a point in 2D by ignoring its Z coordinate.</summary>
        </member>
        <member name="M:avl.BoxToShapeRegion(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ShapeRegion*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a box to a shape region.</summary>
        </member>
        <member name="M:avl.Circle2DToShapeRegion(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ShapeRegion*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a circle to a shape region.</summary>
        </member>
        <member name="M:avl.Rectangle2DToShapeRegion(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ShapeRegion*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a rectangle to a shape region.</summary>
        </member>
        <member name="M:avl.SurfaceToSurfaceFormat(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SurfaceFormat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a surface to a surface format.</summary>
        </member>
        <member name="M:avl.ImageToImageFormat(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ImageFormat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an image to an image format.</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.Gap1DToSegment2D(avl.Gap1D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a gap to a segment.</summary>
        </member>
        <member name="M:avl.Stripe1DToSegment2D(avl.Stripe1D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a stripe to a segment.</summary>
        </member>
        <member name="M:avl.Segment2DToLine2D(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Line2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a segment to a line.</summary>
        </member>
        <member name="M:avl.ProfileToPoint2DArray(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a profile to an array of points.</summary>
            <param name="inProfile">Input profile.</param>
        </member>
        <member name="M:avl.RealArrayToProfile(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an array of real numbers to a profile.</summary>
            <param name="outProfile">Output profile.</param>
        </member>
        <member name="M:avl.ProfileToRealArray(avl.Profile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a profile to an array of real numbers.</summary>
            <param name="inProfile">Input profile.</param>
        </member>
        <member name="M:avl.Segment2DToPath(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a segment to a path.</summary>
            <param name="outPath">Output path.</param>
        </member>
        <member name="M:avl.PathToPoint2DArray(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a path to an array of points.</summary>
            <param name="inPath">Input path.</param>
        </member>
        <member name="M:avl.BoxToRectangle2D(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a box to a rectangle.</summary>
        </member>
        <member name="M:avl.RegionToRegionOfInterest(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionOfInterest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a region to region of interest.</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.Circle2DToRegionOfInterest(avl.Circle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionOfInterest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a circle to region of interest.</summary>
        </member>
        <member name="M:avl.Rectangle2DToRegionOfInterest(avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionOfInterest*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a rectangle to region of interest.</summary>
        </member>
        <member name="M:avl.RegionToImage(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a region to an image.</summary>
            <param name="inRegion">Input region.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.Point2DArrayToLocationArray(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Location&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an array of points to an array of locations.</summary>
        </member>
        <member name="M:avl.LocationArrayToPoint2DArray(atl.Array&lt;avl.Location&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an array of locations to an array of points.</summary>
        </member>
        <member name="M:avl.Point2DToLocation(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Location*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a point to a location its contained within.</summary>
        </member>
        <member name="M:avl.LocationToPoint2D(avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a location to its center point.</summary>
        </member>
        <member name="M:avl.RealArrayToPixelArray(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Pixel&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an array of real values to an array of pixels.</summary>
        </member>
        <member name="M:avl.RealToPixel(System.Single!System.Runtime.CompilerServices.IsConst,avl.Pixel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a real value to pixel.</summary>
        </member>
        <member name="M:avl.IntegerToPixel(System.Int32!System.Runtime.CompilerServices.IsConst,avl.Pixel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts an integer value to pixel.</summary>
        </member>
        <member name="M:avl.InspectTexture(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.TextureModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.Region&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Checks image for texture error using previously trained TextureModel.</summary>
            <param name="inImage">Texture image to be inspected.</param>
            <param name="inTextureModel">Trained texture model.</param>
            <param name="outAnomalyRegion">Region of anomalies found - result of merging results from each pyramid level.</param>
            <param name="diagInspectedImagePyramid">inImage pyramid used in inspection.</param>
            <param name="diagPerLevelDefectCandidates">Anomalies found on each pyramid level.</param>
        </member>
        <member name="M:avl.CreateTextureModel(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Boolean,avl.TextureModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inFlawlessBaseImage">Image of flawless texture used to devise Texemplars.</param>
            <param name="inFlawlessImages">ImageArray of flawless images (different than inFlawlessBaseImage) used to devise anomaly threshold.</param>
            <param name="inPatchSize">Size of patch, from witch Texemplars are devised. Default value: 5.</param>
            <param name="inOverlapStep">How much the patches should overlap. Default value: 1.</param>
            <param name="inPyramidLevels">How many levels of image pyramid to use. Default value: 4.</param>
            <param name="inTexemCount">How many Texemplars are expected to be in inspected texture. Default value: 12.</param>
            <param name="inMaxIterations">Maximal number of training procedure iterations. Default value: atl::NIL.</param>
            <param name="inUseGaussianPyramid">Whether to use gaussian, instead of normal, image pyramid.</param>
            <param name="outTextureModel">Trained TextureModel.</param>
        </member>
        <member name="M:avl.LawsFilter(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.LawsFilterType.Type!System.Runtime.CompilerServices.IsConst,avl.LawsFilterType.Type!System.Runtime.CompilerServices.IsConst,avl.LawsFilterSize.Type!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Filters image with one of classic LAWS filter</summary>
            <param name="inImage">Input mono image.</param>
            <param name="inRoi">Region of Interest. Default value: atl::NIL.</param>
            <param name="inVerticalFilter">Vertical part of filter. Default value: Level.</param>
            <param name="inHorizontalFilter">Horizontal part of filter. Default value: Edge.</param>
            <param name="inFilterSize">Filter window size.</param>
            <param name="inMacroBlockSize">Macroblock is used to gather generated texture energy. Default value: 15.</param>
            <param name="inNormalizeLocalContrast">Whether to normalize image before processing. Default value: False.</param>
            <param name="outTextureImage">Filtered image.</param>
            <param name="outTextureEnergyImage">Texture energy (AVG).</param>
        </member>
        <member name="M:avl.LinearBinaryPattern(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;,avl.LinearBinaryPatternType.Type,avl.Histogram*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates histogram and map of Linear Binary Patterns (with radius 1 and size 8) of provided image.</summary>
            <param name="inImage">Mono-channel image.</param>
            <param name="inRoi">Region of Interest. Default value: atl::NIL.</param>
            <param name="inPatternType">Type of LBP to produce.</param>
            <param name="outPatternHistogram">Histogram of LBP codes found in inImage.</param>
            <param name="outTextureImage">LBP map of input image.</param>
        </member>
        <member name="M:avl.KNTexemModelTrain(atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,avl.TexemModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Train</summary>
            <param name="inGMMIterations">Default value: 10.</param>
            <param name="inGMMDimensions">Default value: 5.</param>
            <param name="inTileSize">Default value: 1.</param>
            <param name="inStep">Default value: 1.</param>
            <param name="inPyramidHeight">Default value: 1.</param>
            <param name="inGaussKernel">Default value: 0.</param>
            <param name="inLambda">Default value: 2.0f.</param>
        </member>
        <member name="M:avl.KNTexemModelTest(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.TexemModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Test</summary>
            <param name="inImage">Input image.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.RecognizeOrganicObject(avl.OrganicModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Analyzes provided image within given ROI, and classifies selected object with beforehand trained OrganicModel.</summary>
            <param name="inOrganicModel">Trained model.</param>
            <param name="inImage">Image, which will be classified.</param>
            <param name="inRegion">Region, which selects organic object in the image provided.</param>
            <param name="outClass">Class number, to which image was assigned.</param>
            <param name="outScore">Score of the decision - the greater the better.</param>
            <param name="outScores">Scores for all classes known by classifier.</param>
        </member>
        <member name="M:avl.TrainOrganicModel(System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,avl.DataPreprocessing.Type!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OrganicModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Trains OrganicModel, which has to be previously initialized with LoadOrganicTrainingData.</summary>
            <param name="inIterationCount">Number of iteration of internal learning process. Default value: 500.</param>
            <param name="inLearningRate">How aggressive the learning should be. Default value: 0.1f.</param>
            <param name="inMomentum">Factor that helps to move out of local minima. Default value: 0.1f.</param>
            <param name="inModelCapacity">Internal size of model. Default value: 10.</param>
            <param name="inPreprocessing">Method of cleaning the data before learning.</param>
            <param name="inVarianceToLeave">Value of variance to leave, when PCA preprocessing is done. Default value: 0.99f.</param>
            <param name="ioOrganicModel">Resulting model.</param>
        </member>
        <member name="M:avl.LoadOrganicTrainingData(atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OrganicModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads images and regions, extracts knowledge from it, and initializes OrganicModel, which can be then trained and used to classify new images.</summary>
            <param name="inTrainingImageDirectories">One directory with images and regions per class.</param>
            <param name="inTrainingImageExtensions">Extension of image files to use. Default value: \".bmp\".</param>
            <param name="outInitializedModel">Pre-trained model, initialized with data.</param>
        </member>
        <member name="M:avl.KNCooccurrenceTrain(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,avl.NDCooccurrenceParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Train</summary>
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.KNCooccurrenceTest(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.NDCooccurrenceParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Test</summary>
            <param name="inImage">Input image.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.PixelToRealDistance(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates a distance in real-world units.</summary>
            <param name="inPixelDistance">Distance between two points in an image.</param>
            <param name="inResolution">Number of real-world units per pixel, usually mm/px. Default value: 1.0f.</param>
            <param name="inBias">Compensation for systematic error in measurements (in real-world units). Default value: 0.0f.</param>
            <param name="outRealDistance">Distance between two points in real-world units.</param>
        </member>
        <member name="M:avl.SegmentToWorldCoordinates(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Position3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates a segment in real-world coordinates corresponding to the specified segment in image coordinates.</summary>
            <param name="inWorldPlane">Calibrated world plane.</param>
            <param name="inResolution">Number of real-world units per pixel, usually mm/px. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PathToWorldCoordinates(avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Position3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates a path in real-world coordinates corresponding to the specified path in image coordinates.</summary>
            <param name="inPath">Input path.</param>
            <param name="inWorldPlane">Calibrated world plane.</param>
            <param name="inResolution">Number of real-world units per pixel, usually mm/px. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToImageCoordinates(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Position3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates image coordinates corresponding to the specified real-world coordinates.</summary>
            <param name="inWorldPlane">Calibrated world plane.</param>
            <param name="inResolution">Number of real-world units per pixel, usually mm/px. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.PointToWorldCoordinates(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Position3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Point3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates real-world coordinates corresponding to the specified image coordinates.</summary>
            <param name="inWorldPlane">Calibrated world plane.</param>
            <param name="inResolution">Number of real-world units per pixel, usually mm/px. Default value: 1.0f.</param>
        </member>
        <member name="M:avl.CoordinateSystem2DToPosition3D(avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Position3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates a world plane from the given coordinate system.</summary>
        </member>
        <member name="M:avl.CalibrateWorldCoordinates(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point3D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Position3D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Calculates the world plane for the given sets of corresponding 2D and 3D points.</summary>
            <param name="outWorldPlane">Calibrated world plane.</param>
            <param name="outError">Average distance between provided points and points found on calibration plane.</param>
            <param name="outCorrectedImagePoints">Points projected to the found plane.</param>
            <param name="outCorrectedWorldPoints">World points found using output plane.</param>
        </member>
        <member name="M:avl.MergeLocationResults_Multiple(atl.Array&lt;avl.Object2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Object2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Object2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Object2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,atl.Array&lt;avl.Object2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combines results from multiple LocateMultipleObject instances.</summary>
            <param name="inMinDistance">Default value: 10.0f.</param>
            <param name="inMinScore">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.MergeLocationResults_Single(atl.Conditional&lt;avl.Object2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Object2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Object2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Object2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Conditional&lt;avl.Object2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Combines results from multiple LocateSingleObject instances.</summary>
            <param name="inMinScore">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.LocateMultipleObjects_SAD(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GrayModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Boolean,System.Single,System.Single,atl.Array&lt;avl.Object2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDeref">
            <summary>Finds multiple occurrences of a predefined template on an image by analysing the Square Average Difference between pixel values.</summary>
            <param name="inImage">Image on which model occurrences will be searched.</param>
            <param name="inSearchRegion">Possible centers of the object occurrences. Default value: atl::NIL.</param>
            <param name="inGrayModel">Model which will be sought.</param>
            <param name="inMinPyramidLevel">Defines the highest resolution level. Default value: 0.</param>
            <param name="inMaxPyramidLevel">Defines the number of reduced resolution levels that can be used to speed up computations. Default value: 3.</param>
            <param name="inIgnoreBoundaryObjects">Flag indicating whether objects crossing image boundary should be ignored or not. Default value: False.</param>
            <param name="inMaxDifference">Maximum accepted average difference between pixel values. Default value: 5.0f.</param>
            <param name="inMinDistance">Minimum distance between two matches. Default value: 10.0f.</param>
            <param name="outObjects">Found objects.</param>
            <param name="outPyramidHeight">Highest pyramid level used to speed up computations.</param>
            <param name="diagImagePyramid">Pyramid of iteratively downsampled input image.</param>
            <param name="diagMatchPyramid">Locations found on each pyramid level.</param>
            <param name="diagScores">Scores of found matches on each pyramid level.</param>
        </member>
        <member name="M:avl.LocateSingleObject_SAD(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GrayModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Boolean,System.Single,atl.Conditional&lt;avl.Object2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl">
            <summary>Finds a single occurrence of a predefined template on an image by analysing the Square Average Difference between pixel values.</summary>
            <param name="inImage">Image on which model occurrence will be searched.</param>
            <param name="inSearchRegion">Possible centers of the object occurrence. Default value: atl::NIL.</param>
            <param name="inGrayModel">Model which will be sought.</param>
            <param name="inMinPyramidLevel">Defines the highest resolution level. Default value: 0.</param>
            <param name="inMaxPyramidLevel">Defines the number of reduced resolution levels that can be used to speed up computations. Default value: 3.</param>
            <param name="inIgnoreBoundaryObjects">Flag indicating whether objects crossing image boundary should be ignored or not. Default value: False.</param>
            <param name="inMaxDifference">Maximum accepted average difference between pixel values. Default value: 0.0f.</param>
            <param name="outObject">Found object.</param>
            <param name="outPyramidHeight">Highest pyramid level used to speed up computations.</param>
            <param name="diagImagePyramid">Pyramid of iteratively downsampled input image.</param>
            <param name="diagMatchPyramid">Locations found on each pyramid level.</param>
            <param name="diagScores">Scores of found match on each pyramid level.</param>
        </member>
        <member name="M:avl.LocateMultipleObjects_NCC(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GrayModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Boolean,System.Single,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Array&lt;avl.Object2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.I">
            <summary>Finds all occurrences of a predefined template on an image by analysing the normalized correlation between pixel values.</summary>
            <param name="inImage">Image on which model occurrences will be searched.</param>
            <param name="inSearchRegion">Range of possible object centers. Default value: atl::NIL.</param>
            <param name="inGrayModel">Model of objects to be searched.</param>
            <param name="inMinPyramidLevel">Defines the lowest pyramid level at which object position is still refined. Default value: 0.</param>
            <param name="inMaxPyramidLevel">Defines the total number of reduced resolution levels that can be used to speed up computations. Default value: 3.</param>
            <param name="inIgnoreBoundaryObjects">Flag indicating whether objects crossing image boundary should be ignored or not. Default value: False.</param>
            <param name="inMinScore">Minimum score of object candidates accepted at each pyramid level. Default value: 0.7f.</param>
            <param name="inMinDistance">Minimum distance between two found objects. Default value: 10.0f.</param>
            <param name="inMaxBrightnessRatio">Defines the maximal deviation of the mean brightness of the model object and the object present in the image. Default value: atl::NIL.</param>
            <param name="inMaxContrastRatio">Defines the maximal deviation of the brightness standard deviation of the model object and the object present in the image. Default value: atl::NIL.</param>
            <param name="outObjects">Found objects.</param>
            <param name="outPyramidHeight">Highest pyramid level used to speed up computations.</param>
            <param name="diagImagePyramid">Pyramid of iteratively downsampled input image.</param>
            <param name="diagMatchPyramid">Candidate object locations found at each pyramid level.</param>
            <param name="diagScores">Scores of the found objects at each pyramid level.</param>
        </member>
        <member name="M:avl.LocateSingleObject_NCC(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GrayModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Boolean,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Conditional&lt;avl.Object2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!Syst">
            <summary>Finds a single occurrence of a predefined template on an image by analysing the normalized correlation between pixel values.</summary>
            <param name="inImage">Image on which object occurrence will be searched.</param>
            <param name="inSearchRegion">Range of possible object centers. Default value: atl::NIL.</param>
            <param name="inGrayModel">Model of objects to be searched.</param>
            <param name="inMinPyramidLevel">Defines the lowest pyramid level at which object position is still refined. Default value: 0.</param>
            <param name="inMaxPyramidLevel">Defines the total number of reduced resolution levels that can be used to speed up computations. Default value: 3.</param>
            <param name="inIgnoreBoundaryObjects">Flag indicating whether objects crossing image boundary should be ignored or not. Default value: False.</param>
            <param name="inMinScore">Minimum score of object candidates accepted at each pyramid level. Default value: 0.7f.</param>
            <param name="inMaxBrightnessRatio">Defines the maximal deviation of the mean brightness of the model object and the object present in the image. Default value: atl::NIL.</param>
            <param name="inMaxContrastRatio">Defines the maximal deviation of the brightness standard deviation of the model object and the object present in the image. Default value: atl::NIL.</param>
            <param name="outObject">Found object.</param>
            <param name="outPyramidHeight">Highest pyramid level used to speed up computations.</param>
            <param name="diagImagePyramid">Pyramid of iteratively downsampled input image.</param>
            <param name="diagMatchPyramid">Candidate object locations found at each pyramid level.</param>
            <param name="diagScores">Scores of the found object at each pyramid level.</param>
        </member>
        <member name="M:avl.CreateGrayModel(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,avl.GrayModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a model for NCC or SAD template matching.</summary>
            <param name="inImage">Image from which model will be extracted.</param>
            <param name="inTemplateRegion">Region of the image from which model will be extracted. Default value: atl::NIL.</param>
            <param name="inReferenceFrame">Exact position of the model object in the image. Default value: atl::NIL.</param>
            <param name="inMinPyramidLevel">Defines the index of the lowest reduced resolution level used to speed up computations. Default value: 0.</param>
            <param name="inMaxPyramidLevel">Defines the number of reduced resolution levels used to speed up computations. Default value: atl::NIL.</param>
            <param name="inMinAngle">Start of range of possible rotations. Default value: 0.0f.</param>
            <param name="inMaxAngle">End of range of possible rotations. Default value: 0.0f.</param>
            <param name="inAnglePrecision">Defines angular resolution of the matching process. Default value: 1.0f.</param>
            <param name="inMinScale">Start of range of possible scales. Default value: 1.0f.</param>
            <param name="inMaxScale">End of range of possible scales. Default value: 1.0f.</param>
            <param name="inScalePrecision">Defines scale resolution of the matching process. Default value: 1.0f.</param>
            <param name="outGrayModel">Created model that can be used by LocateMultipleObjects_NCC and LocateMultipleObjects_SAD filters.</param>
            <param name="outGrayModelPoint">The middle point of the created model.</param>
            <param name="diagTemplatePyramid">Visualization of the model at different resolution levels.</param>
        </member>
        <member name="M:avl.LoadGrayModel(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.GrayModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized template matching GrayModel object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outGrayModel">Deserialized output model.</param>
        </member>
        <member name="M:avl.SaveGrayModel(avl.GrayModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized template matching GrayModel object as avdata file.</summary>
            <param name="inGrayModel">Model to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.LocateMultipleObjects_Edges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.EdgeModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,atl.Array&lt;avl.Object2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Array&lt;avl.Path&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.I">
            <summary>Finds all occurrences of a predefined template on an image by comparing object edges.</summary>
            <param name="inImage">Image on which object occurrences will be searched.</param>
            <param name="inSearchRegion">Region of possible object centers. Default value: atl::NIL.</param>
            <param name="inEdgeModel">Model of objects to be searched.</param>
            <param name="inMinPyramidLevel">Defines the lowest pyramid level at which object position is still refined. Default value: 0.</param>
            <param name="inMaxPyramidLevel">Defines the total number of reduced resolution levels that can be used to speed up computations. Default value: 3.</param>
            <param name="inEdgeThreshold">Minimum strength of edges used for matching with the model. Default value: 10.0f.</param>
            <param name="inIgnoreEdgePolarity">Flag indicating whether edges of negated polarity should be ignored or not. Default value: False.</param>
            <param name="inIgnoreBoundaryObjects">Flag indicating whether objects crossing image boundary should be ignored or not. Default value: False.</param>
            <param name="inMinScore">Minimum score of object candidates accepted at each pyramid level. Default value: 0.7f.</param>
            <param name="inMinDistance">Minimum distance between two found objects. Default value: 10.0f.</param>
            <param name="outObjects">Found objects.</param>
            <param name="outObjectEdges">Model edges of the found objects.</param>
            <param name="outPyramidHeight">Highest pyramid level used to speed up computations.</param>
            <param name="diagEdgePyramid">Image edges used for matching at each pyramid level.</param>
            <param name="diagMatchPyramid">Candidate object locations found at each pyramid level.</param>
            <param name="diagScores">Scores of the found objects at each pyramid level.</param>
        </member>
        <member name="M:avl.LocateSingleObject_Edges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.EdgeModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Single,System.Boolean,System.Boolean,System.Single,atl.Conditional&lt;avl.Object2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;atl.Array&lt;avl.Path&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Image&gt;">
            <summary>Finds a single occurrence of a predefined template on an image by comparing object edges.</summary>
            <param name="inImage">Image on which object occurrence will be searched.</param>
            <param name="inSearchRegion">Region of possible object centers. Default value: atl::NIL.</param>
            <param name="inEdgeModel">Model of objects to be searched.</param>
            <param name="inMinPyramidLevel">Defines the lowest pyramid level at which object position is still refined. Default value: 0.</param>
            <param name="inMaxPyramidLevel">Defines the total number of reduced resolution levels that can be used to speed up computations. Default value: 3.</param>
            <param name="inEdgeThreshold">Minimum strength of edges used for matching with the model. Default value: 10.0f.</param>
            <param name="inIgnoreEdgePolarity">Flag indicating whether edges of negated polarity should be ignored or not. Default value: False.</param>
            <param name="inIgnoreBoundaryObjects">Flag indicating whether objects crossing image boundary should be ignored or not. Default value: False.</param>
            <param name="inMinScore">Minimum score of object candidates accepted at each pyramid level. Default value: 0.7f.</param>
            <param name="outObject">Found object.</param>
            <param name="outObjectEdges">Model edges of the found object.</param>
            <param name="outPyramidHeight">Highest pyramid level used to speed up computations.</param>
            <param name="diagEdgePyramid">Image edges used for matching at each pyramid level.</param>
            <param name="diagMatchPyramid">Candidate object locations found at each pyramid level.</param>
            <param name="diagScores">Scores of the found object at each pyramid level.</param>
        </member>
        <member name="M:avl.CreateEdgeModel(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,atl.Optional&lt;System.Int32&gt;,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,atl.Conditional&lt;avl.EdgeModel&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;atl.Arr">
            <summary>Creates a model for edge-based template matching.</summary>
            <param name="inImage">Image from which model will be extracted.</param>
            <param name="inTemplateRegion">Region of the image from which model will be extracted. Default value: atl::NIL.</param>
            <param name="inReferenceFrame">Exact position of the model object in the image. Default value: atl::NIL.</param>
            <param name="inMinPyramidLevel">Defines the index of the lowest reduced resolution level used to speed up computations. Default value: 0.</param>
            <param name="inMaxPyramidLevel">Defines the number of reduced resolution levels used to speed up computations. Default value: atl::NIL.</param>
            <param name="inSmoothingStdDev">Standard deviation of the gaussian smoothing applied before edge extraction. Default value: 0.0f.</param>
            <param name="inEdgeThreshold">Higher threshold for edge magnitude. Default value: 35.0f.</param>
            <param name="inEdgeHysteresis">Threshold hysteresis value for edge magnitude. Default value: 15.0f.</param>
            <param name="inMinAngle">Start of range of possible rotations. Default value: -180.0f.</param>
            <param name="inMaxAngle">End of range of possible rotations. Default value: 180.0f.</param>
            <param name="inAnglePrecision">Defines angular resolution of the matching process. Default value: 1.0f.</param>
            <param name="inMinScale">Start of range of possible scales. Default value: 1.0f.</param>
            <param name="inMaxScale">End of range of possible scales. Default value: 1.0f.</param>
            <param name="inScalePrecision">Defines scale resolution of the matching process. Default value: 1.0f.</param>
            <param name="inEdgeCompleteness">Determines what fraction of the edges will be present in the created model. Default value: 1.0f.</param>
            <param name="outEdgeModel">Created model that can be used by LocateMultipleObjects_Edges.</param>
            <param name="outEdgeModelPoint">The middle point of the created model.</param>
            <param name="diagEdges">Visualization of the model edges found at the original resolution.</param>
            <param name="diagEdgePyramid">Visualization of the edges found at different resolution levels.</param>
        </member>
        <member name="M:avl.LoadEdgeModel(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized template matching EdgeModel object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outEdgeModel">Deserialized output model.</param>
        </member>
        <member name="M:avl.SaveEdgeModel(avl.EdgeModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized template matching EdgeModel object as avdata file.</summary>
            <param name="inEdgeModel">Model to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avs.AvsFilter_MeasureObjectWidth3D(avl.ScanMapArrayState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentScanField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MeasureObjectMethod.Type,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst">
            <summary>Measures the width of an object using stripe detection.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanField">Field in which measurement scans are performed.</param>
            <param name="inScanFieldAlignment">Adjusts the scan field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">Number of scans to be performed. Default value: 5.</param>
            <param name="inScanWidth">Width of each single scan. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the object stripe extraction process. Default value: StripeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil MinStripeWidth: 0.0f MaxStripeWidth: Nil StripePolarity: High ).</param>
            <param name="inMeasureMethod">Method used to measure the object.</param>
            <param name="inStripeSelection">Selection mode of edges of the object.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="inOutlierCount">Determines how many points are not count when object width is measured.</param>
            <param name="outObjectWidth">Width of the object.</param>
            <param name="outSegment1">First edge of the object.</param>
            <param name="outSegment2">Second edge of the object.</param>
            <param name="outAlignedScanField">Field in which the scans are performed.</param>
            <param name="diagScanSegments">Segments along which the scans are performed.</param>
            <param name="diagPoints1">Detected edge points on the first side.</param>
            <param name="diagPoints2">Detected edge points on the second side.</param>
        </member>
        <member name="M:avs.AvsFilter_FitPathToStripe3D(avs.PathFitting3DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.">
            <summary>Performs a series of 1D stripe detections in 3D and creates a path from the detected points.</summary>
            <param name="inSurface">Surface to fit path to.</param>
            <param name="inFittingField">Path fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanStep">Optional implicit conversion of the input path to an equidistant one. Default value: 5.0f.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil MinStripeWidth: 0.0f MaxStripeWidth: Nil StripePolarity: High ).</param>
            <param name="inStripeSelection">Selection mode of stripes.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="inMaxPathInterpolationLength">Maximal number of consecutive points not found. Default value: 1.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path or nothing if the fitting failed.</param>
            <param name="outLeftPath">Fitted left path.</param>
            <param name="outRightPath">Fitted right path.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitPathToEdges3D(avs.PathFitting3DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.Com">
            <summary>Performs a series of 1D edge detections in 3D and creates a path from the detected points.</summary>
            <param name="inSurface">Surface to fit path to.</param>
            <param name="inFittingField">Path fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanStep">Optional implicit conversion of the input path to an equidistant one. Default value: 5.0f.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f EdgeTransition: LowToHigh ).</param>
            <param name="inEdgeSelection">Selection mode of edges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="inMaxPathInterpolationLength">Maximal number of consecutive points not found. Default value: 1.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path or nothing if the fitting failed.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitSegmentToStripe3D(avs.SegmentFitting3DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.Compil">
            <summary>Performs a series of 1D edge detections in 3D and finds a segment that best matches the detected points.</summary>
            <param name="inSurface">Surface to fit segment to.</param>
            <param name="inFittingField">Segment fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  segment. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil MinStripeWidth: 0.0f MaxStripeWidth: Nil StripePolarity: High ).</param>
            <param name="inStripeSelection">Selection mode of stripe.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment or nothing if the fitting fails.</param>
            <param name="outLeftSegment">Fitted left segment.</param>
            <param name="outRightSegment">Fitted right segment.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle segment of a surface stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitSegmentToEdges3D(avs.SegmentFitting3DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerS">
            <summary>Performs a series of 1D edge detections in 3D and finds a segment that best matches the detected points.</summary>
            <param name="inSurface">Surface to fit segment to.</param>
            <param name="inFittingField">Segment fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  segment. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f EdgeTransition: LowToHigh ).</param>
            <param name="inEdgeSelection">Selection mode of edges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitCircleToStripe3D(avs.CircleFitting3DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerS">
            <summary>Performs a series of 1D edge detections in 3D and finds a circle that best matches the detected points.</summary>
            <param name="inSurface">Surface to fit the circle to.</param>
            <param name="inFittingField">Circle fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the circle. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil MinStripeWidth: 0.0f MaxStripeWidth: Nil StripePolarity: High ).</param>
            <param name="inStripeSelection">Selection mode of stripe.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle in the middle of found stripe or nothing if the fitting fails.</param>
            <param name="outInnerCircle">Fitted inner circle.</param>
            <param name="outOuterCircle">Fitted outer circle.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle circle of a surface stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitCircleToEdges3D(avs.CircleFitting3DState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServ">
            <summary>Performs a series of 1D edge detections in 3D and finds a circle that best matches the detected points.</summary>
            <param name="inSurface">Surface to fit the circle to.</param>
            <param name="inFittingField">Circle fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the circle. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f EdgeTransition: LowToHigh ).</param>
            <param name="inEdgeSelection">Selection mode of edges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.MeasureObjectWidth3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.ScanMap&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MeasureObjectMethod.Type,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;avl.MEstimator.Type&gt;,System.Int32,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.Compiler">
            <summary>Measures the width of an object using stripe detection.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inMeasurementMap">Input measurement map.</param>
            <param name="inStripeScanParams">Parameters controlling the object stripe extraction process.</param>
            <param name="inMeasureMethod">Method used to measure the object.</param>
            <param name="inStripeSelection">Selection mode of edges of the object. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="inOutlierCount">Determines how many outlying points are rejected before the width is measured.</param>
            <param name="outObjectWidth">Width of the object.</param>
            <param name="outSegment1">First edge of the object.</param>
            <param name="outSegment2">Second edge of the object.</param>
            <param name="diagPoints1">Detected edge points on the first side.</param>
            <param name="diagPoints2">Detected edge points on the second side.</param>
        </member>
        <member name="M:avl.CreateSurfaceMeasurementMap(avl.SurfaceFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentScanField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type,atl.Array&lt;avl.ScanMap&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.SegmentScanField*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>(Pre)computes surface sampling locations used by MeasureObjectWidth3D function.</summary>
            <param name="inSurfaceFormat">Information about dimensions, depth and pixel type of the surface.</param>
            <param name="inScanField">Field in which scans will be performed.</param>
            <param name="inScanFieldAlignment">Adjusts the scan field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">Number of scans to be performed. Default value: 5.</param>
            <param name="inScanWidth">Width of the scan area. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="outAlignedScanField">Field in which the scans will be performed.</param>
            <param name="diagScanSegments">Array of scan segments.</param>
        </member>
        <member name="M:avl.FitPathToStripe3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,System.Single,atl.Conditional&lt;atl.Array&lt;avl.Point3D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Point3D&gt;&gt;*!System.Runtime.Comp">
            <summary>Performs a series of 1D stripe detections and creates a path from the detected points.</summary>
            <param name="inSurface">Surface to fit the path to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inStripeSelection">Selection mode of stripe. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxPathInterpolationLength">Maximal number of consecutive points not found. Default value: atl::NIL.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path or nothing if the fitting failed.</param>
            <param name="outLeftPath">Fitted left path.</param>
            <param name="outRightPath">Fitted right path.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitPathToEdges3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,System.Single,atl.Conditional&lt;atl.Array&lt;avl.Point3D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.SurfaceEdge1D&gt;&gt;*!Sys">
            <summary>Performs a series of 1D edge detections and creates a path from the detected points.</summary>
            <param name="inSurface">Surface to fit the path to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inEdgeSelection">Selection mode of edges. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxPathInterpolationLength">Maximal number of consecutive points not found. Default value: atl::NIL.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path or nothing if the fitting failed.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitSegmentToStripe3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,System.Single,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Segment3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDerefere">
            <summary>Performs a series of 1D edge detections and finds a segment that best matches the detected points.</summary>
            <param name="inSurface">Surface to fit segment to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inStripeSelection">Selection mode of stripe. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment or nothing if the fitting fails.</param>
            <param name="outLeftSegment">Fitted left segment.</param>
            <param name="outRightSegment">Fitted right segment.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle segment of a surface stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitSegmentToEdges3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,System.Single,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Segment3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.SurfaceEdge1D&gt;&gt;*!System.Runtime.CompilerServ">
            <summary>Performs a series of 1D edge detections and finds a segment that best matches the detected points.</summary>
            <param name="inSurface">Surface to fit segment to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inEdgeSelection">Selection mode of edges. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitCircleToStripe3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,System.Single,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Circle3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Circle3D&gt;*!System.Runtime.CompilerServ">
            <summary>Performs a series of 1D edge detections and finds a circle that best matches the detected points.</summary>
            <param name="inSurface">Surface to fit the circle to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inStripeSelection">Selection mode of stripe. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle in the middle of found stripe or nothing if the fitting fails.</param>
            <param name="outInnerCircle">Fitted inner circle.</param>
            <param name="outOuterCircle">Fitted outer circle.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle circle of a surface stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitCircleToEdges3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,System.Single,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Circle3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.SurfaceEdge1D&gt;&gt;*!S">
            <summary>Performs a series of 1D edge detections and finds a circle that best matches the detected points.</summary>
            <param name="inSurface">Surface to fit the circle to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inEdgeSelection">Selection mode of edges. Default value: avl::SelectionBest.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="diagHeightProfiles">Extracted surface height profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.CreatePathFittingMap3D(avl.SurfaceFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,System.Int32,avl.InterpolationMethod.Type,avl.PathFittingMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Precomputes a data object that is required for fast path fitting on surfaces.</summary>
            <param name="inSurfaceFormat">Dimensions, depth image pixel type, coordinate offsets and scales of a surface on which path fitting will be performed.</param>
            <param name="inFittingField">Defines a stripe in which scan segments will be created.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanStep">Optional implicit conversion of the input path to an equidistant one. Default value: atl::NIL.</param>
            <param name="inScanWidth">The width of each scan field in pixels of the surface depth image. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of depth image pixel values. Default value: avl::InterpolationMethod::NearestNeighbour.</param>
            <param name="outFittingMap">Optimized data required for path fitting.</param>
            <param name="diagScanSegments">Segments along which the scans will be run.</param>
            <param name="diagSamplingAreas">Scan fields created for point detection.</param>
        </member>
        <member name="M:avl.CreateSegmentFittingMap3D(avl.SurfaceFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32,avl.InterpolationMethod.Type,avl.SegmentFittingMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Precomputes a data object that is required for fast segment fitting on surfaces.</summary>
            <param name="inSurfaceFormat">Dimensions, depth image pixel type, coordinate offsets and scales of a surface on which segment fitting will be performed.</param>
            <param name="inFittingField">Defines a rectangle in which scan segments will be created.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the segment. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field in pixels of the surface depth image. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of depth image pixel values. Default value: avl::InterpolationMethod::NearestNeighbour.</param>
            <param name="outFittingMap">Optimized data required for segment fitting.</param>
            <param name="diagScanSegments">Segments along which the scans will be run.</param>
            <param name="diagSamplingAreas">Scan fields created for point detection.</param>
        </member>
        <member name="M:avl.CreateCircleFittingMap3D(avl.SurfaceFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32,avl.InterpolationMethod.Type,avl.CircleFittingMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Precomputes a data object that is required for fast circle fitting on surfaces.</summary>
            <param name="inSurfaceFormat">Dimensions, depth image pixel type, coordinate offsets and scales of a surface on which circle fitting will be performed.</param>
            <param name="inFittingField">Defines a ring in which scan segments will be created.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the circle. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field in pixels of the surface depth image. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of depth image pixel values. Default value: avl::InterpolationMethod::NearestNeighbour.</param>
            <param name="outFittingMap">Optimized data required for circle fitting.</param>
            <param name="diagScanSegments">Segments along which the scans will be run.</param>
            <param name="diagSamplingAreas">Scan fields created for point detection.</param>
        </member>
        <member name="M:avs.AvsFilter_FitPathToStripe(avs.PathFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.Compiler">
            <summary>Performs a series of 1D stripe detections and creates a path from the detected points.</summary>
            <param name="inImage">Image to fit the path to.</param>
            <param name="inFittingField">Path fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanStep">Optional implicit conversion of the input path to an equidistant one. Default value: 5.0f.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Dark MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inStripeSelection">Selection mode of stripe.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive points not found. Default value: 1.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path in the middle of found stripe.</param>
            <param name="outLeftPath">Fitted left path.</param>
            <param name="outRightPath">Fitted right path.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitPathToRidges(avs.PathFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerS">
            <summary>Performs a series of 1D ridge detections and creates a path from the detected points.</summary>
            <param name="inImage">Image to fit the path to.</param>
            <param name="inFittingField">Path fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanStep">Optional implicit conversion of the input path to an equidistant one. Default value: 5.0f.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process. Default value: RidgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f RidgeWidth: 5 RidgeMargin: 2 MinMagnitude: 5.0f RidgePolarity: Dark ).</param>
            <param name="inRidgeSelection">Selection mode of ridges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive points not found. Default value: 1.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of ridge points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path or nothing if the fitting failed.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the ridge operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitPathToEdges(avs.PathFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerSer">
            <summary>Performs a series of 1D edge detections and creates a path from the detected points.</summary>
            <param name="inImage">Image to fit the path to.</param>
            <param name="inFittingField">Path fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanStep">Optional implicit conversion of the input path to an equidistant one. Default value: 5.0f.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f EdgeTransition: BrightToDark ).</param>
            <param name="inEdgeSelection">Selection mode of edges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive points not found. Default value: 1.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path or nothing if the fitting failed.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitSegmentToStripe(avs.SegmentFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServic">
            <summary>Performs a series of 1D stripe detections and finds a segment that best matches the detected points.</summary>
            <param name="inImage">Image to fit segment to.</param>
            <param name="inFittingField">Segment fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  segment. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Dark MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inStripeSelection">Selection mode of stripe.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment in the middle of found stripe.</param>
            <param name="outLeftSegment">Fitted left segment.</param>
            <param name="outRightSegment">Fitted right segment.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle segment of an image stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitSegmentToRidges(avs.SegmentFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerService">
            <summary>Performs a series of 1D ridge detections and finds a segment that best matches the detected points.</summary>
            <param name="inImage">Image to fit segment to.</param>
            <param name="inFittingField">Segment fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  segment. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process. Default value: RidgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f RidgeWidth: 5 RidgeMargin: 2 MinMagnitude: 5.0f RidgePolarity: Dark ).</param>
            <param name="inRidgeSelection">Selection mode of ridges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of ridge points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment or nothing if the fitting fails.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the ridge operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitSegmentToEdges(avs.SegmentFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.">
            <summary>Performs a series of 1D edge detections and finds a segment that best matches the detected points.</summary>
            <param name="inImage">Image to fit segment to.</param>
            <param name="inFittingField">Segment fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  segment. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f EdgeTransition: BrightToDark ).</param>
            <param name="inEdgeSelection">Selection mode of edges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitArcToStripe(avs.ArcFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ArcFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!">
            <summary>Performs a series of 1D stripe detections and finds an arc that best matches the detected points.</summary>
            <param name="inImage">Input image to fit arc to.</param>
            <param name="inFittingField">Arc fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  arc. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Dark MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inStripeSelection">Selection mode of stripe.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit an arc. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outArc">Fitted arc in the middle of found stripe.</param>
            <param name="outInnerArc">Fitted inner arc.</param>
            <param name="outOuterArc">Fitted outer arc.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle arc of an image stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual arc points and the corresponding reference arc points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitArcToRidges(avs.ArcFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ArcFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!S">
            <summary>Performs a series of 1D ridge detections and finds an arc that best matches the detected points.</summary>
            <param name="inImage">Input image to fit arc to.</param>
            <param name="inFittingField">Arc fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  arc. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process. Default value: RidgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f RidgeWidth: 5 RidgeMargin: 2 MinMagnitude: 5.0f RidgePolarity: Dark ).</param>
            <param name="inRidgeSelection">Selection mode of ridges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of ridge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit an arc. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outArc">Fitted arc or nothing if the fitting fails.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual arc points and the corresponding reference arc points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the ridge operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitArcToEdges(avs.ArcFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ArcFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!Sys">
            <summary>Performs a series of 1D edge detections and finds an arc that best matches the detected points.</summary>
            <param name="inImage">Input image to fit arc to.</param>
            <param name="inFittingField">Arc fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  arc. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f EdgeTransition: BrightToDark ).</param>
            <param name="inEdgeSelection">Selection mode of edges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit an arc. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outArc">Fitted arc or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual arc points and the corresponding reference arc points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitCircleToStripe(avs.CircleFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.">
            <summary>Performs a series 1D stripe detections and finds a circle that best matches the detected points.</summary>
            <param name="inImage">Image to fit the circle to.</param>
            <param name="inFittingField">Circle fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  circle. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Dark MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inStripeSelection">Selection mode of stripe.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle in the middle of found stripe.</param>
            <param name="outInnerCircle">Fitted inner circle.</param>
            <param name="outOuterCircle">Fitted outer circle.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle circle of an image stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitCircleToRidges(avs.CircleFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.I">
            <summary>Performs a series of 1D ridge detections and finds a circle that best matches the detected points.</summary>
            <param name="inImage">Image to fit the circle to.</param>
            <param name="inFittingField">Circle fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the  circle. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process. Default value: RidgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f RidgeWidth: 5 RidgeMargin: 2 MinMagnitude: 5.0f RidgePolarity: Dark ).</param>
            <param name="inRidgeSelection">Selection mode of ridges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of ridge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle or nothing if the fitting fails.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the ridge operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_FitCircleToEdges(avs.CircleFittingState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type!System.Runtime.CompilerServices.IsConst,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsC">
            <summary>Performs a series of 1D edge detections and finds a circle that best matches the detected points.</summary>
            <param name="inImage">Image to fit the circle to.</param>
            <param name="inFittingField">Circle fitting field.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the circle. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 1.0f MinMagnitude: 5.0f EdgeTransition: BrightToDark ).</param>
            <param name="inEdgeSelection">Selection mode of edges.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="outAlignedFittingField">Fitting field used; in the image coordinate system.</param>
            <param name="diagScanSegments">Segments along which the scans were run.</param>
            <param name="diagSamplingAreas">Areas from which the input image is sampled.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitPathToStripe(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,System.Single,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Pat">
            <summary>Performs a series of 1D stripe detections and creates a path from the detected points.</summary>
            <param name="inImage">Image to fit the path to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inStripeSelection">Selection mode of stripe. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive points not found. Default value: atl::NIL.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path in the middle of found stripe.</param>
            <param name="outLeftPath">Fitted left path.</param>
            <param name="outRightPath">Fitted right path.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitPathToRidges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,System.Single,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.Ridge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenc">
            <summary>Performs a series of 1D ridge detections and creates a path from the detected points.</summary>
            <param name="inImage">Image to fit the path to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process.</param>
            <param name="inRidgeSelection">Selection mode of ridges. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive points not found. Default value: atl::NIL.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of ridge points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path or nothing if the fitting failed.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the ridge operator response.</param>
        </member>
        <member name="M:avl.FitPathToEdges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,System.Single,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.Edge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;">
            <summary>Performs a series of 1D edge detections and creates a path from the detected points.</summary>
            <param name="inImage">Image to fit the path to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inEdgeSelection">Selection mode of edges. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive points not found. Default value: atl::NIL.</param>
            <param name="inMaxDeviationDelta">Maximal difference between deviations of consecutive path points. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="outPath">Fitted path or nothing if the fitting failed.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual path points and the corresponding reference path points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitSegmentToStripe(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment2">
            <summary>Performs a series of 1D stripe detections and finds a segment that best matches the detected points.</summary>
            <param name="inImage">Image to fit segment to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inStripeSelection">Selection mode of stripe. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment in the middle of found stripe.</param>
            <param name="outLeftSegment">Fitted left segment.</param>
            <param name="outRightSegment">Fitted right segment.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle segment of an image stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitSegmentToRidges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.Ridge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.O">
            <summary>Performs a series of 1D ridge detections and finds a segment that best matches the detected points.</summary>
            <param name="inImage">Image to fit segment to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process.</param>
            <param name="inRidgeSelection">Selection mode of ridges. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of ridge points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment or nothing if the fitting fails.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the ridge operator response.</param>
        </member>
        <member name="M:avl.FitSegmentToEdges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.Edge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Opti">
            <summary>Performs a series of 1D edge detections and finds a segment that best matches the detected points.</summary>
            <param name="inImage">Image to fit segment to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inEdgeSelection">Selection mode of edges. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outSegment">Fitted segment or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual segment points and the corresponding reference segment points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitArcToStripe(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ArcFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Arc2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Arc2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional">
            <summary>Performs a series of 1D stripe detections and finds an arc that best matches the detected points.</summary>
            <param name="inImage">Input image to fit arc to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inStripeSelection">Selection mode of stripe. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit an arc. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outArc">Fitted arc in the middle of found stripe.</param>
            <param name="outInnerArc">Fitted inner arc.</param>
            <param name="outOuterArc">Fitted outer arc.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle arc of an image stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual arc points and the corresponding reference arc points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitArcToRidges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ArcFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Arc2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.Ridge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDer">
            <summary>Performs a series of 1D ridge detections and finds an arc that best matches the detected points.</summary>
            <param name="inImage">Input image to fit arc to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process.</param>
            <param name="inRidgeSelection">Selection mode of ridges. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of ridge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit an arc. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outArc">Fitted arc or nothing if the fitting fails.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual arc points and the corresponding reference arc points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the ridge operator response.</param>
        </member>
        <member name="M:avl.FitArcToEdges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ArcFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Arc2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.Edge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDerefe">
            <summary>Performs a series of 1D edge detections and finds an arc that best matches the detected points.</summary>
            <param name="inImage">Input image to fit arc to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inEdgeSelection">Selection mode of edges. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit an arc. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outArc">Fitted arc or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual arc points and the corresponding reference arc points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitCircleToStripe(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Circle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Circle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl">
            <summary>Performs a series 1D stripe detections and finds a circle that best matches the detected points.</summary>
            <param name="inImage">Image to fit the circle to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inStripeSelection">Selection mode of stripe. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of stripe points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle in the middle of found stripe.</param>
            <param name="outInnerCircle">Fitted inner circle.</param>
            <param name="outOuterCircle">Fitted outer circle.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outStripePoints">Extracted points of middle circle of an image stripe.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.FitCircleToRidges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Circle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.Ridge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImpl">
            <summary>Performs a series of 1D ridge detections and finds a circle that best matches the detected points.</summary>
            <param name="inImage">Image to fit the circle to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process.</param>
            <param name="inRidgeSelection">Selection mode of ridges. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of ridge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle or nothing if the fitting fails.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the ridge operator response.</param>
        </member>
        <member name="M:avl.FitCircleToEdges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.CircleFittingMethod.Type,atl.Optional&lt;avl.MEstimator.Type&gt;,atl.Conditional&lt;avl.Circle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;atl.Conditional&lt;avl.Edge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplici">
            <summary>Performs a series of 1D edge detections and finds a circle that best matches the detected points.</summary>
            <param name="inImage">Image to fit the circle to.</param>
            <param name="inFittingMap">Input fitting map.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inEdgeSelection">Selection mode of edges. Default value: avl::SelectionBest.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxIncompleteness">Maximal fraction of edge points not found. Default value: 0.1f.</param>
            <param name="inFittingMethod">Method used to fit a circle. Default value: AlgebraicTaubin.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="outCircle">Fitted circle or nothing if the fitting fails.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outDeviationProfile">Profile of distances between the actual circle points and the corresponding reference circle points.</param>
            <param name="diagBrightnessProfiles">Extracted image profiles.</param>
            <param name="diagResponseProfiles">Profiles of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.CreatePathFittingMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.PathFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,avl.InterpolationMethod.Type,avl.PathFittingMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Precomputes a data object that is required for fast path fitting on images.</summary>
            <param name="inImageFormat">Dimensions, depth and pixel type of the images on which fitting will be performed.</param>
            <param name="inFittingField">Defines a stripe in which scan segments will be created.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanStep">Optional implicit conversion of the input path to an equidistant one. Default value: atl::NIL.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: avl::InterpolationMethod::NearestNeighbour.</param>
            <param name="outFittingMap">Optimized data required for path fitting.</param>
            <param name="diagScanSegments">Segments along which the scans will be run.</param>
            <param name="diagSamplingAreas">Scan fields created for point detection.</param>
        </member>
        <member name="M:avl.CreateSegmentFittingMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.InterpolationMethod.Type,avl.SegmentFittingMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDeref">
            <summary>Precomputes a data object that is required for fast segment fitting on images.</summary>
            <param name="inImageFormat">Dimensions, depth and pixel type of the images on which fitting will be performed.</param>
            <param name="inFittingField">Defines a rectangle in which scan segments will be created.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the segment. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: avl::InterpolationMethod::NearestNeighbour.</param>
            <param name="outFittingMap">Optimized data required for segment fitting.</param>
            <param name="diagScanSegments">Segments along which the scans will be run.</param>
            <param name="diagSamplingAreas">Scan fields created for point detection.</param>
        </member>
        <member name="M:avl.CreateArcFittingMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ArcFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.InterpolationMethod.Type,avl.ArcFittingMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Precomputes a data object that is required for fast arc fitting on images.</summary>
            <param name="inImageFormat">Dimensions, depth and pixel type of the images on which fitting will be performed.</param>
            <param name="inFittingField">Defines a ring section in which scan segments will be created.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the arc. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: avl::InterpolationMethod::NearestNeighbour.</param>
            <param name="outFittingMap">Optimized data required for arc fitting.</param>
            <param name="diagScanSegments">Segments along which the scans will be run.</param>
            <param name="diagSamplingAreas">Scan fields created for point detection.</param>
        </member>
        <member name="M:avl.CreateCircleFittingMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CircleFittingField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.InterpolationMethod.Type,avl.CircleFittingMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDerefere">
            <summary>Precomputes a data object that is required for fast circle fitting on images.</summary>
            <param name="inImageFormat">Dimensions, depth and pixel type of the images on which fitting will be performed.</param>
            <param name="inFittingField">Defines a ring in which scan segments will be created.</param>
            <param name="inFittingFieldAlignment">Adjusts the fitting field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">The number of points that will be searched to estimate the position of the circle. Default value: 10.</param>
            <param name="inScanWidth">The width of each scan field (in pixels). Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: avl::InterpolationMethod::NearestNeighbour.</param>
            <param name="outFittingMap">Optimized data required for circle fitting.</param>
            <param name="diagScanSegments">Segments along which the scans will be run.</param>
            <param name="diagSamplingAreas">Scan fields created for point detection.</param>
        </member>
        <member name="M:avl.ImageShortestPath_Experimental(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Single,atl.Array&lt;avl.Location&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inImage">Input image.</param>
            <param name="inStep">Default value: 5.</param>
            <param name="inMaxAngleDeviation">Default value: 45.0f.</param>
        </member>
        <member name="M:avl.FitContour_Adaptive_Experimental(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Single,System.Int32,avl.EdgeTransition.Type,System.Int32,System.Int32,System.Single,avl.InterpolationMethod.Type,System.Single,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Fits the given contour to the edges of the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inMaxDeviation">Maximal distance between the fitted and the expected contours. Default value: 15.</param>
            <param name="inMaxSlant">Maximal angle between corresponding tangents of the fitted and the expected contours. Default value: 45.0f.</param>
            <param name="inStep">Distance between consecutive fitted points measured along the expected contour. Default value: 6.</param>
            <param name="inMinEdgeMagnitude">Default value: 0.</param>
            <param name="inMaxEdgeMagnitude">Default value: 255.</param>
            <param name="inGammaFactor">Default value: 1.0f.</param>
            <param name="inSmoothingStdDev">Default value: 0.0f.</param>
        </member>
        <member name="M:avl.AdjustPathArrayToEdges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,avl.AdjustmentMetric.Type,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Single,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates, rotates and scales the given contour set to the edges of the input image with subpixel precision.</summary>
            <param name="inImage">Input image.</param>
            <param name="inPaths">Paths to be adjusted. For sparse, synthetic paths the inPointSpacing needs to be specified.</param>
            <param name="inPointSpacing">If set, sampling points of the input path will be equidistant with specified spacing. Useful for increasing density of synthetic, sparse paths. Default value: atl::NIL.</param>
            <param name="inAlignment">Alignment to be corrected, usually connects to outObject.Alignment of LocateObjects filter. Default value: atl::NIL.</param>
            <param name="inAttractionRadius">Expected initial distance between inPaths and edges of the input image. Default value: 2.0f.</param>
            <param name="inAdjustmentMetric">Metric used for path attraction. The SegmentDistance minimizes distances along path normal vectors, and thus adjustment is more accurate. PointDistance_* minimize euclidean distance, adjustment tends to be more stable. Default value: SegmentDistance.</param>
            <param name="inAdjustTranslation">Compute the translation part of adjustment transform. Must be true when using AttractPathTangents estimation method. Default value: True.</param>
            <param name="inAdjustRotation">Compute the rotation part of adjustment transform. Default value: True.</param>
            <param name="inAdjustScale">Compute the scale part of adjustment transform. Default value: False.</param>
            <param name="inIterationCount">Number of iterations of internal adjustment algorithm. Default value: 6.</param>
            <param name="inBaseGradient">Threshold for suppression of weak input image gradients. Increase for very noisy images. Default value: 1.0f.</param>
            <param name="outAdjustedPaths">Adjusted output paths.</param>
            <param name="outAlignment">Corrected alignment - the inAlignment input modified with estimated adjustment parameters.</param>
            <param name="diagAttractionVectors">Attraction vectors from first iteration.</param>
        </member>
        <member name="M:avl.CreateCharacterVariants(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates variations of input regions</summary>
            <param name="inRegion">Input region.</param>
        </member>
        <member name="M:avl.OcrInternal_CutLetter(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Internal character normalization</summary>
        </member>
        <member name="M:avl.OcrInternal_NormalizeCharacter(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Internal character normalization</summary>
        </member>
        <member name="M:avl.OcrInternal_ExtractFeatures(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CharacterFeatures!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Internal extracting features</summary>
        </member>
        <member name="M:avl.LoadOcrModel(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized OcrMlpModel object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outOcrModel">Deserialized OcrMlpModel.</param>
        </member>
        <member name="M:avl.SaveOcrModel(avl.OcrModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized OcrMlpModel object as avdata file.</summary>
            <param name="inOcrModel">Model to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.OcrMlpModelToOcrModel(avl.OcrMlpModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts OcrMlpModel(old type) to OcrModel</summary>
        </member>
        <member name="M:avl.OcrSvmModelToOcrModel(avl.OcrSvmModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts OcrSvmModel(old type) to OcrModel</summary>
        </member>
        <member name="M:avl.OcrModelToOcrMlpModel(avl.OcrModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrMlpModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts OcrModel to OcrMlpModel</summary>
        </member>
        <member name="M:avl.OcrModelToOcrSvmModel(avl.OcrModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrSvmModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts OcrModel to OcrSvmModel</summary>
        </member>
        <member name="M:avl.GroupRegionsByLines(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Array&lt;atl.Array&lt;avl.Region&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerSer">
            <summary>Splits an array of blobs by distance to a computed base lines</summary>
            <param name="inRegions">Input regions (parts of characters).</param>
            <param name="inRoi">Range of character classification.</param>
            <param name="inLinesCount">ROI is divided into inLinesCount lines. Default value: 1.</param>
            <param name="inLineWidth">Value of line range used if inRemoveOutliers is set to TRUE. Default value: 1.0f.</param>
            <param name="inRemoveOutliers">If this flag is set blobs with distance greater than inLineWidth are removed. Default value: False.</param>
            <param name="outLines">Lines in single Array.</param>
            <param name="diagLines">Segments which indicates the position of lines.</param>
            <param name="diagLineRanges">Rectangles represents range of lines which are included if inRemoveOutliers is set.</param>
            <param name="diagRegionPoints">Point which indicates region position.</param>
        </member>
        <member name="M:avl.ReadText_Format(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.OcrModel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Conditional&lt;atl.String&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Ready-to-use tool for reading text from images using the OCR technique.</summary>
            <param name="inCharacters">Character regions.</param>
            <param name="inOcrModels">OCR model specific to a particular font.</param>
            <param name="inFormat">Description of entered text.</param>
            <param name="inMinScore">Minimal score of reading a character.</param>
            <param name="outText">Read text.</param>
            <param name="outCharacters">Array of characters. NIL indicates invalid read when inMinScore is set,.</param>
            <param name="outScores">Reading scores for each character.</param>
        </member>
        <member name="M:avl.ReadText(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Conditional&lt;atl.String&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Ready-to-use tool for reading text from images using the OCR technique.</summary>
            <param name="inCharacters">Character regions.</param>
            <param name="inOcrModel">OCR model specific to a particular font.</param>
            <param name="inMinScore">Minimal score of reading a character.</param>
            <param name="outText">Read text.</param>
            <param name="outCharacters">Array of characters. NIL indicates invalid read when inMinScore is set,.</param>
            <param name="outScores">Reading scores for each character.</param>
            <param name="outIsTextValid">Returns False if any ad score smaller than inMinScore.</param>
        </member>
        <member name="M:avl.ExtractText(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.TextSegmentation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDerefer">
            <summary>Ready-to-use tool for extracting and splitting character to single characters.</summary>
            <param name="inImage">An input image with text.</param>
            <param name="inRoi">Location of the text.</param>
            <param name="inRoiAlignment">Adjusts the region of interest to the position of the inspected object.</param>
            <param name="inSegmentationModel">Model used for separating text from background.</param>
            <param name="outCharacters">Split characters aligned to ROI.</param>
            <param name="diagTextRegion">Region of text after extraction.</param>
            <param name="diagAlignedCharacters">Character regions preserving original image orientation.</param>
            <param name="diagAlignedRoi">ROI rectangle after alignment.</param>
        </member>
        <member name="M:avl.SortCharacterRegions(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CharacterSortingOrder.Type,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Sorts characters regions by selected text order</summary>
        </member>
        <member name="M:avl.LoadOcrSvmModel(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrSvmModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized OcrSvmModel object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outOcrModel">Deserialized OcrSvmModel.</param>
        </member>
        <member name="M:avl.SaveOcrSvmModel(avl.OcrSvmModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized OcrSvmModel object as avdata file.</summary>
            <param name="inOcrModel">Model to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.RecognizeCharacters_SVM_Deprecated(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrSvmModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.CharacterSortingOrder.Type!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Int32&gt;,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.OcrCandidate&gt;&gt;*!System.">
            <summary>Classifies input regions into characters. Based on the Support Vector Machines model.</summary>
            <param name="inCharacterRegions">Array of character regions to recognize.</param>
            <param name="inOcrModel">Trained OcrSvmModel used to recognize characters.</param>
            <param name="inCharacterSize">Size of single monospaced character if needed. Default value: atl::NIL.</param>
            <param name="inDotPrint">Dot-printed characters preprocessing.</param>
            <param name="inCharacterSorting">Sorting order of input characters. Default value: LeftToRight.</param>
            <param name="inMinScore">Minimal value of accepted result. Otherwise char '*' will be placed. Default value: atl::NIL.</param>
            <param name="inMinSpaceWidth">Minimal distance between characters where space character will be inserted. Default value: atl::NIL.</param>
            <param name="outCharacters">Result of characters recognition.</param>
            <param name="outScores">Classification result score.</param>
            <param name="outCandidates">Array of a character classification results and their score.</param>
            <param name="diagNormalizedCharacters">Images of normalized characters used in character recognition.</param>
            <param name="diagCharactersBoxes">Bounding boxes of characters.</param>
        </member>
        <member name="M:avl.TrainOcr_SVM(atl.Array&lt;avl.CharacterSample&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,atl.Optional&lt;avl.Size!System.Ru">
            <summary>Trains an OCR support vector machines classifier.</summary>
            <param name="inCharacterSamples">Training font created from sample regions.</param>
            <param name="inNormalizationSize">The character size after normalization. Default value: (Width: 16, Height: 16).</param>
            <param name="inNu">Trade-off between training accuracy and number of supported vectors. Default value: atl::NIL.</param>
            <param name="inKernelGamma">Gamma parameter for RBF kernel. Default value: atl::NIL.</param>
            <param name="inRegularizationConstant">Preventing overfitting. Default value: 1.0f.</param>
            <param name="inStopEpsilon">Epsilon for stopping criterion. Default value: 0.001f.</param>
            <param name="inUseShrinkingHeuristics">Heuristics may speed up computations. Default value: True.</param>
            <param name="inCharacterSize">Size of fixed width font. Default value: atl::NIL.</param>
            <param name="inRandomSeed">Random seed used to train classifier. Default value: atl::NIL.</param>
            <param name="inCharacterFeatures">Character features used to identify characters. Default value: (Pixels: True).</param>
            <param name="outOcrModel">Trained OcrSvmModel used to recognize characters.</param>
            <param name="outTrainingAccuracy">The overall training score.</param>
            <param name="diagNormalizedCharacters">Images of normalized characters used to train classifier.</param>
        </member>
        <member name="M:avl.TrainOcr_SVM_Deprecated(avl.OcrSvmModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.CharacterSample&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.OcrSvmModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Trains an OCR support vector machines classifier.</summary>
            <param name="inOcrModel">Initialized OcrSvmModel to train.</param>
            <param name="inCharacterSamples">Training font created from sample regions.</param>
            <param name="inCharacterSize">Size of fixed width font. Default value: atl::NIL.</param>
            <param name="outOcrModel">Trained OcrSvmModel used to recognize characters.</param>
            <param name="diagTrainingAccuracy">The overall training score.</param>
            <param name="diagNormalizedCharacters">Images of normalized characters used to train classifier.</param>
        </member>
        <member name="M:avl.InitOcr_SVM_Deprecated(atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;,avl.CharacterFeatures!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl">
            <summary>Creates an OCR model based on support vector machines classifier.</summary>
            <param name="inNu">Trade-off between training accuracy and number of supported vectors. Default value: atl::NIL.</param>
            <param name="inKernelGamma">Gamma parameter for RBF kernel. Default value: 0.01f.</param>
            <param name="inRegularizationConstant">Preventing overfitting. Default value: 1.0f.</param>
            <param name="inStopEpsilon">Epsilon for stopping criterion. Default value: 0.001f.</param>
            <param name="inUseShrinkingHeuristics">Heuristics may speed up computations. Default value: True.</param>
            <param name="inNormalizationSize">The character size after normalization. Default value: (Width: 16, Height: 16).</param>
            <param name="inRandomSeed">Random seed used to train classifier. Default value: atl::NIL.</param>
            <param name="inCharacterFeatures">Character features used to identify characters. Default value: (Pixels: True).</param>
            <param name="outOcrModel">Result OcrSvmModel used to recognize characters.</param>
        </member>
        <member name="M:avl.SplitRegionIntoExactlyNCharacters(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Region&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits the input region into a fixed-size array of regions corresponding to individual characters.</summary>
            <param name="inRegion">Region which contains characters.</param>
            <param name="inCharacterCount">Character count in provided region.</param>
            <param name="inCharacterSpacing">Spacing size between characters.</param>
            <param name="inProjectionSmooth">Projection smoothing value used to remove noises from character region. Default value: 1.0f.</param>
            <param name="outRegions">Output array of regions containing separated characters.</param>
            <param name="diagClasses">Regions that contain location of split characters.</param>
            <param name="diagProjection">Profile of region projection used to distinguish characters.</param>
        </member>
        <member name="M:avl.SplitRegionIntoMultipleCharacters(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits the input region into an array of regions corresponding to individual characters.</summary>
            <param name="inRegion">Input region containing characters.</param>
            <param name="inProjectionSmooth">Value of smooth applied to region projection before splitting into separated characters. Default value: 1.0f.</param>
            <param name="inCharacterWidth">Single character width. Default value: 15.</param>
            <param name="outRegions">Array or regions containing single characters.</param>
            <param name="diagClasses">Regions in which characters parts will be connected into a single character region.</param>
            <param name="diagProjection">Profile of region projection used to distinguish characters.</param>
        </member>
        <member name="M:avl.RecognizeCharacters(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.CharacterSortingOrder.Type!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Int32&gt;,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.OcrCandidate&gt;&gt;*!System.Runtime.CompilerSe">
            <summary>Classifies input regions into characters. Based on the Multi-Layer Perceptron model.</summary>
            <param name="inCharacterRegions">Array of character regions to recognize.</param>
            <param name="inOcrModel">Trained OcrMlpModel used to recognize characters.</param>
            <param name="inCharacterSize">Size of single monospaced character if needed. Default value: atl::NIL.</param>
            <param name="inDotPrint">Dot-printed characters preprocessing.</param>
            <param name="inCharacterSorting">Sorting order of input characters. Default value: LeftToRight.</param>
            <param name="inMinScore">Minimal value of accepted result. Otherwise char '*' will be placed. Default value: atl::NIL.</param>
            <param name="inMinSpaceWidth">Minimal distance between characters where space character will be inserted. Default value: atl::NIL.</param>
            <param name="outCharacters">Result of characters recognition.</param>
            <param name="outScores">Classification result score.</param>
            <param name="outCandidates">Array of a character classification results and their score.</param>
            <param name="diagNormalizedCharacters">Images of normalized characters used in character recognition.</param>
            <param name="diagCharactersBoxes">Bounding boxes of characters.</param>
        </member>
        <member name="M:avl.RecognizeCharacters_MLP_Deprecated(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrMlpModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean!System.Runtime.CompilerServices.IsConst,avl.CharacterSortingOrder.Type!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Int32&gt;,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.OcrCandidate&gt;&gt;*!System.">
            <summary>Classifies input regions into characters. Based on the Multi-Layer Perceptron model.</summary>
            <param name="inCharacterRegions">Array of character regions to recognize.</param>
            <param name="inOcrModel">Trained OcrMlpModel used to recognize characters.</param>
            <param name="inCharacterSize">Size of single monospaced character if needed. Default value: atl::NIL.</param>
            <param name="inDotPrint">Dot-printed characters preprocessing.</param>
            <param name="inCharacterSorting">Sorting order of input characters. Default value: LeftToRight.</param>
            <param name="inMinScore">Minimal value of accepted result. Otherwise char '*' will be placed. Default value: atl::NIL.</param>
            <param name="inMinSpaceWidth">Minimal distance between characters where space character will be inserted. Default value: atl::NIL.</param>
            <param name="outCharacters">Result of characters recognition.</param>
            <param name="outScores">Classification result score.</param>
            <param name="outCandidates">Array of a character classification results and their score.</param>
            <param name="diagNormalizedCharacters">Images of normalized characters used in character recognition.</param>
            <param name="diagCharactersBoxes">Bounding boxes of characters.</param>
        </member>
        <member name="M:avl.LoadOcrMlpModel(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrMlpModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads serialized OcrMlpModel object from avdata file.</summary>
            <param name="inFilename">Name of the source file.</param>
            <param name="outOcrModel">Deserialized OcrMlpModel.</param>
        </member>
        <member name="M:avl.SaveOcrMlpModel(avl.OcrMlpModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Saves serialized OcrMlpModel object as avdata file.</summary>
            <param name="inOcrModel">Model to be serialized.</param>
            <param name="inFilename">Name of the target file.</param>
        </member>
        <member name="M:avl.TrainOcr_MLP(atl.Array&lt;avl.CharacterSample&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,avl.CharacterFeatures!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Int32,atl.Optional&lt;avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.OcrModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Syst">
            <summary>Trains an OCR multilayer perceptron classifier.</summary>
            <param name="inCharacterSamples">Training font created from sample regions.</param>
            <param name="inNormalizationSize">The character size after normalization. Default value: (Width: 16, Height: 16).</param>
            <param name="inHiddenLayerSizes">Internal structure of neuron layers used in classifier. Default value: atl::NIL.</param>
            <param name="inRandomSeed">Random seed used by MLP classifier. Default value: atl::NIL.</param>
            <param name="inCharacterFeatures">Character features used to distinguish characters from each other. Default value: (Pixels: True).</param>
            <param name="inLearningRate">Suppression level of changes during learning process. Default value: 0.6f.</param>
            <param name="inMomentum">Value of classifier learning momentum. Default value: 0.75f.</param>
            <param name="inIterationCount">Learning iteration count. Default value: 100.</param>
            <param name="inCharacterSize">Size of fixed width font. Default value: atl::NIL.</param>
            <param name="outOcrModel">Trained OcrMlpModel used to recognize characters.</param>
            <param name="outTrainingAccuracy">The overall training score.</param>
            <param name="diagError">Changes of mean error level progress during learning process.</param>
            <param name="diagNormalizedCharacters">Images of normalized characters used to train classifier.</param>
        </member>
        <member name="M:avl.TrainOcr_MLP_Deprecated(avl.OcrMlpModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.CharacterSample&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Int32,atl.Optional&lt;avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.OcrMlpModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Trains an OCR multilayer perceptron classifier.</summary>
            <param name="inOcrModel">Initialized OcrMlpModel to train.</param>
            <param name="inCharacterSamples">Training font created from sample regions.</param>
            <param name="inLearningRate">Suppression level of changes during learning process. Default value: 0.6f.</param>
            <param name="inMomentum">Value of classifier learning momentum. Default value: 0.75f.</param>
            <param name="inIterationCount">Learning iteration count. Default value: 100.</param>
            <param name="inCharacterSize">Size of fixed width font. Default value: atl::NIL.</param>
            <param name="outOcrModel">Trained OcrMlpModel used to recognize characters.</param>
            <param name="diagError">Changes of mean error level progress during learning process.</param>
            <param name="diagTrainingAccuracy">The overall training score.</param>
            <param name="diagNormalizedCharacters">Images of normalized characters used to train classifier.</param>
        </member>
        <member name="M:avl.InitOcr_MLP_Deprecated(avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,avl.MlpPreprocessing.Type,avl.CharacterFeatures!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.OcrMlpModel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates an OCR multilayer perceptron model.</summary>
            <param name="inNormalizationSize">The character size after normalization. Default value: (Width: 16, Height: 16).</param>
            <param name="inHiddenLayerSizes">Internal structure of neuron layers used in classifier. Default value: atl::NIL.</param>
            <param name="inRandomSeed">Random seed used by MLP classifier. Default value: atl::NIL.</param>
            <param name="inPreprocessing">Input preprocessing method performed before calculations.</param>
            <param name="inCharacterFeatures">Character features used to distinguish characters from each other. Default value: (Pixels: True).</param>
            <param name="outOcrModel">Result OcrMlpModel used to recognize characters.</param>
        </member>
        <member name="M:avl.MakeCharacterSamples(atl.Array&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.CharacterSample&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates training font samples from the provided regions.</summary>
            <param name="inCharacterRegions">Array of character regions.</param>
            <param name="inCharacters">Character that should be assigned to corresponding regions.</param>
            <param name="outCharacterSamples">Array of CharacterSamples.</param>
        </member>
        <member name="M:avl.AccessCharacterSample(avl.CharacterSample!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Provides access to internal data of the CharacterSample structure.</summary>
            <param name="inSample">The character sample from which data will be accessed.</param>
            <param name="outCharacter">Character textual representation.</param>
            <param name="outCharacterRegion">Character graphical representation.</param>
        </member>
        <member name="M:avl.AccessOcrCandidate(avl.OcrCandidate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns fields of OcrCandidate structure.</summary>
            <param name="inCandidate">Input OcrCandidate structure.</param>
            <param name="outCharacter">Result of character recognition.</param>
            <param name="outScore">Score of recognized character.</param>
        </member>
        <member name="M:avl.SegmentImage_Color(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Pixel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Boolean,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Segments an image basing on distance to model colors.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inReferenceColors">Colors to compare pixels to.</param>
            <param name="inMaxDifference">Maximal difference between pixel and reference color to be accepted. Default value: 5.0f.</param>
            <param name="inDifferenceMultipliers">Scales for maximum differences for each color. Default value: atl::NIL.</param>
            <param name="inChromaAmount">Proportion of chromatic information in distance computation. Default value: 0.7f.</param>
            <param name="inForceDisjointRegions">Force output regions to be disjoint.</param>
            <param name="outRegions">Regions of pixels closest to colors.</param>
        </member>
        <member name="M:avl.ImageWatersheds(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes dark basins which are separated by at least inThreshold height watershed.</summary>
            <param name="inImage">Input image.</param>
            <param name="inThreshold">Input minimum separating watershed height. Default value: 10.</param>
            <param name="outBasins">Output dark basins found.</param>
        </member>
        <member name="M:avl.SegmentImage_Edges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single,System.Single,System.Single,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,System.Boolean,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Region*!System.Runtime.CompilerServices.Is">
            <summary>Segments an image into blobs using image edges as their borders.</summary>
            <param name="inImage">Image from which blobs are extracted.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inFrameSize">How many pixels from the region border are excluded from the results. Default value: 1.</param>
            <param name="inStdDev">Amount of smoothing used by the edge filter. Default value: 2.0f.</param>
            <param name="inEdgeThreshold">Sufficient edge strength; edges of that strength will always be detected. Default value: 15.0f.</param>
            <param name="inEdgeHysteresis">Value by which the edge threshold is decreased for edge points neighboring with sufficiently strong edges. Default value: 5.0f.</param>
            <param name="inMaxJoiningDistance">Maximal distance between edges that can be joined. Default value: 0.0f.</param>
            <param name="inMinArea">Minimal area of a detected blob. Default value: 50.</param>
            <param name="inMaxArea">Maximal area of a detected blob. Default value: atl::NIL.</param>
            <param name="inComputeNestingLevels">Flag indicating whether nesting levels should be computed.</param>
            <param name="inEdgeClosing">Radius of enclosing small holes in the detected blobs. Default value: 1.</param>
            <param name="outBlobs">Blobs extracted from the input image.</param>
            <param name="outNestingLevels">Nesting level of each extracted blob.</param>
            <param name="diagEdgeRegion">Region of the found edges.</param>
        </member>
        <member name="M:avl.SegmentImage_Gray(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single!System.Runtime.CompilerServices.IsConst,avl.BlobsDifferenceMeasure.Type!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Segments an image into blobs examining differences between neighbouring pixels values.</summary>
            <param name="inImage">Image from which blobs are extracted.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inMaxDifference">Maximal difference between two neighbouring blobs to be merged. Default value: 5.0f.</param>
            <param name="inDifferenceMeasure">Measure of blobs difference. Default value: Neighbour.</param>
            <param name="inMinArea">Minimal area of a blob. Default value: 50.</param>
            <param name="inMaxArea">Maximal area of a blob. Default value: atl::NIL.</param>
            <param name="outBlobs">Blobs extracted from the input image.</param>
        </member>
        <member name="M:avl.DaPImageAverage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average direction within the region of interest.</summary>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.DaPImageMedian(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the average direction within the region of interest.</summary>
            <param name="inDaPImage">A result of GradientDirAndPresenceImage filter.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.SegmentImage_Histogram(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Segments an image into blobs examining histograms of gray values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inMaxDifference">Default value: 5.</param>
            <param name="inTonalDrift">Default value: True.</param>
            <param name="inMinArea">Default value: 20.</param>
        </member>
        <member name="M:avl.SegmentImage_Gray_Tiled(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.BlobMergingMethod.Type,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Segments an image into blobs examining differences between pixels values, first pass is tiled.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inMergingMethod">Defines a criterion by which two pixels can be merged into one blob. Default value: Neighbor.</param>
            <param name="inMaxDifference">Maximal tonal difference that allows two pixels to be merged into one blob. Default value: 5.</param>
            <param name="inHysteresis">Change of MaxDifference between first and second iteration.</param>
            <param name="inTonalDrift">When 'True' blobs can be merged even if the illumination is not even. Default value: True.</param>
            <param name="inDirectional">When 'True' the filter can segment results of GradientDirAndPresenceImage.</param>
            <param name="inMinArea">Minimal area of a blob that may be accepted. Default value: 20.</param>
            <param name="inMaxArea">Minimal area of a blob that may be accepted. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.SegmentImage_Gray_Linear(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.BlobMergingMethod.Type,avl.RegionConnectivity.Type,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Segments an image into blobs examining differences between pixels values.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inMergingMethod">Defines a criterion by which two pixels can be merged into one blob. Default value: Neighbor.</param>
            <param name="inConnectivity">Defines if pixels can be merged only horizontally and vertically, or also diagonally.</param>
            <param name="inMaxDifference">Maximal tonal difference that allows two pixels to be merged into one blob. Default value: 5.</param>
            <param name="inHysteresis">Change of MaxDifference after each pass.</param>
            <param name="inPassCount">Number of iterations in which the entire image is scanned for pixels that can be merged.</param>
            <param name="inDirectional">When 'True' the filter can segment results of GradientDirAndPresenceImage.</param>
            <param name="inMinArea">Minimal area of a blob that may be accepted. Default value: 20.</param>
            <param name="inMaxArea">Minimal area of a blob that may be accepted. Default value: atl::NIL.</param>
        </member>
        <member name="M:avl.SplitRegionIntoBlobs_Carbon(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionConnectivity.Type,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inRegion">Input region.</param>
            <param name="inMinArea">Default value: 20.</param>
        </member>
        <member name="M:avl.ExtractBlobs_DoG(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,System.Single,avl.IntensityThresholdParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionProcessingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BlobSplittingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!S">
            <summary>Segments an image into blobs by thresholding Difference of Gaussians.</summary>
            <param name="inImage">Image from which blobs are extracted.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inStdDev">Smoothing standard deviation for the smaller Gaussian kernel. Default value: 3.0f.</param>
            <param name="inStdDevRatio">Defines how many times larger is the second Gaussian kernel. Default value: 1.6f.</param>
            <param name="inKernelRelativeSize">A multiple of the standard deviation determining the size of the Gaussian kernel. Default value: 3.0f.</param>
            <param name="inThresholdParams">Parameters for thresholding an image.</param>
            <param name="inRegionProcessingParams">Parameters for opening and closing of a region.</param>
            <param name="inBlobSplittingParams">Parameters for splitting region into blobs.</param>
            <param name="outBlobs">Blobs extracted from the input image.</param>
            <param name="diagBlobAreas">Areas of extracted blobs.</param>
            <param name="diagBaseRegion">Region of pixels right after thresholding.</param>
        </member>
        <member name="M:avl.ExtractBlobs_Color(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.ColorThresholdParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionProcessingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BlobSplittingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyD">
            <summary>Segments an image into blobs by color-based thresholding.</summary>
            <param name="inImage">Image from which blobs are extracted.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inThresholdParams">Parameters for color-based thresholding.</param>
            <param name="inRegionProcessingParams">Parameters for opening and closing of a region.</param>
            <param name="inBlobSplittingParams">Parameters for splitting region into blobs.</param>
            <param name="outBlobs">Blobs extracted from the input image.</param>
            <param name="diagBlobAreas">Areas of extracted blobs.</param>
            <param name="diagBaseRegion">Region of pixels right after thresholding.</param>
        </member>
        <member name="M:avl.ExtractBlobs_Dynamic(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.DynamicThresholdParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionProcessingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BlobSplittingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplici">
            <summary>Segments an image into blobs by dynamic thresholding.</summary>
            <param name="inImage">Image from which blobs are extracted.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inThresholdParams">Parameters for dynamic thresholding.</param>
            <param name="inRegionProcessingParams">Parameters for opening and closing of a region.</param>
            <param name="inBlobSplittingParams">Parameters for splitting region into blobs.</param>
            <param name="outBlobs">Blobs extracted from the input image.</param>
            <param name="diagBlobAreas">Areas of extracted blobs.</param>
            <param name="diagBaseRegion">Region of pixels right after thresholding.</param>
        </member>
        <member name="M:avl.ExtractBlobs_Intensity(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.IntensityThresholdParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RegionProcessingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BlobSplittingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Region&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImp">
            <summary>Segments an image into blobs by thresholding.</summary>
            <param name="inImage">Image from which blobs are extracted.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inThresholdParams">Parameters for thresholding an image.</param>
            <param name="inRegionProcessingParams">Parameters for opening and closing of a region.</param>
            <param name="inBlobSplittingParams">Parameters for splitting region into blobs.</param>
            <param name="outBlobs">Blobs extracted from the input image.</param>
            <param name="diagBlobAreas">Areas of extracted blobs.</param>
            <param name="diagBaseRegion">Region of pixels right after thresholding.</param>
        </member>
        <member name="M:avs.AvsFilter_MeasureObjectWidth(avl.ScanMapArrayState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentScanField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MeasureObjectMethod.Type,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!Syst">
            <summary>Measures the width of an object using stripe detection.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanField">Field in which measurement scans are performed.</param>
            <param name="inScanFieldAlignment">Adjusts the scan field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">Number of scans to be performed. Default value: 5.</param>
            <param name="inScanWidth">Width of each single scan. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the object stripe extraction process. Default value: StripeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Dark MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inMeasureMethod">Method used to measure the object.</param>
            <param name="inStripeSelection">Selection mode of edges of the object.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="inOutlierCount">Determines how many points are not count when object width is measured.</param>
            <param name="outObjectWidth">Width of the object.</param>
            <param name="outSegment1">First edge of the object.</param>
            <param name="outSegment2">Second edge of the object.</param>
            <param name="outAlignedScanField">Field in which the scans are performed.</param>
            <param name="diagScanSegments">Segments along which the scans are performed.</param>
            <param name="diagPoints1">Detected edge points on the first side.</param>
            <param name="diagPoints2">Detected edge points on the second side.</param>
        </member>
        <member name="M:avl.CompareGoldenTemplate2_Intensity(avl.GoldenTemplate2Model_Intensity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Compares an image with a template image considered to have no defects.</summary>
            <param name="inImage">Input image.</param>
            <param name="inSensitivityA">Usually influences small, distinctive defects. Default value: 1.0f.</param>
            <param name="inSensitivityB">Usually influences bigger, extensive defects. Default value: 0.95f.</param>
            <param name="inIdentityFeature">Default value: True.</param>
            <param name="inSmoothedFeatures">Default value: True.</param>
            <param name="inGradientFeatures">Default value: True.</param>
            <param name="inDogFeatures">Default value: True.</param>
            <param name="inStddevFeatures">Default value: True.</param>
            <param name="diagProcessedInput">Array of images of features.</param>
            <param name="diagDarkDefects">For each feature, defects detected - below lower threshold.</param>
            <param name="diagBrightDefects">For each feature, defects detected - above higher threshold.</param>
        </member>
        <member name="M:avl.CreateGoldenTemplate2_Intensity(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,avl.GoldenTemplate2Model_Intensity*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Create a model to be used with CompareGoldenTemplate2_Intensity filter</summary>
            <param name="inMaxDisplacement">Error in object positioning. If in doubt, it is better to set this value too high. If set too low, subtle defects won't be detected, or no defects may not be detected at all. High values may impair detection of small defects, especially near edges. Default value: 2.</param>
            <param name="inDeviationMultiplier">Default value: 1.2f.</param>
            <param name="inIdentityFeature">Default value: True.</param>
            <param name="inSmoothedFeatures">Default value: True.</param>
            <param name="inGradientFeatures">Default value: True.</param>
            <param name="inDogFeatures">Default value: True.</param>
            <param name="inStddevFeatures">Default value: True.</param>
        </member>
        <member name="M:avl.InspectModelGoldenTemplate2_Intensity(avl.GoldenTemplate2Model_Intensity!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitl">
            <summary>Extract GT2 model fields</summary>
        </member>
        <member name="M:avl.DetectLinePeak_Gauss(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;atl.Conditional&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds line peaks on an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inStdDev">Standard deviation of the gaussian kernel. Default value: 4.0f.</param>
            <param name="inKernelRelativeSize">A multiple of the standard deviation determining the size of the kernel. Default value: 2.0f.</param>
            <param name="inThreshold">Minimal value of a bright pixel. Default value: 128.0f.</param>
            <param name="outLinePeakPoints">Line peak positions.</param>
            <param name="diagLinePeakProfile">Profile of line peak positions.</param>
        </member>
        <member name="M:avl.DetectLinePeak(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.LinePeakDetectionMethod.Type,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;atl.Conditional&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds line peaks on an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inDetectionMethod">Method used to determine exact line peak position. Default value: MaximalPixel.</param>
            <param name="inThreshold">Minimal value of a bright pixel. Default value: 128.0f.</param>
            <param name="outLinePeakPoints">Line peak positions.</param>
            <param name="diagLinePeakProfile">Profile of line peak positions.</param>
        </member>
        <member name="M:avl.MeasureObjectWidth(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.ScanMap&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.MeasureObjectMethod.Type,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.MEstimator.Type&gt;,System.Int32,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced">
            <summary>Measures the width of an object using stripe detection.</summary>
            <param name="inImage">Input image.</param>
            <param name="inMeasurementMap">Input measurement map.</param>
            <param name="inStripeScanParams">Parameters controlling the object stripe extraction process.</param>
            <param name="inMeasureMethod">Method used to measure the object.</param>
            <param name="inStripeSelection">Selection mode of edges of the object. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inOutlierSuppression">Selects a method for ignoring incorrectly detected points. Default value: atl::NIL.</param>
            <param name="inOutlierCount">Determines how many outlying points are rejected before the width is measured.</param>
            <param name="outObjectWidth">Width of the object.</param>
            <param name="outSegment1">First edge of the object.</param>
            <param name="outSegment2">Second edge of the object.</param>
            <param name="diagPoints1">Detected edge points on the first side.</param>
            <param name="diagPoints2">Detected edge points on the second side.</param>
        </member>
        <member name="M:avl.CreateMeasurementMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SegmentScanField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,System.Int32,avl.InterpolationMethod.Type,atl.Array&lt;avl.ScanMap&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.SegmentScanField*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>(Pre)computes image sampling locations used by MeasureObjectWidth function.</summary>
            <param name="inImageFormat">Information about dimensions, depth and pixel type of the scan image.</param>
            <param name="inScanField">Field in which scans will be performed.</param>
            <param name="inScanFieldAlignment">Adjusts the scan field to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanCount">Number of scans to be performed. Default value: 5.</param>
            <param name="inScanWidth">Width of the scan area. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="outAlignedScanField">Field in which the scans will be performed.</param>
            <param name="diagScanSegments">Array of scan segments.</param>
        </member>
        <member name="M:avl.AvsFilter_CompareGoldenTemplate_Edges_Deprecated(avl.CompareGoldenTemplate_EdgesState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsI">
            <summary>Compares image edges with the edges of a perfect template. Significant differences are considered defects.</summary>
            <param name="inImage">Input image.</param>
            <param name="inGoldenImage">Reference image containing no defects.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inStaticModel">Flag indicating whether the model should be created only in the first iteration. Default value: True.</param>
            <param name="inStdDevX">Amount of horizontal smoothing used by the edge filter. Default value: 2.0f.</param>
            <param name="inStdDevY">Amount of vertical smoothing used by the edge filter (Auto = inStdDevX). Default value: atl::NIL.</param>
            <param name="inEdgeThreshold">Sufficient edge strength; edges of that strength will always be detected. Default value: 35.0f.</param>
            <param name="inEdgeHysteresis">Value by which the edge threshold is decreased for edge points neighboring with sufficiently strong edges. Default value: 15.0f.</param>
            <param name="inMaxDistance">Maximal allowed distance between corresponding edges on the input and golden image. Default value: 2.</param>
            <param name="outDefects">Region of detected defects.</param>
            <param name="outDefectsPresent">Flag indicating whether any defects were detected.</param>
            <param name="outMissingEdges">Edges present on the golden image that are missing on the input image.</param>
            <param name="outExcessiveEdges">Edges that are not present on the golden image.</param>
            <param name="outImageEdges">Edges on the input image.</param>
            <param name="outGoldenEdges">Edges on the golden image.</param>
            <param name="outMatchingEdges">Golden edges present on the input image.</param>
        </member>
        <member name="M:avl.CompareGoldenTemplate_Edges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeGoldenTemplate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region*!Syste">
            <summary>Compares image edges with the edges of a perfect template. Significant differences are considered defects.</summary>
            <param name="inImage">Input image.</param>
            <param name="inGoldenTemplate">Golden edge template containing image with no defects.</param>
            <param name="inGoldenTemplateAlignment">Adjusts the golden template to the position of the inspected object.</param>
            <param name="inStdDevX">Amount of horizontal smoothing used by the edge filter. Default value: 2.0f.</param>
            <param name="inStdDevY">Amount of vertical smoothing used by the edge filter (Auto = inStdDevX). Default value: atl::NIL.</param>
            <param name="inEdgeThreshold">Sufficient edge strength; edges of that strength will always be detected on the input image. Default value: 35.0f.</param>
            <param name="inEdgeHysteresis">Value by which the edge threshold is decreased for edge points neighboring with sufficiently strong edges. Default value: 15.0f.</param>
            <param name="inMaxDistance">Maximal allowed distance between corresponding edges on the input and golden image. Default value: 3.</param>
            <param name="outDefects">Region of detected defects.</param>
            <param name="outDefectsPresent">Flag indicating whether any defects were detected.</param>
            <param name="outMissingEdges">Edges present on the golden image that are missing on the input image.</param>
            <param name="outExcessiveEdges">Edges that are not present on the golden image.</param>
            <param name="outImageEdges">Edges on the input image.</param>
            <param name="outGoldenEdges">Edges on the golden image.</param>
            <param name="outMatchingEdges">Golden edges present on the input image.</param>
            <param name="outObjectPosition">Position of the object being compared.</param>
        </member>
        <member name="M:avl.CreateGoldenTemplate_Edges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,avl.EdgeGoldenTemplate*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.C">
            <summary>Creates golden template for application in CompareGoldenTemplate_Edges filter.</summary>
            <param name="inTemplateImage">Template image containing an object with no defects.</param>
            <param name="inTemplateArea">Desired area to compare. Default value: atl::NIL.</param>
            <param name="inMask">Range of pixels to compare. Default value: atl::NIL.</param>
            <param name="inTemplateAreaAlignment">Alignment of template bounded by inTemplateArea. Default value: atl::NIL.</param>
            <param name="inStdDevX">Amount of horizontal smoothing used by the edge filter. Default value: 2.0f.</param>
            <param name="inStdDevY">Amount of vertical smoothing used by the edge filter (Auto = inStdDevX). Default value: atl::NIL.</param>
            <param name="inEdgeThreshold">Sufficient edge strength; edges of that strength will always be detected on the template image. Default value: 35.0f.</param>
            <param name="inEdgeHysteresis">Value by which the edge threshold is decreased for edge points neighboring with sufficiently strong edges. Default value: 15.0f.</param>
            <param name="outGoldenTemplate">The output golden template structure.</param>
            <param name="diagCroppedImage">Cropped image to be analyzed.</param>
            <param name="diagCroppedEdges">Edges found on the cropped image.</param>
            <param name="diagEdges">Edges projected onto the input image.</param>
        </member>
        <member name="M:avl.AvsFilter_CompareGoldenTemplate_Intensity_Deprecated(avl.CompareGoldenTemplate_IntensityState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Int32,System.Boolean,System.Single,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced">
            <summary>Compares an image with a template image considered to have no defects.</summary>
            <param name="inImage">Input image.</param>
            <param name="inGoldenImage">Reference image containing no defects.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inEdgeThreshold">Minimum strength of edges on the golden image near which comparison is NOT performed. Default value: 10.0f.</param>
            <param name="inEdgeDilation">Defines for how far from the detected edges comparison is NOT performed. Default value: 1.</param>
            <param name="inStaticModel">Flag indicating whether model should be created only in the first iteration. Default value: True.</param>
            <param name="inMaxDifference">Maximal allowed difference between corresponding pixels of the input and golden images. Default value: 20.0f.</param>
            <param name="inMinDefectRadius">Minimal radius of a defect. Default value: 1.</param>
            <param name="outDefects">Region of detected defects.</param>
            <param name="outDifferenceRegion">Region of pixels differing too much between the golden image and the input image.</param>
            <param name="outDefectsPresent">Flag indicating whether any defects were detected.</param>
            <param name="outEdgeRegion">Region of pixels that will not be compared.</param>
        </member>
        <member name="M:avl.CompareGoldenTemplate_Intensity(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.GrayGoldenTemplate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Int32,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImp">
            <summary>Compares an image with a template image considered to have no defects.</summary>
            <param name="inImage">Input image.</param>
            <param name="inGoldenTemplate">Golden gray template containing image of an object with no defects.</param>
            <param name="inGoldenTemplateAlignment">Adjusts the golden template to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inMaxDifference">Maximal allowed difference between corresponding pixels of the input and golden images. Default value: 20.0f.</param>
            <param name="inMinDefectRadius">Minimal radius of a defect. Default value: 1.</param>
            <param name="outDefects">Region of detected defects.</param>
            <param name="outDifferenceRegion">Region of pixels differing too much between the golden image and the input image.</param>
            <param name="outDefectsPresent">Flag indicating whether any defects were detected.</param>
            <param name="outEdgeRegion">Region of pixels that will not be compared.</param>
            <param name="outObjectPosition">Position of the object being compared.</param>
        </member>
        <member name="M:avl.CreateGoldenTemplate_Intensity(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.GrayGoldenTemplate*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitly">
            <summary>Creates golden template for application in CompareGoldenTemplate_Intensity filter.</summary>
            <param name="inTemplateImage">Template image containing an object with no defects.</param>
            <param name="inTemplateArea">Desired area to compare. Default value: atl::NIL.</param>
            <param name="inMask">Range of pixels to compare. Default value: atl::NIL.</param>
            <param name="inTemplateAreaAlignment">Alignment of template bounded by inTemplateArea. Default value: atl::NIL.</param>
            <param name="inEdgeThreshold">Minimum strength of edges on the golden image near which comparison is NOT performed. Default value: 10.0f.</param>
            <param name="inEdgeDilation">Defines for how far from the detected edges comparison is NOT performed. Default value: 1.</param>
            <param name="outGoldenTemplate">The output golden template structure.</param>
            <param name="diagCroppedImage">Cropped image to be analyzed.</param>
            <param name="diagCroppedEdgeRegion">Region of pixels that will not be compared.</param>
            <param name="diagEdgeRegion">Edges projected onto the input image.</param>
        </member>
        <member name="M:avl.CheckPresence_EdgeAmount(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ShapeRegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.GradientMaskOperator.Type,avl.MagnitudeMeasure.Type,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32,System.Single,System.Single,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferen">
            <summary>Verifies object presence by analysing the amount of edges in the specified region.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Location at which object presence is being checked.</param>
            <param name="inRoiAlignment">Adjusts the region of interest to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inEdgeOperator">Selected gradient operator.</param>
            <param name="inEdgeMeasure">Selected method of gradient magnitude computation. Default value: Sum.</param>
            <param name="inEdgeScale">Scales the resulting gradient magnitudes. Default value: 1.</param>
            <param name="inMinStrength">Lowest acceptable edge magnitude. Default value: 15.</param>
            <param name="inMinAmount">Lowest acceptable fraction of pixels meeting the criteria. Default value: 0.2f.</param>
            <param name="inMaxAmount">Highest acceptable fraction of pixels meeting the criteria. Default value: 1.0f.</param>
            <param name="outIsPresent">Flag indicating whether the object is present or not.</param>
            <param name="outAmount">Fraction of pixels from meeting the criteria.</param>
            <param name="outForeground">Region of pixels meeting the criteria.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
        </member>
        <member name="M:avl.CheckPresence_PixelAmount(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ShapeRegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.HSxColorModel.Type,System.Int32,System.Int32,System.Int32,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Region*!System.Runtime.CompilerServic">
            <summary>Verifies object presence by analysing the amount of pixels that meet the specified criteria.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Location at which object presence is being checked.</param>
            <param name="inRoiAlignment">Adjusts the region of interest to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inColorModel">Selected color model.</param>
            <param name="inBeginHue">Begin of the range of acceptable hue. Default value: 0.</param>
            <param name="inEndHue">End of the range of acceptable hue. Default value: 255.</param>
            <param name="inMinSaturation">Lowest acceptable saturation. Default value: 128.</param>
            <param name="inMaxSaturation">Highest acceptable saturation. Default value: atl::NIL.</param>
            <param name="inMinBrightness">Lowest acceptable brightness. Default value: 128.0f.</param>
            <param name="inMaxBrightness">Highest acceptable brightness. Default value: atl::NIL.</param>
            <param name="inMinAmount">Lowest acceptable fraction of pixels meeting the criteria. Default value: 0.5f.</param>
            <param name="inMaxAmount">Highest acceptable fraction of pixels meeting the criteria. Default value: 1.0f.</param>
            <param name="outIsPresent">Flag indicating whether the object is present or not.</param>
            <param name="outAmount">Fraction of pixels meeting the criteria.</param>
            <param name="outForeground">Region of pixels meeting the criteria.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
            <param name="diagHsxImage">Image represented in chosen color model.</param>
        </member>
        <member name="M:avl.CheckPresence_Intensity(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ShapeRegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,System.Single,atl.Optional&lt;System.Single&gt;,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.ShapeRegion*!System.Runtime">
            <summary>Verifies object presence by analysing pixel intensities in the specified region.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Location at which object presence is being checked.</param>
            <param name="inRoiAlignment">Adjusts the region of interest to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inMinIntensity">Lowest acceptable value for the average pixel value. Default value: atl::NIL.</param>
            <param name="inMaxIntensity">Highest acceptable value for the average pixel value. Default value: atl::NIL.</param>
            <param name="inMinContrast">Lowest acceptable value for the standard deviation of the pixel values.</param>
            <param name="inMaxContrast">Highest acceptable value for the standard deviation of the pixel values. Default value: atl::NIL.</param>
            <param name="outIsPresent">Flag indicating whether the object is present or not.</param>
            <param name="outIntensity">Average pixel value.</param>
            <param name="outContrast">Standard deviation of the pixel values.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
        </member>
        <member name="M:avl.DetectCorners_CornerResponse(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.CornerResponseMethod.Type!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Detects corners using corner response method.</summary>
            <param name="inMonoImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inCornerResponseMethod">Method for computing corner response.</param>
            <param name="inKernelSize">Method kernel size. Default value: 3.</param>
            <param name="inThreshold">Threshold for corner response value, between 0 and 255, default value is taken from SelectThresholdValue on outCornerResponseImage and entropy method. Default value: 50.0f.</param>
            <param name="outCorners">Found corner points.</param>
        </member>
        <member name="M:avl.DetectCorners_Foerstner(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Detects corners using the Foerstner algorithm.</summary>
            <param name="inMonoImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inCornerQuality">Threshold on regularity of the corner. Default value: 0.8f.</param>
            <param name="inStrengthThreshold">Threshold on contrast of gradients forming the corner. Default value: 50.0f.</param>
            <param name="inLocalness">How big-scaled the corners should be. Default value: 3.</param>
            <param name="outPoints">Found corner points.</param>
            <param name="diagRoundnessImage">Calculated roundness for each input pixel.</param>
            <param name="diagStrengthImage">Calculated strength for each pixel.</param>
        </member>
        <member name="M:avl.DetectPaths(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds paths in an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Input region of interest. Default value: atl::NIL.</param>
            <param name="inPath">Input path.</param>
            <param name="inMinScore">Minimum matching score. Default value: 20.0f.</param>
            <param name="inEdgeThreshold">Minimum accepted edge magnitude. Default value: 10.0f.</param>
            <param name="outPaths">Output paths.</param>
            <param name="outScores">Output scores.</param>
            <param name="diagGradientMagnitudeImage">Visualized gradients magnitude of an input image.</param>
            <param name="diagScoreImage">Calculated score for each pixel of an input image.</param>
        </member>
        <member name="M:avl.DetectSegments(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds segments in an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Input region of interest. Default value: atl::NIL.</param>
            <param name="inAngleResolution">Resolution of segments' orientation. Default value: 1.0f.</param>
            <param name="inMinAngleDelta">Minimum angle between two segments. Default value: 20.0f.</param>
            <param name="inMinDistance">Minimum distance between two segments. Default value: 20.0f.</param>
            <param name="inMinLength">Minimum segment length. Default value: 20.0f.</param>
            <param name="inMinScore">Minimum matching score. Default value: 20.0f.</param>
            <param name="inEdgeThreshold">Minimum accepted edge magnitude. Default value: 10.0f.</param>
            <param name="outSegments">Output segments.</param>
            <param name="diagGradientMagnitudeImage">Visualized gradients magnitude of an input image.</param>
            <param name="diagScoreImage">Calculated score for each pixel of an input image.</param>
        </member>
        <member name="M:avl.DetectLines(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,System.Single,System.Single,System.Single,atl.Array&lt;avl.Line2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds lines in an image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Input region of interest. Default value: atl::NIL.</param>
            <param name="inAngleResolution">Resolution of lines' orientation. Default value: 1.0f.</param>
            <param name="inMinAngleDelta">Minimum angle between two lines. Default value: 20.0f.</param>
            <param name="inMinDistance">Minimum distance between two lines. Default value: 20.0f.</param>
            <param name="inMinScore">Minimum matching score. Default value: 20.0f.</param>
            <param name="inEdgeThreshold">Minimum accepted edge magnitude. Default value: 10.0f.</param>
            <param name="outLines">Output lines.</param>
            <param name="outScores">Output scores.</param>
            <param name="diagGradientMagnitudeImage">Visualized gradients magnitude of an input image.</param>
            <param name="diagScoreImage">Calculated score for each pixel of an input image.</param>
        </member>
        <member name="M:avl.DetectSingleCircle(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,System.Single,atl.Conditional&lt;avl.HoughCircle&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds the strongest circle of a given radius in the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Input region of interest. Default value: atl::NIL.</param>
            <param name="inRadius">Circle's radius. Default value: 10.0f.</param>
            <param name="inMinScore">Minimum matching score. Default value: 20.0f.</param>
            <param name="inEdgeThreshold">Minimum accepted edge magnitude. Default value: 10.0f.</param>
            <param name="outCircle">Found circle.</param>
            <param name="diagGradientMagnitudeImage">Visualized gradients magnitude of an input image.</param>
            <param name="diagScoreImage">Calculated score for each pixel of an input image.</param>
        </member>
        <member name="M:avl.DetectMultipleCircles(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,System.Single,System.Single,System.Single,atl.Array&lt;avl.HoughCircle&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds circles of a given radius in the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Input region of interest. Default value: atl::NIL.</param>
            <param name="inRadius">Circles' radius. Default value: 10.0f.</param>
            <param name="inMaxOverlap">Maximum accepted overlapping coefficient. Default value: 0.1f.</param>
            <param name="inMinScore">Minimum matching score. Default value: 20.0f.</param>
            <param name="inEdgeThreshold">Minimum accepted edge magnitude. Default value: 10.0f.</param>
            <param name="outCircles">Found circles.</param>
            <param name="diagGradientMagnitudeImage">Visualized gradients magnitude of an input image.</param>
            <param name="diagScoreImage">Calculated score for each pixel of an input image.</param>
        </member>
        <member name="M:avl.FrequencyDomain_FilterFrequencies(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Filters the frequencies in a frequency domain image suppressing the elements of too low or too high frequency.</summary>
            <param name="inFrequencyDomainImage">Input image in frequency domain.</param>
            <param name="inMinFrequency">Minimum frequency that will be kept. Default value: atl::NIL.</param>
            <param name="inMaxFrequency">Maximum frequency that will be kept. Default value: atl::NIL.</param>
            <param name="outFrequencyDomainImage">Filtered image in frequency domain.</param>
        </member>
        <member name="M:avl.FrequencyDomain_PhaseImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the phase of each frequency domain image pixel.</summary>
        </member>
        <member name="M:avl.FrequencyDomain_ModulusImage(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the modulus of each frequency domain image pixel.</summary>
        </member>
        <member name="M:avl.InverseFourierTransform(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms an image in frequency domain back to spatial domain using inverse Fourier transformation</summary>
        </member>
        <member name="M:avl.FourierTransform(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Transforms an image into frequency domain using Fourier transformation</summary>
        </member>
        <member name="M:avl.DeepLearning_DetectAnomalies_Deprecated(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!Syst">
            <summary>Detects anomalies using trained deep-learning model.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Area of interest. Default value: atl::NIL.</param>
            <param name="inDeepModel">Trained model.</param>
            <param name="outHeatmap">Image contains heatmaps for each input image channel.</param>
            <param name="outIsValid">Returns true if anomaly was not found.</param>
            <param name="outScore">Score of classification.</param>
            <param name="outIsConfident">Returns "false" if score is between T1 and T2.</param>
            <param name="outReconstructedImage">Returns network answer.</param>
        </member>
        <member name="M:avl.DeepLearning_LoadModel(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Loads Deep Learning model for further usage.</summary>
        </member>
        <member name="M:avl.DeepLearning_TrainAnomalyDetection_Global(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Ru">
            <summary>Performs deep learning model training using predefined model configuration.</summary>
            <param name="inImages">Array of training images paths.</param>
            <param name="inRoiImage">Array of ROI image path.</param>
            <param name="inLabels">Array of labels.</param>
            <param name="inNetworkDepth">Network depth. Default value: 3.</param>
            <param name="inIterationCount">Number of iterations. Default value: 1000.</param>
            <param name="inGrayscale">preprocessing: convert to grayscale.</param>
            <param name="inFlipUpDown">Augmentation: vertical flips.</param>
            <param name="inFlipLeftRight">Augmentation: horizontal flips.</param>
            <param name="inNoise">Augmentation: noise percentage.</param>
            <param name="inLuminance">Augmentation: luminance percentage.</param>
            <param name="outModel">Trained model.</param>
            <param name="outValidationProfile">Validation graph.</param>
            <param name="outTrainingProfile">Training graph.</param>
        </member>
        <member name="M:avl.DeepLearning_TrainAnomalyDetection_Local(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SamplingDensity.Type!System.Runtime.CompilerServices.IsConst">
            <summary>Performs deep learning model training using predefined model configuration.</summary>
            <param name="inImages">Array of training images paths.</param>
            <param name="inRoiImage">Array of ROI image path.</param>
            <param name="inLabels">Array of labels.</param>
            <param name="inDensity">Sampling density. Default value: Medium.</param>
            <param name="inNetworkDepth">Network depth. Default value: 3.</param>
            <param name="inIterationCount">Number of iterations. Default value: 1000.</param>
            <param name="inFeatureSize">Feature size. Default value: 24.</param>
            <param name="inGrayscale">preprocessing: convert to grayscale.</param>
            <param name="inDownsample">Preprocessing: downsample. Default value: 0.</param>
            <param name="inBatchSize">Advanced: batch size. Default value: 16.</param>
            <param name="inRotationAngle">Augmentation: rotation angle.</param>
            <param name="inFlipUpDown">Augmentation: vertical flips.</param>
            <param name="inFlipLeftRight">Augmentation: horizontal flips.</param>
            <param name="inNoise">Augmentation: noise percentage.</param>
            <param name="inLuminance">Augmentation: luminance percentage.</param>
            <param name="outModel">Trained model.</param>
            <param name="outValidationProfile">Validation graph.</param>
            <param name="outTrainingProfile">Training graph.</param>
        </member>
        <member name="M:avl.DeepLearning_TrainObjectClassification(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.R">
            <summary>Performs deep learning model training using predefined model configuration.</summary>
            <param name="inImages">Array of training images paths.</param>
            <param name="inRoiImages">Array of ROI images paths.</param>
            <param name="inLabels">Array of labels.</param>
            <param name="inNetworkDepth">Network depth. Default value: 3.</param>
            <param name="inIterationCount">Number of iterations. Default value: 1000.</param>
            <param name="inGrayscale">preprocessing: convert to grayscale.</param>
            <param name="inBatchSize">Advanced: batch size. Default value: 10.</param>
            <param name="inFlipUpDown">Augmentation: vertical flips.</param>
            <param name="inFlipLeftRight">Augmentation: horizontal flips.</param>
            <param name="inNoise">Augmentation: noise percentage.</param>
            <param name="inLuminance">Augmentation: luminance percentage.</param>
            <param name="outModel">Trained model.</param>
            <param name="outValidationProfile">Validation graph.</param>
            <param name="outTrainingProfile">Training graph.</param>
        </member>
        <member name="M:avl.DeepLearning_TrainFeatureDetection(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.FeatureClass&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;atl.String&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServ">
            <summary>Performs deep learning model training using predefined model configuration.</summary>
            <param name="inImages">Array of training images paths.</param>
            <param name="inRoiImages">Array of ROI images paths.</param>
            <param name="inClasses">Array of possible classes.</param>
            <param name="inMasks">Array of arrays of masks paths for each class.</param>
            <param name="inNetworkDepth">Network depth. Default value: 3.</param>
            <param name="inIterationCount">Number of iterations. Default value: 1000.</param>
            <param name="inFeatureSize">Feature size. Default value: 48.</param>
            <param name="inGrayscale">preprocessing: convert to grayscale.</param>
            <param name="inDownsample">Preprocessing: downsample. Default value: 0.</param>
            <param name="inBatchSize">Advanced: batch size. Default value: 16.</param>
            <param name="inRotationAngle">Augmentation: rotation angle.</param>
            <param name="inFlipUpDown">Augmentation: vertical flips.</param>
            <param name="inFlipLeftRight">Augmentation: horizontal flips.</param>
            <param name="inNoise">Augmentation: noise percentage.</param>
            <param name="inLuminance">Augmentation: luminance percentage.</param>
            <param name="outModel">Trained model.</param>
            <param name="outValidationProfile">Validation graph.</param>
            <param name="outTrainingProfile">Training graph.</param>
        </member>
        <member name="M:avl.DeepLearning_Train(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;atl.String&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs deep learning model training using predefined model configuration.</summary>
        </member>
        <member name="M:avl.DeepLearning_ScoreHeatmap2_Internal(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
        </member>
        <member name="M:avl.DeepLearning_ScoreHeatmap_Internal(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
        </member>
        <member name="M:avl.DeepLearning_ObtainHeatmap_Internal(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
        </member>
        <member name="M:avl.DeepLearning_EvaluateScore(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Evalute given score in respect to given thresholds.</summary>
        </member>
        <member name="M:avl.DeepLearning_ReadThresholds(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Reads thresholds from threshold.xml file.</summary>
        </member>
        <member name="M:avl.DeepLearning_CalculateThresholds(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Boolean&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Obtains default thresholds and saves them to threshold.xml</summary>
        </member>
        <member name="M:avl.DeepLearning_SegmentInstances(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Box&gt;*!System.Runtime.CompilerServices.IsImplic">
            <summary>Performs instance segmentation using a trained deep-learning model.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Area of interest. Default value: atl::NIL.</param>
            <param name="inDeepModel">Trained model.</param>
            <param name="inMinDetectionScore">Minimal score of found objects. Default value: atl::NIL.</param>
            <param name="inMaxObjectsCount">Maximal number of found objects. Default value: atl::NIL.</param>
            <param name="outBoundingBoxes">Bounding boxes of found objects.</param>
            <param name="outClassIds">Ids of found objects classes.</param>
            <param name="outClassNames">Names of found objects classes.</param>
            <param name="outScores">Scores of found objects.</param>
            <param name="outMasks">Masks of found objects.</param>
        </member>
        <member name="M:avl.DeepLearning_ClassifyObject(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.ClassConfidence&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs whole image classification using a trained deep-learning model.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Area of interest. Default value: atl::NIL.</param>
            <param name="inDeepModel">Trained model.</param>
            <param name="outConfidences">Returns confidences for all classes.</param>
            <param name="outClassName">Returns name of the class with highest confidence.</param>
            <param name="outClassIndex">Returns the index of the class with highest confidence.</param>
            <param name="outScore">Returns the value of the highest confidence.</param>
        </member>
        <member name="M:avl.DeepLearning_DetectAnomalies2(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Detects anomalies using trained deep-learning model. EXPERIMENTAL</summary>
            <param name="inImage">Input image.</param>
            <param name="inDeepModel">Trained model.</param>
            <param name="outHeatmap">Image contains heatmaps for each input image channel.</param>
            <param name="outIsValid">Returns true if anomaly was not found.</param>
            <param name="outScore">Score of classification.</param>
            <param name="outIsConfident">Returns "false" if score is between T1 and T2.</param>
        </member>
        <member name="M:avl.DeepLearning_DetectAnomalies(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Detects anomalies using trained deep-learning model.</summary>
            <param name="inImage">Input image.</param>
            <param name="inDeepModel">Trained model.</param>
            <param name="outHeatmap">Image contains heatmaps for each input image channel.</param>
            <param name="outIsValid">Returns true if anomaly was not found.</param>
            <param name="outScore">Score of classification.</param>
            <param name="outIsConfident">Returns "false" if score is between T1 and T2.</param>
            <param name="outReconstructedImage">Returns network answer.</param>
        </member>
        <member name="M:avl.DeepLearning_DetectFeatures(avl.DeepLearningConnectionState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.Image*!System.Runtime">
            <summary>Performs feature classification using trained deep-learning model.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Area of interest. Default value: atl::NIL.</param>
            <param name="inDeepModel">Trained model.</param>
            <param name="inOverlap">Add tiles overlapping to improve results quality. Default value: True.</param>
            <param name="outHeatmaps">Returns heatmaps for all classes.</param>
            <param name="outFeature1">Returns heatmap for first feature class.</param>
            <param name="outFeature2">Returns heatmap for second feature class or empty image if class is not specified.</param>
            <param name="outFeature3">Returns heatmap for third feature class or empty image if class is not specified.</param>
            <param name="outFeature4">Returns heatmap for fourth feature class or empty image if class is not specified.</param>
        </member>
        <member name="M:avl.DeepLearning_PreprocessImage_Internal(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.R">
            <summary />
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DeepLearning_ClearImageInsideRoi_Internal(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inImage">Input image.</param>
            <param name="inRegion">Input region.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DeepLearning_ClearImageOutsideRoi_Internal(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inImage">Input image.</param>
            <param name="inRegion">Input region.</param>
            <param name="outImage">Output image.</param>
        </member>
        <member name="M:avl.DeepLearning_GetConnectedServiceRevision_Internal(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
        </member>
        <member name="M:avl.DeepLearning_Configure(System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary>Filter is used to change basic Deep Learning configuration.</summary>
            <param name="inPort">Number of port used by sever. Default value: 8210.</param>
            <param name="inConnectionTimeout">Time which each filter will try to connect to service. Default value: 10000.</param>
        </member>
        <member name="M:avl.DeepModelToDeepModel_FeatureDetection(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Conversion between DeepModel and DeepModel_FeatureDetection</summary>
        </member>
        <member name="M:avl.DeepModelToDeepModel_AnomalyDetection2(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Conversion between DeepModel and DeepModel_AnomalyDetection2</summary>
        </member>
        <member name="M:avl.DeepModelToDeepModel_AnomalyDetection(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Conversion between DeepModel and DeepModel_AnomalyDetection</summary>
        </member>
        <member name="M:avl.DeepModelToDeepModel_InstanceSegmentation(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Conversion between DeepModel and DeepModel_ImageSegmentation</summary>
        </member>
        <member name="M:avl.DeepModelToDeepModel_Classification(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Conversion between DeepModel and DeepModel_Classification</summary>
        </member>
        <member name="M:avl.DeepLearning_GetProtocolVersion_Internal(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
        </member>
        <member name="M:avl.ReadMultipleDataMatrixCodes_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.DataMatrixCodeParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Int32,atl.Array&lt;avl.DataCode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Recta">
            <summary>Detects and recognizes several Data Matrix codes.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Coordinate system for the region of interest. Default value: atl::NIL.</param>
            <param name="inCodeParams">Specification of codes that can be found.</param>
            <param name="inMaxCodeCount">Maximum number of codes to be found. Default value: 2.</param>
            <param name="inContrastThreshold">Minimal difference between dark and bright modules. Default value: 20.</param>
            <param name="inAllowMultipleScales">Specifies whether codes of different module sizes are expected. Default value: False.</param>
            <param name="inFlags">Undocumented advanced tweaks for difficult cases.</param>
            <param name="outCandidates">Diagnostic information about detection results.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
        </member>
        <member name="M:avl.ReadSingleDataMatrixCode_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.DataMatrixCodeParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,atl.Conditional&lt;avl.DataCode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.Co">
            <summary>Detects and recognizes one Data Matrix code.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Coordinate system for the region of interest. Default value: atl::NIL.</param>
            <param name="inCodeParams">Specification of codes that can be found.</param>
            <param name="inContrastThreshold">Minimal difference between dark and bright modules. Default value: 20.</param>
            <param name="inFlags">Undocumented advanced tweaks for difficult cases.</param>
            <param name="outCandidates">Diagnostic information about detection results.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
        </member>
        <member name="M:avl.ReadMultipleDataMatrixCodes(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.DataMatrixCodeParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DataMatrixDetectionParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,atl.Array&lt;avl.DataCode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array">
            <summary>Detects and recognizes several Data Matrix codes.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Coordinate system for the region of interest. Default value: atl::NIL.</param>
            <param name="inCodeParams">Specification of codes that can be detected.</param>
            <param name="inDetectionParams">Specification of the way the codes are being detected.</param>
            <param name="inMaxCodeCount">Maximum number of codes to be found. Default value: 2.</param>
            <param name="inAllowMultipleScales">Specifies whether codes of different module sizes are expected. Default value: False.</param>
            <param name="outCandidates">Diagnostic information about detection results.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
        </member>
        <member name="M:avl.ReadSingleDataMatrixCode(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.DataMatrixCodeParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DataMatrixDetectionParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.DataCode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Path&gt;*!System.Runtim">
            <summary>Detects and recognizes one Data Matrix code.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Coordinate system for the region of interest. Default value: atl::NIL.</param>
            <param name="inCodeParams">Specification of codes that can be detected.</param>
            <param name="inDetectionParams">Specification of the way the codes are being detected.</param>
            <param name="outCandidates">Diagnostic information about detection results.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
        </member>
        <member name="M:avl.DetectBorder(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Line2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inImage">Input image.</param>
        </member>
        <member name="M:avl.GetExactlyNFurthestPoints(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inRegion">Input region.</param>
            <param name="inPointCount">Default value: 3.</param>
            <param name="inMinDistance">Default value: 10.0f.</param>
        </member>
        <member name="M:avl.FinderPatternOutline_Fitting(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inRegion">Input region.</param>
            <param name="inMaxSlant">Default value: 30.0f.</param>
        </member>
        <member name="M:avl.FinderPatternOutline_Contours(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inRegion">Input region.</param>
            <param name="inMaxSlant">Default value: 30.0f.</param>
            <param name="inFittedLineOrientationTolerance">Default value: 10.0f.</param>
        </member>
        <member name="M:avl.FinderPatternOutline(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Conditional&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inRegion">Input region.</param>
            <param name="inMaxSlant">Default value: 30.0f.</param>
        </member>
        <member name="M:avl.FinderPatternBoundingRectangle(avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Conditional&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inRegion">Input region.</param>
            <param name="inMaxSlant">Default value: 30.0f.</param>
        </member>
        <member name="M:avl.ReadMultipleDataMatrices_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean,avl.DataMatrixCodeType.Type,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.DataMatrix&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;atl.Conditional&lt;avl.Image&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferen">
            <summary>Detects and recognizes multiple Data Matrix codes.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Adjusts the region of interest to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inAllowRectangular">Enables detecting rectangular Data Matrices. Default value: False.</param>
            <param name="inCodeColumnCount">Optional width of a Data Matrix. Default value: atl::NIL.</param>
            <param name="inCodeRowCount">Optional height of a Data Matrix. Default value: atl::NIL.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
            <param name="diagValues">Images of decoded Data Matrices used by the reading algorithm.</param>
        </member>
        <member name="M:avl.ReadSingleDataMatrix_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean,avl.DataMatrixCodeType.Type,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Conditional&lt;avl.DataMatrix&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Detects and recognizes a single Data Matrix code.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Adjusts the region of interest to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inAllowRectangular">Enables detecting rectangular Data Matrices. Default value: False.</param>
            <param name="inCodeColumnCount">Optional width of a Data Matrix. Default value: atl::NIL.</param>
            <param name="inCodeRowCount">Optional height of a Data Matrix. Default value: atl::NIL.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
            <param name="diagValues">Image of decoded Data Matrix used by the reading algorithm.</param>
        </member>
        <member name="M:avl.RecognizeMultipleDataMatrices_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DataMatrixCodeType.Type,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.DataMatrix&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Conditional&lt;avl.Image&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts information from multiple Data Matrix codes located at the specified positions.</summary>
            <param name="inImage">Input image.</param>
            <param name="inDataMatrixPositions">Candidates for Data Matrices.</param>
            <param name="inCodeColumnCount">Optional width of Data Matrix. Default value: atl::NIL.</param>
            <param name="inCodeRowCount">Optional height of Data Matrix. Default value: atl::NIL.</param>
            <param name="diagValues">Images of decoded Data Matrices used by the reading algorithm.</param>
        </member>
        <member name="M:avl.RecognizeSingleDataMatrix_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.DataMatrixCodeType.Type,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,atl.Conditional&lt;avl.DataMatrix&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Image&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts information from the first correct Data Matrix code from among the specified positions.</summary>
            <param name="inImage">Input image.</param>
            <param name="inDataMatrixPositions">Candidates for Data Matrix.</param>
            <param name="inCodeColumnCount">Optional width of a Data Matrix. Default value: atl::NIL.</param>
            <param name="inCodeRowCount">Optional height of a Data Matrix. Default value: atl::NIL.</param>
            <param name="diagValues">Image of decoded Data Matrix used by the reading algorithm.</param>
        </member>
        <member name="M:avl.DecodeDataMatrix(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.DataMatrixType.Type&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a matrix of 0 or 1 values to a text in accordance to how DataMatrix codes are encoded.</summary>
            <param name="inMatrixValues">Matrix of binary values.</param>
            <param name="outText">Decoded text or nothing if decoding failed.</param>
            <param name="outType">DataMatrix code type.</param>
        </member>
        <member name="M:avl.DetectDataMatrices_Deprecated(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Finds candidates for Data Matrix codes in the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inAllowRectangular">Enables detecting rectangular Data Matrices. Default value: False.</param>
            <param name="outDataMatrixPositions">Array of possible positions of Data Matrices.</param>
        </member>
        <member name="M:avl.DecodeQRCode(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates a matrix of 0 or 1 values to a text in accordance to how QR codes are encoded.</summary>
            <param name="inBinaryMatrix">Square matrix of zero (black) and nonzero (white) values.</param>
            <param name="outDecodedText">Decoded text, if matrix represents valid code.</param>
        </member>
        <member name="M:avl.ReadMultipleQRCodes(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Array&lt;avl.QRCode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Detects and recognizes all QR codes on the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Adjusts the region of interest to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inResultsExpected">How many results we expect, 0 if as many as possible. Default value: 1.</param>
            <param name="inUnitSize">Estimated size of a code unit in pixels. Default value: atl::NIL.</param>
            <param name="inContrast">Difference between brightest and darkest pixel within the code. Default value: atl::NIL.</param>
            <param name="inPatternQuality">Quality of the code from 1 (extremely deformed) to 3 (perfect). Default value: atl::NIL.</param>
            <param name="inCodeDirection">Direction of one of the axes of the code. Default value: atl::NIL.</param>
            <param name="inMinLineMagnitude">Strength of an edge within the code; default depends on parameters. Default value: atl::NIL.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
        </member>
        <member name="M:avl.ReadSingleQRCode(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;System.Single&gt;,atl.Conditional&lt;avl.QRCode&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Detects and recognizes a single QR code on the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Adjusts the region of interest to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inUnitSize">Estimated size of a code unit in pixels. Default value: atl::NIL.</param>
            <param name="inContrast">Difference between brightest and darkest pixel within the code. Default value: atl::NIL.</param>
            <param name="inPatternQuality">Quality of the code from 1 (extremely deformed) to 3 (perfect). Default value: atl::NIL.</param>
            <param name="inCodeDirection">Direction of one of the axes of the code. Default value: atl::NIL.</param>
            <param name="inMinLineMagnitude">Strength of an edge within the code; default depends on parameters. Default value: atl::NIL.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
        </member>
        <member name="M:avs.AvsFilter_AccessPosition3D(avl.Position3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of a 3D position.</summary>
            <param name="outX">x-coordinate.</param>
            <param name="outY">y-coordinate.</param>
            <param name="outZ">z-coordinate.</param>
            <param name="outPhi">First rotation, around Y axis (Yaw, Azimuth).</param>
            <param name="outTheta">First rotation, around X axis (Pitch, Elevation).</param>
            <param name="outPsi">First rotation, around Z axis (Roll, Bank).</param>
        </member>
        <member name="M:avl.UndistortPoint(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.LensDistortion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Remove lens distortion for a single point.</summary>
            <param name="inPoint">Point on distorted image.</param>
            <param name="inCameraMatrix">Camera matrix obtained from calibration.</param>
            <param name="inDistortion">Distortion parameters obtained from calibration.</param>
            <param name="outPoint">Point on undistorted image.</param>
        </member>
        <member name="M:avl.EstimateRealScale(avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Position3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Estimate the scale for points in the Z=0 plane in a perpendicular view.</summary>
            <param name="inCameraMatrix">Camera matrix obtained from calibration.</param>
            <param name="inCameraPosition">Camera position for which the scale is estimated.</param>
            <param name="outUnitsPerPixel">Scale factor, or physical dimensions of 1 pixel in the world plane.</param>
        </member>
        <member name="M:avl.DetectChessboardGrid(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Point3D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Detects a chessboard on the image, and returns the points where 4 chessboard squares meet.</summary>
            <param name="inImage">Input image.</param>
            <param name="inChessboardWidth">Number of ranks (columns) of the chessboard.</param>
            <param name="inChessboardHeight">Number of files (rows) of the chessboard.</param>
            <param name="inGridOrigin">Real-world coordinates of top-left grid point.</param>
            <param name="inSquareDimension">Real-world length of a single chessboard square (mm). Default value: 1.0f.</param>
            <param name="inAdaptiveThresholding">Use adaptive thresholding instead of a global threshold of average.</param>
            <param name="inImageNormalization">Normalize input image using histogram equalization prior to detection.</param>
            <param name="inAdditionalFiltering">Use more criteria for eliminating false chessboards.</param>
            <param name="inPresenceCheck">Perform a fast approximate test of chessboard presence before locating it.</param>
            <param name="inSubpixelRefinement">If corners are found, post-process them to improve precision.</param>
            <param name="outWorldGridPoints">Corresponding 3D (World) points, generated from grid origin and square dimension.</param>
        </member>
        <member name="M:avl.IsCircleGridPresent(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Detects a circle board on an image. Returns the center of each circle.</summary>
            <param name="inImage">Input image.</param>
            <param name="inBoardColumns">Number of ranks (columns) of the chessboard.</param>
            <param name="inBoardRows">Number of files (rows) of the chessboard.</param>
            <param name="inSymmetricPattern">Board has symmetric pattern.</param>
            <param name="outImageGridPoints">Approximated position of grid points.</param>
        </member>
        <member name="M:avl.IsChessBoardPresent(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,atl.Conditional&lt;atl.Array&lt;avl.Point2D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Detects a chessboard on the image, and returns the points where 4 chessboard squares meet.</summary>
            <param name="inImage">Input image.</param>
            <param name="inChessboardWidth">Number of ranks (columns) of the chessboard.</param>
            <param name="inChessboardHeight">Number of files (rows) of the chessboard.</param>
            <param name="outImageGridPoints">Approximated position of grid points.</param>
        </member>
        <member name="M:avl.CalibrateCameraFromImages_CustomCircleGrid(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean,atl.Conditional&lt;avl.SpatialMap&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a spatial map with undistortion map.</summary>
            <param name="inImages">Images with calibration boards.</param>
            <param name="inSymmetricPattern">Is grid symmetrical.</param>
            <param name="outSpatialMap">Output spatial map.</param>
        </member>
        <member name="M:avl.CalibrateCameraFromImages_CustomGrid(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Conditional&lt;avl.SpatialMap&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.Region&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a spatial map with undistortion map.</summary>
            <param name="inImages">Images with calibration boards.</param>
            <param name="outSpatialMap">Output spatial map.</param>
            <param name="outError">Calibration approximation error.</param>
        </member>
        <member name="M:avl.CalibrateCameraFromImages_Chessboard(atl.Array&lt;avl.Image&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single,System.Boolean,avl.SpatialMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a spatial map with undistortion map.</summary>
            <param name="inImages">Images with calibration boards.</param>
            <param name="inColumnCount">Chessboards columns count.</param>
            <param name="inRowsCount">Chessboards rows count.</param>
            <param name="inMapWidth">Output map width.</param>
            <param name="inMapHeight">Output map height.</param>
            <param name="inUseRationalModel">Rational model.</param>
            <param name="inGridScale">Size of each cell.</param>
            <param name="inDisableTangentialDistortion">Disable lens tilt distortion.</param>
            <param name="outSpatialMap">Output spatial map.</param>
            <param name="outError">Calibration approximation error.</param>
        </member>
        <member name="M:avl.AnnotateGridPoints(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Single&gt;,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Segment2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Select a subset of the given points that forms a grid and assign world plane coordinates to them.</summary>
            <param name="inPoints">Points to calculate a grid.</param>
            <param name="inScale">Distance between two rows or two columns of the grid in world units. Default value: 1.0f.</param>
            <param name="inMinDistance">Minimum distance between two rows or two columns in pixels. Default value: atl::NIL.</param>
            <param name="inMaxDistance">Maximum distance between two rows or two columns in pixels. Default value: 10.0f.</param>
            <param name="inAngleTolerance">Maximum deviation from right angles in the grid. Default value: 10.0f.</param>
            <param name="outPoints3D">Calculated points in the world units.</param>
            <param name="outSelectedPoints">Which points were selected to calculate the grid.</param>
            <param name="diagValidSubgraph">Graph forming a valid grid.</param>
        </member>
        <member name="M:avl.AnnotateGridPoints_Deprecated(atl.Array&lt;avl.Point2D&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Select a subset of the given points that forms a grid and assign world plane coordinates to them.</summary>
            <param name="inPoints">Points to calculate a grid.</param>
            <param name="inScale">Distance between two rows or two columns of the grid in world units. Default value: 1.0f.</param>
            <param name="outPoints3D">Calculated points in the world units.</param>
            <param name="outSelectedPoints">Which points were selected to calculate the grid.</param>
            <param name="diagAxes">Points which lays on X and Y axis.</param>
        </member>
        <member name="M:avl.CalibrateCamera(atl.Array&lt;atl.Array&lt;avl.Point3D&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.Point2D&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,atl.Optional&lt;avl.Matrix!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Boolean,System.Boolean,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.LensDistortion*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;atl.Array&lt;avl.Position3D">
            <summary>Finds the camera intrinsic and extrinsic parameters from the input arrays of image and real-world coordinates. Uses pinhole camera model (perspective camera).</summary>
            <param name="inObjectPoints">Array, for each view: array of 3D points of the calibration pattern.</param>
            <param name="inImagePoints">Array, for each view: array of corresponding 2D points in the picture.</param>
            <param name="inImageWidth">Image width, only used to initialize camera matrix, not used when inInitialCameraMatrix present. Default value: 640.</param>
            <param name="inImageHeight">Image height, only used to initialize camera matrix, not used when inInitialCameraMatrix present. Default value: 480.</param>
            <param name="inFixPrincipalPoint">The principal point is not changed during the global optimization. It stays in the center of the image, or as in the initial camera matrix.</param>
            <param name="inFixAspectRatio">The functions considers only fy as a free parameter. The ratio fx/fy stays 1, or as in the initial camera matrix.</param>
            <param name="inZeroTangentDist">Tangential distortion coefficients (p_1, p_2) are assumed zero.</param>
            <param name="inInitialCameraMatrix">Optional initial camera matrix, required for inFixPrincipalPoint and inFixAspectRatio. Default value: atl::NIL.</param>
            <param name="outUnitScales">Image scale: px / mm.</param>
            <param name="outCameraPositions">Positions of cameras in world coordinate system for the views.</param>
            <param name="outError">Final re-projection error value.</param>
        </member>
        <member name="M:avl.CalibrateCamera_Pinhole2(atl.Array&lt;atl.Array&lt;avl.Point3D&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.Point2D&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,atl.Optional&lt;System.Single&gt;,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.LensDistortion*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds the camera intrinsic parameters from the input arrays of image and real-world coordinates. Uses pinhole camera model (perspective camera).</summary>
            <param name="inObjectPoints">Array, for each view: array of 3D points of the calibration pattern.</param>
            <param name="inImagePoints">Array, for each view: array of corresponding 2D points in the picture.</param>
            <param name="inImageWidth">Image width, only used to initialize camera matrix, not used when inInitialCameraMatrix present.</param>
            <param name="inImageHeight">Image height, only used to initialize camera matrix, not used when inInitialCameraMatrix present.</param>
            <param name="inDistortionModelType">0 - divisional (k4), 1 - polynomial (k1,k2,k3,p1,p2), 2 - poly_with_thin_prism (k1,k2,k3,p1,p2,s1,s2,s3,s4), 3 - custom (not implemented yet). Default value: 0.</param>
            <param name="outError">Final reprojection RMS error.</param>
        </member>
        <member name="M:avl.GenerateCalibrationPoints(System.Int32,System.Int32,System.Single,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,avl.Vector3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.Point2D&gt;,avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point3D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Point2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="inPointsX">Default value: 10.</param>
            <param name="inPointsY">Default value: 10.</param>
            <param name="inPointSpacing">Default value: 1.0f.</param>
            <param name="inPlaneRotationAxis">Default value: (DeltaX: 0.0, DeltaY: 0.0, DeltaZ: 1.0).</param>
            <param name="inPlaneRotationAngle">Default value: 0.0f.</param>
            <param name="inPlaneTranslation">Default value: (DeltaX: 0.0, DeltaY: 0.0, DeltaZ: 10.0).</param>
            <param name="inCameraType">0 - pinhole, 1 - telecentric. Default value: 0.</param>
            <param name="inFocalLengthOrMagnificationX">Default value: 100.0f.</param>
            <param name="inPrincipalPoint">by default pp is on the center of output image. Default value: atl::NIL.</param>
            <param name="inImageSize">Default value: (Width: 640, Height: 480).</param>
        </member>
        <member name="M:avl.CalibrateCamera_Telecentric(atl.Array&lt;atl.Array&lt;avl.Point3D&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;atl.Array&lt;avl.Point2D&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.LensDistortion*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Finds the telecentric camera intrinsic parameters from the input arrays of image and real-world coordinates. Uses telecentric camera model (affine camera).</summary>
            <param name="inObjectPoints">Array, for each view: array of 3D points of the calibration pattern.</param>
            <param name="inImagePoints">Array, for each view: array of corresponding 2D points in the picture.</param>
            <param name="inImageWidth">Image width, only used to initialize camera matrix, not used when inInitialCameraMatrix present.</param>
            <param name="inImageHeight">Image height, only used to initialize camera matrix, not used when inInitialCameraMatrix present.</param>
            <param name="inUseRationalModel">Estimate radial denominator coefficients k4, k5, k6. Default value: False.</param>
            <param name="inUseTangentialModel">Estimate tangential distortion coefficients p1, p2. Default value: True.</param>
            <param name="inUseThinPrismModel">Estimate thin prism distortion coefficients s1, s2, s3, s4. Default value: True.</param>
            <param name="outError">Final reprojection RMS error.</param>
        </member>
        <member name="M:avl.LensDistortionToMatrix(avl.LensDistortion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Matrix*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns LensDistortion as a Matrix of distortion coefficients.</summary>
        </member>
        <member name="M:avl.GradeBarcode(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.BarcodeFormat.Type,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.BarcodeGrades&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.BarcodeGrades&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.BarcodesErrors.Type&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Profile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Determines the barcode quality.</summary>
            <param name="inImage">Input image.</param>
            <param name="inBarcodeFormat">Default value: EAN13.</param>
        </member>
        <member name="M:avl.ReadMultipleBarcodes(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.BarcodeFormat.Type&gt;,System.Single,System.Int32,System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,a">
            <summary>Detects and recognizes multiple barcodes on the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Range of pixels to be processed. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Adjusts the barcode rectangle to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inBarcodeFormat">Format of the barcode. Default value: EAN13.</param>
            <param name="inMinGradientLength">Minimal gradient length of edge pixels used for detecting barcodes. Default value: 8.0f.</param>
            <param name="inBaseBarWidth">Estimated width of the thinnest bar. Default value: 3.</param>
            <param name="inDetectionScanCount">Number of scan lines used in detecting barcode. Default value: 5.</param>
            <param name="inReadingScanCount">Number of parallel scans run until first successful read. Default value: 5.</param>
            <param name="inScanWidth">Width of the single scan. Default value: 5.</param>
            <param name="inMinStrength">Minimal strength of an extracted edge. Default value: 5.0f.</param>
            <param name="inSmoothingStdDev">Standard deviation of the gaussian smoothing applied to the profile extracted in each scan. Default value: 0.25f.</param>
            <param name="outBarcodePositions">Positions of the found barcodes.</param>
            <param name="outDecodedTexts">Decoded barcode content.</param>
            <param name="outBarcodeFormats">Decoded barcode format.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
            <param name="diagGradientImage">Image of gradient directions.</param>
            <param name="diagBarcodeCandidates">Places with high gradient values that are further investigated.</param>
            <param name="diagScheduledScanSegments">Scheduled scan segments.</param>
        </member>
        <member name="M:avl.ReadSingleBarcode(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.BarcodeFormat.Type&gt;,System.Single,System.Int32,System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Conditional&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereference">
            <summary>Detects and recognizes a single barcode on the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inRoiAlignment">Adjusts the region of interest to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inBarcodeFormat">Format of the barcode. Default value: EAN13.</param>
            <param name="inMinGradientLength">Minimal gradient length of edge pixels used for detecting barcodes. Default value: 8.0f.</param>
            <param name="inBaseBarWidth">Estimated width of the thinnest bar. Default value: 3.</param>
            <param name="inDetectionScanCount">Number of scan lines used in detecting barcode. Default value: 5.</param>
            <param name="inReadingScanCount">Number of parallel scans run until first successful read. Default value: 5.</param>
            <param name="inScanWidth">Width of the single scan. Default value: 5.</param>
            <param name="inMinStrength">Minimal strength of an extracted edge. Default value: 5.0f.</param>
            <param name="inSmoothingStdDev">Standard deviation of the gaussian smoothing applied to the profile extracted in each scan. Default value: 0.25f.</param>
            <param name="outBarcodePosition">Position of the found barcode.</param>
            <param name="outDecodedText">Decoded barcode content or nothing if all of the scans failed.</param>
            <param name="outBarcodeFormat">Decoded barcode format or nothing if all of the scans failed.</param>
            <param name="outAlignedRoi">Input ROI after transformation (in the image coordinates).</param>
            <param name="diagGradientImage">Image of gradient directions.</param>
            <param name="diagBarcodeCandidates">Places with high gradient values that are further investigated.</param>
            <param name="diagScheduledScanSegments">Scheduled scan segments.</param>
        </member>
        <member name="M:avl.DecodeBarcode(atl.Array&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.BarcodeFormat.Type&gt;,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.BarcodeFormat.Type&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Translates an array of bar widths to sequence of digits or text in accordance to the selected barcode standard.</summary>
            <param name="inBarWidths">Widths of the barcode bars (starting with width of the black bar).</param>
            <param name="inBarcodeFormat">Format of the barcode. Default value: EAN13.</param>
            <param name="outDecodedText">Decoded barcode text or nothing if decoding failed.</param>
            <param name="outBarcodeFormat">Decoded barcode format or nothing if decoding failed.</param>
        </member>
        <member name="M:avl.RecognizeBarcode(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Rectangle2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;avl.BarcodeFormat.Type&gt;,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Conditional&lt;atl.String&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.BarcodeFormat.Type&gt;*!System.Runtime.Com">
            <summary>Extracts information from a barcode located on the input image at a given position.</summary>
            <param name="inImage">Input image.</param>
            <param name="inBarcodePosition">Position of the input image in which the barcode is located.</param>
            <param name="inBarcodePositionAlignment">Adjusts the barcode rectangle to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inBarcodeFormat">Format of the barcode. Default value: EAN13.</param>
            <param name="inScanCount">Number of parallel scans run until first successful read. Default value: 5.</param>
            <param name="inScanWidth">Width of the single scan. Default value: 5.</param>
            <param name="inMinStrength">Minimal strength of an extracted edge. Default value: 5.0f.</param>
            <param name="inSmoothingStdDev">Standard deviation of the gaussian smoothing applied to the profile extracted in each scan. Default value: 0.25f.</param>
            <param name="outDecodedText">Decoded barcode text or nothing if all of the scans failed.</param>
            <param name="outBarcodeFormat">Decoded barcode format or nothing if all of the scans failed.</param>
            <param name="diagScheduledScanSegments">Scheduled scan segments.</param>
        </member>
        <member name="M:avl.DetectMultipleBarcodes(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.BarcodeFormat.Type&gt;,System.Single,System.Int32,System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Determines the positions of multiple barcodes on the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inFormat">Format of the barcode. Default value: EAN13.</param>
            <param name="inMinGradientLength">Minimal gradient length of edge pixels used for detecting barcodes. Default value: 8.0f.</param>
            <param name="inBaseBarWidth">Estimated width of the thinnest bar. Default value: 3.</param>
            <param name="inScanCount">Number of scan lines used in detecting barcode. Default value: 5.</param>
            <param name="inScanWidth">Width of the single scan. Default value: 5.</param>
            <param name="inMinStrength">Minimal strength of an extracted edge. Default value: 5.0f.</param>
            <param name="inSmoothingStdDev">Standard deviation of the gaussian smoothing applied to the profile extracted in each scan. Default value: 0.25f.</param>
            <param name="outBarcodePositions">Positions of the found barcodes.</param>
            <param name="diagGradientImage">Image of gradient directions.</param>
            <param name="diagBarcodeCandidates">Places with high gradient values that are further investigated.</param>
        </member>
        <member name="M:avl.DetectSingleBarcode(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.BarcodeFormat.Type&gt;,System.Single,System.Int32,System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,atl.Conditional&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Rectangle2D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Determines the position of a single barcode on the input image.</summary>
            <param name="inImage">Input image.</param>
            <param name="inFormat">Format of the barcode. Default value: EAN13.</param>
            <param name="inMinGradientLength">Minimal gradient length of edge pixels used for detecting barcodes. Default value: 8.0f.</param>
            <param name="inBaseBarWidth">Estimated width of the thinnest bar. Default value: 3.</param>
            <param name="inScanCount">Number of scan lines used in detecting barcode. Default value: 5.</param>
            <param name="inScanWidth">Width of the single scan. Default value: 5.</param>
            <param name="inMinStrength">Minimal strength of an extracted edge. Default value: 5.0f.</param>
            <param name="inSmoothingStdDev">Standard deviation of the gaussian smoothing applied to the profile extracted in each scan. Default value: 0.25f.</param>
            <param name="outBarcodePosition">Position of the found barcode.</param>
            <param name="diagGradientImage">Image of gradient directions.</param>
            <param name="diagBarcodeCandidates">Places with high gradient values that are further investigated.</param>
        </member>
        <member name="M:avl.DetectRidges_AsPaths(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,avl.Polarity.Type,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts subpixel-precise paths that represent bright or dark thin lines.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inStdDevX">Smoothing standard deviation (horizontal). Default value: 3.0f.</param>
            <param name="inStdDevY">Smoothing standard deviation (vertical, or Auto = horizontal). Default value: atl::NIL.</param>
            <param name="inRidgeThreshold">Sufficient ridge strength; ridges of that strength will always be detected. Default value: 5.0f.</param>
            <param name="inRidgeHysteresis">Value by which the ridge threshold is decreased for ridge points neighboring with sufficiently strong edges. Default value: 4.0f.</param>
        </member>
        <member name="M:avl.DetectRidges_AsRegion(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,avl.Polarity.Type,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts a pixel-precise region of bright or dark thin lines.</summary>
            <param name="inImage">Input image.</param>
            <param name="inRoi">Region of interest. Default value: atl::NIL.</param>
            <param name="inStdDevX">Smoothing standard deviation (horizontal). Default value: 3.0f.</param>
            <param name="inStdDevY">Smoothing standard deviation (vertical, or Auto = horizontal). Default value: atl::NIL.</param>
            <param name="inRidgeThreshold">Sufficient ridge strength; ridges of that strength will always be detected. Default value: 5.0f.</param>
            <param name="inRidgeHysteresis">Value by which the ridge threshold is decreased for ridge points neighboring with sufficiently strong edges. Default value: 4.0f.</param>
            <param name="inMinBlobArea">Minimal area of a ridge blob. Default value: 1.</param>
        </member>
        <member name="M:avl.DetectEdges_AsPaths_Mask(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.EdgeMaskFilter.Type,System.Single,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts subpixel-precise paths that represent continuous edges. Faster, yet less accurate version.</summary>
            <param name="inImage">Image from which edges will be extracted.</param>
            <param name="inRoi">Region of the image from which edges will be extracted. Default value: atl::NIL.</param>
            <param name="inEdgeMaskFilter">Type of edge filter used for computing gradients.</param>
            <param name="inEdgeThreshold">Sufficient edge strength; edges of that strength will always be detected. Default value: 35.0f.</param>
            <param name="inEdgeHysteresis">Value by which the edge threshold is decreased for edge points neighboring with sufficiently strong edges. Default value: 15.0f.</param>
            <param name="inMaxJoiningDistance">Maximal distance between edges that can be joined. Default value: atl::NIL.</param>
            <param name="inMaxJoiningAngle">Maximal allowed angle between edges being joined. Default value: 30.0f.</param>
            <param name="inJoiningDistanceBalance">Determines how important distance between edges is according to their angle difference. Default value: 0.0f.</param>
            <param name="inJoiningEndingLength">Determines the length of the edge end used for edge angle computing. Default value: atl::NIL.</param>
            <param name="inMinEdgeLength">Minimal length of an edge. Default value: 0.0f.</param>
            <param name="outEdges">Paths representing found edges.</param>
            <param name="diagGradientMagnitudeImage">Visualization of the gradient magnitude.</param>
            <param name="diagEdgeRegion">Region representing found edges.</param>
        </member>
        <member name="M:avl.DetectEdges_AsRegion_Mask(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.EdgeMaskFilter.Type,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts a pixel-precise region of continuous edges. Faster, yet less accurate version.</summary>
            <param name="inImage">Image from which edges will be extracted.</param>
            <param name="inRoi">Region of the image from which edges will be extracted. Default value: atl::NIL.</param>
            <param name="inEdgeMaskFilter">Type of edge filter used for computing gradients.</param>
            <param name="inEdgeThreshold">Sufficient edge strength; edges of that strength will always be detected. Default value: 35.0f.</param>
            <param name="inEdgeHysteresis">Value by which the edge threshold is decreased for edge points neighboring with sufficiently strong edges. Default value: 15.0f.</param>
            <param name="inMaxJoiningDistance">Maximal distance between edges that can be joined. Default value: 0.0f.</param>
            <param name="inMinBlobArea">Minimal area of an edge blob. Default value: 1.</param>
            <param name="outEdgeRegion">Region of the found edges.</param>
            <param name="diagGradientMagnitudeImage">Visualization of the gradient magnitude.</param>
        </member>
        <member name="M:avl.DetectEdges_AsPaths(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.EdgeFilter.Type,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts subpixel-precise paths that represent continuous edges.</summary>
            <param name="inImage">Image from which edges will be extracted.</param>
            <param name="inRoi">Region of the image from which edges will be extracted. Default value: atl::NIL.</param>
            <param name="inEdgeFilter">Type of edge filter used for computing gradients.</param>
            <param name="inStdDevX">Amount of horizontal smoothing used by the edge filter. Default value: 2.0f.</param>
            <param name="inStdDevY">Amount of vertical smoothing used by the edge filter (Auto = inStdDevX). Default value: atl::NIL.</param>
            <param name="inEdgeThreshold">Sufficient edge strength; edges of that strength will always be detected. Default value: 15.0f.</param>
            <param name="inEdgeHysteresis">Value by which the edge threshold is decreased for edge points neighboring with sufficiently strong edges. Default value: 5.0f.</param>
            <param name="inMaxJoiningDistance">Maximal distance between edges that can be joined. Default value: atl::NIL.</param>
            <param name="inMaxJoiningAngle">Maximal allowed angle between edges being joined. Default value: 30.0f.</param>
            <param name="inJoiningDistanceBalance">Determines how important distance between edges is according to their angle difference. Default value: 0.0f.</param>
            <param name="inJoiningEndingLength">Determines the length of the edge end used for edge angle computing. Default value: atl::NIL.</param>
            <param name="inMinEdgeLength">Minimal length of an edge. Default value: 0.0f.</param>
            <param name="outEdges">Paths representing found edges.</param>
            <param name="diagGradientMagnitudeImage">Visualization of the gradient magnitude.</param>
            <param name="diagEdgeRegion">Region representing found edges.</param>
        </member>
        <member name="M:avl.DetectEdges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.EdgeFilter.Type,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts a pixel-precise image of continuous edges.</summary>
            <param name="inImage">Image from which edges will be extracted.</param>
            <param name="inRoi">Region of the image from which edges will be extracted. Default value: atl::NIL.</param>
            <param name="inEdgeFilter">Type of edge filter used for computing gradients.</param>
            <param name="inStdDevX">Amount of horizontal smoothing used by the edge filter. Default value: 2.0f.</param>
            <param name="inStdDevY">Amount of vertical smoothing used by the edge filter (Auto = inStdDevX). Default value: atl::NIL.</param>
            <param name="inEdgeThreshold">Sufficient edge strength; edges of that strength will always be detected. Default value: 15.0f.</param>
            <param name="inEdgeHysteresis">Value by which the edge threshold is decreased for edge points neighboring with sufficiently strong edges. Default value: 5.0f.</param>
            <param name="inMaxJoiningDistance">Maximal distance between edges that can be joined. Default value: 0.0f.</param>
            <param name="inMinBlobArea">Minimal area of an edge blob. Default value: 1.</param>
            <param name="outEdgesImage">Image of found edges.</param>
            <param name="diagGradientMagnitudeImage">Visualization of the gradient magnitude.</param>
        </member>
        <member name="M:avl.DetectEdges_AsRegion(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,avl.EdgeFilter.Type,System.Single,atl.Optional&lt;System.Single&gt;,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsConst,avl.Region*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Extracts a pixel-precise region of continuous edges.</summary>
            <param name="inImage">Image from which edges will be extracted.</param>
            <param name="inRoi">Region of the image from which edges will be extracted. Default value: atl::NIL.</param>
            <param name="inEdgeFilter">Type of edge filter used for computing gradients.</param>
            <param name="inStdDevX">Amount of horizontal smoothing used by the edge filter. Default value: 2.0f.</param>
            <param name="inStdDevY">Amount of vertical smoothing used by the edge filter. Default value: atl::NIL.</param>
            <param name="inEdgeThreshold">Sufficient edge strength; edges of that strength will always be detected. Default value: 15.0f.</param>
            <param name="inEdgeHysteresis">Value by which the edge threshold is decreased for edge points neighboring with sufficiently strong edges. Default value: 5.0f.</param>
            <param name="inMaxJoiningDistance">Maximal distance between edges that can be joined. Default value: 0.0f.</param>
            <param name="inMinBlobArea">Minimal area of an edge blob. Default value: 1.</param>
            <param name="outEdgeRegion">Region of the found edges.</param>
            <param name="diagGradientMagnitudeImage">Visualization of the gradient magnitude.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanExactlyNStripes3D(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!S">
            <summary>Locates a specified number of multiple pairs of changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the surface stripe extraction process. Default value: StripeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Low MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inStripeCount">Number of surface stripes to be found. Default value: 1.</param>
            <param name="inStripeSelection">Selection mode of the resulting stripes.</param>
            <param name="inMinGapWidth">Minimal distance between consecutive surface stripes. Default value: 0.0f.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive surface stripes. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outStripes">Found surface stripes.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanMultipleStripes3D(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.I">
            <summary>Locates multiple pairs of changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the surface stripe extraction process. Default value: StripeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Low MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inMinGapWidth">Minimal distance between consecutive surface stripes. Default value: 0.0f.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive surface stripes. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outStripes">Found surface stripes.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanSingleStripe3D(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,">
            <summary>Locates the strongest pair of changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the surface stripe extraction process. Default value: StripeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Low MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inStripeSelection">Selection mode of the resulting surface stripe.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outStripe">Found surface stripe.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanExactlyNEdges3D(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!Syste">
            <summary>Locates a specified number of the strongest changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the surface edge extraction process. Default value: EdgeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f EdgeTransition: LowToHigh ).</param>
            <param name="inEdgeCount">Number of surface edges to be found. Default value: 1.</param>
            <param name="inEdgeSelection">Selection mode of the resulting edges.</param>
            <param name="inMinDistance">Minimal distance between consecutive edges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive edges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outEdges">Found surface edges.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanMultipleEdges3D(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImp">
            <summary>Locates multiple changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the surface edge extraction process. Default value: EdgeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f EdgeTransition: LowToHigh ).</param>
            <param name="inMinDistance">Minimal distance between consecutive edges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive edges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outEdges">Found surface edges.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanSingleEdge3D(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.">
            <summary>Locates the strongest change of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of surface points. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the surface edge extraction process. Default value: EdgeScanParams3D ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f EdgeTransition: LowToHigh ).</param>
            <param name="inEdgeSelection">If many edge points are possible, defines which one is selected.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outEdge">Found surface edge.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanExactlyNStripes3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Conditional&lt;atl.Array&lt;avl.SurfaceStripe1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced">
            <summary>Locates a specified number of multiple pairs of changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanMap">Data precomputed with CreateSurfaceScanMap.</param>
            <param name="inStripeScanParams">Parameters controlling the surface stripe extraction process.</param>
            <param name="inStripeCount">Number of surface stripes to be found. Default value: 1.</param>
            <param name="inStripeSelection">Selection mode of the resulting stripes. Default value: avl::Selection::Best.</param>
            <param name="inMinGapWidth">Minimal distance between consecutive surface stripes.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive surface stripes. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outStripes">Found surface stripes.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanMultipleStripes3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.SurfaceStripe1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsI">
            <summary>Locates multiple pairs of changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanMap">Data precomputed with CreateSurfaceScanMap.</param>
            <param name="inStripeScanParams">Parameters controlling the surface stripe extraction process.</param>
            <param name="inMinGapWidth">Minimal distance between consecutive surface stripes. Default value: 0.0f.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive surface stripes. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outStripes">Found surface stripes.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanSingleStripe3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Conditional&lt;avl.SurfaceStripe1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereference">
            <summary>Locates the strongest pair of changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanMap">Data precomputed with CreateSurfaceScanMap.</param>
            <param name="inStripeScanParams">Parameters controlling the surface stripe extraction process.</param>
            <param name="inStripeSelection">Selection mode of the resulting stripe. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outStripe">Found surface stripe.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanExactlyNEdges3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Conditional&lt;atl.Array&lt;avl.SurfaceEdge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.P">
            <summary>Locates a specified number of the strongest changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanMap">Data precomputed with CreateSurfaceScanMap.</param>
            <param name="inEdgeScanParams">Parameters controlling the surface edge extraction process.</param>
            <param name="inEdgeCount">Number of surface edges to be found. Default value: 1.</param>
            <param name="inEdgeSelection">Selection mode of the resulting edges. Default value: avl::Selection::Best.</param>
            <param name="inMinDistance">Minimal distance between consecutive edges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive edges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outEdges">Found surface edges.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanMultipleEdges3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Array&lt;avl.SurfaceEdge1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplici">
            <summary>Locates multiple changes of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanMap">Data precomputed with CreateSurfaceScanMap.</param>
            <param name="inEdgeScanParams">Parameters controlling the surface edge extraction process.</param>
            <param name="inMinDistance">Minimal distance between consecutive edges.</param>
            <param name="inMaxDistance">Maximal distance between consecutive edges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: atl::NIL.</param>
            <param name="outEdges">Found surface edges.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanSingleEdge3D(avl.Surface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Optional&lt;System.Int32&gt;,atl.Conditional&lt;avl.SurfaceEdge1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Locates the strongest change of surface height along a given path.</summary>
            <param name="inSurface">Input surface.</param>
            <param name="inScanMap">Data precomputed with CreateSurfaceScanMap.</param>
            <param name="inEdgeScanParams">Parameters controlling the surface edge extraction process.</param>
            <param name="inEdgeSelection">Selection mode of the resulting edge. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="inMaxInterpolationLength">Maximal number of consecutive not existing profile points. Default value: 1.</param>
            <param name="outEdge">Found surface edge.</param>
            <param name="diagHeightProfile">Extracted surface height profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.CreateSurfaceScanMap(avl.SurfaceFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.ScanMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Precomputes a data object that is required for fast 1D edge detection in 3D.</summary>
            <param name="inSurfaceFormat">Dimensions, depth image pixel type, coordinate offsets and scales of a surface on which edge detection will be performed.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels of the surface depth image. Default value: 5.</param>
            <param name="inSurfaceInterpolation">Interpolation method used for extraction of depth image pixel values. Default value: Bilinear.</param>
            <param name="outScanMap">Optimized data object required for 1D edge detection in 3D.</param>
            <param name="outAlignedScanPath">Transformed input path.</param>
        </member>
        <member name="M:avl.Surface.Reset(System.Int32,System.Int32,System.Int32,avl.PlainType.Type,System.Void*,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
Turns the Surface into a wrapper of external data (point data will be NOT own)
</member>
        <member name="M:avl.Surface.Reset(System.Int32,System.Int32,avl.PlainType.Type,atl.Optional&lt;avl.Region!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
Iff the format is different then recreates the Surface (point data will be own).
Typically used for (re-)creating output Surface in Surface processing functions.
</member>
        <member name="M:avs.AvsFilter_ScanExactlyNStripes(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.">
            <summary>Locates a specified number of multiple pairs of opposite edges across a given path.</summary>
            <param name="inImage">Input image to be measured.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Dark MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inStripeCount">Number of stripes to be found. Default value: 1.</param>
            <param name="inStripeSelection">Selection mode of the resulting stripes.</param>
            <param name="inMinGapWidth">Minimal distance between consecutive stripes. Default value: 0.0f.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive stripes. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outGaps">Gaps between consecutive stripes.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanMultipleStripes(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImpli">
            <summary>Locates multiple pairs of edges across a given path.</summary>
            <param name="inImage">Input image to be measured.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Dark MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inMinGapWidth">Minimal distance between consecutive stripes. Default value: 0.0f.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive stripes. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outGaps">Gaps between consecutive stripes.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanSingleStripe(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Co">
            <summary>Locates the strongest pair of edges across a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process. Default value: StripeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f MaxInnerEdgeMagnitude: Nil StripePolarity: Dark MinStripeWidth: 0.0f MaxStripeWidth: Nil ).</param>
            <param name="inStripeSelection">Selection mode of the resulting stripe.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outStripe">Found stripe.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanExactlyNRidges(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Ru">
            <summary>Locates a specified number of the strongest dark or bright pixel peak along a given path.</summary>
            <param name="inImage">Input image to be measured.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process. Default value: RidgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f RidgeWidth: 5 RidgeMargin: 2 MinMagnitude: 5.0f RidgePolarity: Dark ).</param>
            <param name="inRidgeCount">Number of ridges to be found. Default value: 1.</param>
            <param name="inRidgeSelection">Selection mode of the resulting ridges.</param>
            <param name="inMinDistance">Minimal distance between consecutive ridges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive ridges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outGaps">Gaps between consecutive edges.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the ridge operator response.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanMultipleRidges(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplici">
            <summary>Locates multiple dark or bright pixel peaks along a given path.</summary>
            <param name="inImage">Input image to be measured.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process. Default value: RidgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f RidgeWidth: 5 RidgeMargin: 2 MinMagnitude: 5.0f RidgePolarity: Dark ).</param>
            <param name="inMinDistance">Minimal distance between consecutive ridges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive ridges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outGaps">Gaps between consecutive ridges.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the ridge operator response.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanSingleRidge(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Cond">
            <summary>Locates the strongest dark or bright pixel peak along a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process. Default value: RidgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f RidgeWidth: 5 RidgeMargin: 2 MinMagnitude: 5.0f RidgePolarity: Dark ).</param>
            <param name="inRidgeSelection">Selection mode of the resulting ridge.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outRidge">Found ridge.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the ridge operator response.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanExactlyNEdges(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runt">
            <summary>Locates a specified number of the strongest transitions between dark and bright pixels along a given path.</summary>
            <param name="inImage">Input image to be measured.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f EdgeTransition: BrightToDark ).</param>
            <param name="inEdgeCount">Number of edges to be found. Default value: 1.</param>
            <param name="inEdgeSelection">Selection mode of the resulting edges.</param>
            <param name="inMinDistance">Minimal distance between consecutive edges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive edges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outGaps">Gaps between consecutive edges.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanMultipleEdges(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitl">
            <summary>Locates multiple transitions between dark and bright pixels along a given path.</summary>
            <param name="inImage">Input image to be measured.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used in extraction of image pixel values. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f EdgeTransition: BrightToDark ).</param>
            <param name="inMinDistance">Minimal distance between consecutive edges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive edges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outGaps">Gaps between consecutive edges.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avs.AvsFilter_ScanSingleEdge(avl.ScanMapState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Condit">
            <summary>Locates the strongest transition between dark and bright pixels along a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixels. Default value: Bilinear.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process. Default value: EdgeScanParams ( ProfileInterpolation: Quadratic4 SmoothingStdDev: 0.6f MinMagnitude: 5.0f EdgeTransition: BrightToDark ).</param>
            <param name="inEdgeSelection">If many edge points are possible, defines which one is selected.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outEdge">Found edge.</param>
            <param name="outAlignedScanPath">Path along which the scan is performed; in the image coordinate system.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributed to a single value of the extracted profile.</param>
        </member>
        <member name="M:avl.ScanExactlyNStripes(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;atl.Array&lt;avl.Stripe1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Gap1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!">
            <summary>Locates a specified number of multiple pairs of opposite edges across a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanMap">Data precomputed with CreateScanMap.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inStripeCount">Number of stripes to be found. Default value: 1.</param>
            <param name="inStripeSelection">Selection mode of the resulting stripes. Default value: avl::Selection::Best.</param>
            <param name="inMinGapWidth">Minimal distance between consecutive stripes.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive stripes. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outGaps">Distances between consecutive stripes.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanMultipleStripes(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Stripe1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Gap1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profi">
            <summary>Locates multiple pairs of edges across a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanMap">Data precomputed with CreateScanMap.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inMinGapWidth">Minimal distance between consecutive stripes. Default value: 0.0f.</param>
            <param name="inMaxGapWidth">Maximal distance between consecutive stripes. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outStripes">Found stripes.</param>
            <param name="outGaps">Distances between consecutive stripes.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanSingleStripe(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.StripeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;avl.Stripe1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Locates the strongest pair of edges across a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanMap">Data precomputed with CreateScanMap.</param>
            <param name="inStripeScanParams">Parameters controlling the stripe extraction process.</param>
            <param name="inStripeSelection">Selection mode of the resulting stripe. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outStripe">Found stripe.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanExactlyNRidges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;atl.Array&lt;avl.Ridge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Gap1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!Sys">
            <summary>Locates a specified number of the strongest dark or bright pixel peak along a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanMap">Data precomputed with CreateScanMap.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process.</param>
            <param name="inRidgeCount">Number of ridges to be found. Default value: 1.</param>
            <param name="inRidgeSelection">Selection mode of the resulting ridges. Default value: avl::Selection::Best.</param>
            <param name="inMinDistance">Minimal distance between consecutive ridges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive ridges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outGaps">Gaps between consecutive edges.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the ridge operator response.</param>
        </member>
        <member name="M:avl.ScanMultipleRidges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Ridge1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Gap1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*">
            <summary>Locates multiple dark or bright pixel peaks along a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanMap">Data precomputed with CreateScanMap.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process.</param>
            <param name="inMinDistance">Minimal distance between consecutive ridges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive ridges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="outRidges">Found ridges.</param>
            <param name="outGaps">Gaps between consecutive ridges.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the ridge operator response.</param>
        </member>
        <member name="M:avl.ScanSingleRidge(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RidgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;avl.Ridge1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Locates the strongest dark or bright pixel peak along a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanMap">Data precomputed with CreateScanMap.</param>
            <param name="inRidgeScanParams">Parameters controlling the ridge extraction process.</param>
            <param name="inRidgeSelection">Selection mode of the resulting ridge. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker ridges can be detected in the vicinity of stronger ridges. Default value: atl::NIL.</param>
            <param name="outRidge">Found ridge.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the ridge operator response.</param>
        </member>
        <member name="M:avl.ScanExactlyNEdges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,avl.Selection.Type,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;atl.Array&lt;avl.Edge1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;atl.Array&lt;avl.Gap1D&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System">
            <summary>Locates a specified number of the strongest transitions between dark and bright pixels along a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanMap">Data precomputed with CreateScanMap.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inEdgeCount">Number of edges to be found. Default value: 1.</param>
            <param name="inEdgeSelection">Selection mode of the resulting edges. Default value: avl::Selection::Best.</param>
            <param name="inMinDistance">Minimal distance between consecutive edges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive edges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outGaps">Gaps between consecutive edges.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanMultipleEdges(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,atl.Optional&lt;System.Single&gt;,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Edge1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Gap1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!Sy">
            <summary>Locates multiple transitions between dark and bright pixels along a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanMap">Data precomputed with CreateScanMap.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inMinDistance">Minimal distance between consecutive edges. Default value: 0.0f.</param>
            <param name="inMaxDistance">Maximal distance between consecutive edges. Default value: atl::NIL.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outEdges">Found edges.</param>
            <param name="outGaps">Gaps between consecutive edges.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.ScanSingleEdge(avl.Image!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.ScanMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.EdgeScanParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Selection.Type,atl.Optional&lt;avl.LocalBlindness!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Conditional&lt;avl.Edge1D&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Profile*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Locates the strongest transition between dark and bright pixels along a given path.</summary>
            <param name="inImage">Input image.</param>
            <param name="inScanMap">Data precomputed with CreateScanMap.</param>
            <param name="inEdgeScanParams">Parameters controlling the edge extraction process.</param>
            <param name="inEdgeSelection">Selection mode of the resulting edge. Default value: avl::Selection::Best.</param>
            <param name="inLocalBlindness">Defines conditions in which weaker edges can be detected in the vicinity of stronger edges. Default value: atl::NIL.</param>
            <param name="outEdge">Found edge.</param>
            <param name="diagBrightnessProfile">Extracted image profile.</param>
            <param name="diagResponseProfile">Profile of the edge (derivative) operator response.</param>
        </member>
        <member name="M:avl.CreateScanMap(avl.ImageFormat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Path!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.CoordinateSystem2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,System.Int32,avl.InterpolationMethod.Type,avl.ScanMap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Path*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;,atl.Array&lt;avl.Path&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Precomputes a data object that is required for fast 1D edge detection.</summary>
            <param name="inImageFormat">Dimensions, depth and pixel type of the image on which edge detection will be performed.</param>
            <param name="inScanPath">Path along which the scan is performed.</param>
            <param name="inScanPathAlignment">Adjusts the scan path to the position of the inspected object. Default value: atl::NIL.</param>
            <param name="inScanWidth">Width of the scan field in pixels. Default value: 5.</param>
            <param name="inImageInterpolation">Interpolation method used for extraction of image pixel values. Default value: Bilinear.</param>
            <param name="outScanMap">Optimized data object required for 1D edge detection.</param>
            <param name="outAlignedScanPath">Transformed input path.</param>
            <param name="diagSamplingPoints">Array of paths each one containing the sampling points that contributes to a single value of the extracted profile.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessSize(avl.Size!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of size.</summary>
            <param name="inSize">Input box.</param>
            <param name="outWidth">Output width.</param>
            <param name="outHeight">Output height.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeSize(System.Int32,System.Int32,avl.Size*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a size structure from individual fields.</summary>
            <param name="inWidth">Input width.</param>
            <param name="inHeight">Input height.</param>
            <param name="outSize">Output box.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessPixel(avl.Pixel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of pixel.</summary>
            <param name="inPixel">Input location.</param>
            <param name="outX">Output value of channel x.</param>
            <param name="outY">Output value of channel y.</param>
            <param name="outZ">Output value of channel z.</param>
            <param name="outW">Output value of channel w.</param>
        </member>
        <member name="M:avs.AvsFilter_MakePixel(System.Single,System.Single,System.Single,System.Single,avl.Pixel*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a pixel structure from individual fields.</summary>
            <param name="inX">Input value of channel x.</param>
            <param name="inY">Input value of channel y.</param>
            <param name="inZ">Input value of channel z.</param>
            <param name="inW">Input value of channel w.</param>
            <param name="outPixel">Output location.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessLocation(avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of location.</summary>
            <param name="inLocation">Input location.</param>
            <param name="outX">Output x-coordinate.</param>
            <param name="outY">Output y-coordinate.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeLocation(System.Int32,System.Int32,avl.Location*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a location structure from individual fields.</summary>
            <param name="inX">Input x-coordinate.</param>
            <param name="inY">Input y-coordinate.</param>
            <param name="outLocation">Output location.</param>
        </member>
        <member name="M:avl.TranslateLocation(avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,avl.Location*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shifts a Location by given number of pixels along each axis</summary>
            <param name="inLocation">Input location.</param>
            <param name="inDeltaX">Shift along the x axis.</param>
            <param name="inDeltaY">Shift along the y axis.</param>
            <param name="inInverse">Switches to inverse operation.</param>
            <param name="outLocation">Shifted location.</param>
        </member>
        <member name="M:avl.LocationCorners_Deprecated(avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns corners of a location.</summary>
        </member>
        <member name="M:avl.LocationCenter(avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns the center point of a pixel indicated by the provided location.</summary>
            <param name="inLocation">Pixel location.</param>
            <param name="outCenter">Center point of the provided pixel.</param>
        </member>
        <member name="M:avl.FormatPoint3DToString(avl.Point3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a 3D point to a string of format "(X, Y, Z)".</summary>
            <param name="inIntegerDigitCount">How many characters the integer part of the coordinates should have at least.</param>
            <param name="inFractionalDigitCount">How many characters the fractional part of the coordinates should have. Default value: 3.</param>
            <param name="inDecimalMark">The symbol used to separate the integer part from the fractional part of the coordinates. Default value: \".\".</param>
            <param name="inTrailingCharacter">Defines the trailing character. Default value: \"0\".</param>
            <param name="inForceSignPrinting">Forces printing the signs of the numbers even if the number is positive. Default value: False.</param>
            <param name="inSuffix">Defines a suffix. Generally it is an unit of value (eg. mm). Default value: \"\".</param>
            <param name="inPrintBrackets">Determines whether the brackets should be printed or not. Default value: True.</param>
        </member>
        <member name="M:avl.FormatPoint2DToString(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a 2D point to a string of format "(X, Y)".</summary>
            <param name="inIntegerDigitCount">How many characters the integer part of the coordinates should have at least.</param>
            <param name="inFractionalDigitCount">How many characters the fractional part of the coordinates should have. Default value: 3.</param>
            <param name="inDecimalMark">The symbol used to separate the integer part from the fractional part of the coordinates. Default value: \".\".</param>
            <param name="inTrailingCharacter">Defines the trailing character. Default value: \"0\".</param>
            <param name="inForceSignPrinting">Forces printing the signs of the numbers even if the number is positive. Default value: False.</param>
            <param name="inSuffix">Defines a suffix. Generally it is an unit of value (eg. mm). Default value: \"\".</param>
            <param name="inPrintBrackets">Determines whether the brackets should be printed or not. Default value: True.</param>
        </member>
        <member name="M:avl.FormatLocationToString(avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Converts a location to a string of format "(X, Y)".</summary>
            <param name="inDigitCount">How many characters the output coordinate should have at least.</param>
            <param name="inTrailingCharacter">Defines the trailing character. Default value: \"0\".</param>
            <param name="inForceSignPrinting">Forces printing the signs of the coordinates even if the number is positive. Default value: False.</param>
            <param name="inSuffix">Defines a suffix. Generally it is an unit of value (eg. mm). Default value: \"\".</param>
            <param name="inSystemBase">The base of the numeral system. Default value: 10.</param>
            <param name="inPrintBrackets">Determines whether the brackets should be printed or not. Default value: True.</param>
        </member>
        <member name="M:avs.AvsFilter_AccessBox(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns individual fields of box.</summary>
            <param name="inBox">Input box.</param>
            <param name="outX">Output x-coordinate.</param>
            <param name="outY">Output y-coordinate.</param>
            <param name="outWidth">Output width.</param>
            <param name="outHeight">Output height.</param>
        </member>
        <member name="M:avs.AvsFilter_MakeBox(System.Int32,System.Int32,System.Int32,System.Int32,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a box structure from individual fields.</summary>
            <param name="inX">Input x-coordinate.</param>
            <param name="inY">Input y-coordinate.</param>
            <param name="inWidth">Input width.</param>
            <param name="inHeight">Input height.</param>
            <param name="outBox">Output box.</param>
        </member>
        <member name="M:avl.BoxesBoundingBox_OrNil(atl.Array&lt;avl.Box&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Box&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the bounding box of given boxes; returns NIL if the array is empty.</summary>
        </member>
        <member name="M:avl.BoxesBoundingBox(atl.Array&lt;avl.Box&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the bounding box of given boxes.</summary>
        </member>
        <member name="M:avl.BoxToBoxDistance(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional&lt;avl.Segment2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;&gt;)">
            <summary>Computes minimal distance between one of the points of the first box with one of the points of the second box.</summary>
            <param name="inResolution">Default value: 1.0f.</param>
        </member>
        <member name="M:avl.BoxIntersection(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Computes the common part of two boxes.</summary>
        </member>
        <member name="M:avl.TestBoxIntersectsWith(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether two boxes have non-empty intersection.</summary>
        </member>
        <member name="M:avl.TestBoxInBox(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether a box is contained in another one.</summary>
        </member>
        <member name="M:avl.TestBoxEqualTo(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether given boxes are equal.</summary>
        </member>
        <member name="M:avl.TestBoxNotEmpty(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether the box is not empty.</summary>
        </member>
        <member name="M:avl.TestBoxEmpty(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Tests whether the box is empty.</summary>
        </member>
        <member name="M:avl.RemoveEmptyBoxes(atl.Array&lt;avl.Box&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;avl.Box&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array&lt;System.Boolean&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>The input boxes which have both dimensions different from zero are copied to the output.</summary>
        </member>
        <member name="M:avl.SkipEmptyBox(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Conditional&lt;avl.Box&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>If the input box has both dimensions different from zero, then it is copied to the output; otherwise Nil is returned.</summary>
        </member>
        <member name="M:avl.BoxCharacteristicPoint(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type!System.Runtime.CompilerServices.IsConst,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns a characteristic point (e.g. the top-left) of a box.</summary>
            <param name="inPointAnchor">Selecting one of the 9 characteristic points. Default value: TopLeft.</param>
        </member>
        <member name="M:avl.ErodeBox(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological erosion on a box using box kernel.</summary>
            <param name="inBox">Input box.</param>
            <param name="inRadiusX">Horizontal radius of the box kernel. Default value: 1.</param>
            <param name="inRadiusY">Vertical radius of the box kernel. Default value: atl::NIL.</param>
            <param name="outBox">Eroded box.</param>
        </member>
        <member name="M:avl.DilateBox(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional&lt;System.Int32&gt;,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Performs a morphological dilation on a box using box kernel.</summary>
            <param name="inBox">Input box.</param>
            <param name="inRadiusX">Horizontal radius of the box kernel. Default value: 1.</param>
            <param name="inRadiusY">Vertical radius of the box kernel. Default value: atl::NIL.</param>
            <param name="outBox">Dilated box.</param>
        </member>
        <member name="M:avl.ResizeBox_Delta(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,System.Int32,System.Int32,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the dimensions of a box by adding some values.</summary>
            <param name="inBox">Input box.</param>
            <param name="inAnchor">Point of the box which position will not change. Default value: TopLeft.</param>
            <param name="inWidthDelta">Value added to width of the box. Default value: 0.</param>
            <param name="inHeightDelta">Value added to height of the box. Default value: 0.</param>
            <param name="outBox">Resized box.</param>
        </member>
        <member name="M:avl.ResizeBox_Relative(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,System.Single,System.Single,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Resizes a box to relatively defined dimensions.</summary>
            <param name="inBox">Input box.</param>
            <param name="inAnchor">Point of the box which position will not change. Default value: TopLeft.</param>
            <param name="inHorizontalScale">Scale factor of the horizontal resize. Default value: 1.0f.</param>
            <param name="inVerticalScale">Scale factor of the vertical resize. Default value: 1.0f.</param>
            <param name="outBox">Resized box.</param>
        </member>
        <member name="M:avl.ResizeBox(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,atl.Optional&lt;System.Int32&gt;,atl.Optional&lt;System.Int32&gt;,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Changes the dimensions of a box.</summary>
            <param name="inBox">Input box.</param>
            <param name="inAnchor">Point of the box which position will not change. Default value: TopLeft.</param>
            <param name="inNewWidth">Target width of the box. Default value: atl::NIL.</param>
            <param name="inNewHeight">Target height of the box. Default value: atl::NIL.</param>
            <param name="outBox">Resized box.</param>
        </member>
        <member name="M:avl.TranslateBox(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Boolean,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Shifts a box by a discreet vector.</summary>
            <param name="inBox">Input box.</param>
            <param name="inDeltaX">Shift along the x axis.</param>
            <param name="inDeltaY">Shift along the y axis.</param>
            <param name="inInverse">Switches to inverse operation.</param>
            <param name="outBox">Shifted box.</param>
        </member>
        <member name="M:avl.BoxCorners_Deprecated(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns corners of a box.</summary>
        </member>
        <member name="M:avl.SplitBox(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.SplitDirection.Type!System.Runtime.CompilerServices.IsConst,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Splits a box into two along a direction.</summary>
        </member>
        <member name="M:avl.BoxCenter(avl.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Returns center of a box.</summary>
        </member>
        <member name="M:avl.CreateBox(avl.Location!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Anchor2D.Type,System.Int32,System.Int32,avl.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a box.</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:avl.NormalizeAngle(System.Single,avl.AngleRange.Type,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.AngleBetweenDirections(System.Single,System.Single,atl.Optional<avl.RotationDirection.Type>,avl.AngleRange.Type,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.AngleBetweenVectors(avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Vector2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional<avl.RotationDirection.Type>,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.AngleBetweenThreePoints(avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Point2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.RotationDirection.Type,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.Optional<avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.AngleBetweenSegments(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.AngleMetric.Type,System.Boolean,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.Optional<avl.Arc2D*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.AngleBetweenSegmentLines_Deprecated(avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,avl.Segment2D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.Optional<System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.TestIntegerLessThan(System.Int32,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.TestLongIntegerLessThan(System.Int64,System.Int64,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.TestIntegerLessOrEqual(System.Int32,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.TestLongIntegerLessOrEqual(System.Int64,System.Int64,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.TestRealLessThan(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.TestDoubleLessThan(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.TestRealLessOrEqual(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.TestDoubleLessOrEqual(System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.INI_GetAllValues(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Array<atl.String>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.INI_GetStringValue(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.INI_GetBoolValue(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.INI_GetIntegerValue(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.INI_GetRealValue(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.INI_AddStringValue(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.Optional<atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.INI_AddBoolValue(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,atl.Optional<atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.INI_AddRealValue(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,atl.Optional<atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:avl.INI_AddIntegerValue(atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,atl.Optional<atl.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&>,atl.String*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
    </members>
</doc>