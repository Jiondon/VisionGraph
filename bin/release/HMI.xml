<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HMI</name>
    </assembly>
    <members>
        <member name="T:HMI.HMIBrowsableAttribute">
            <summary>
            Specifies if given property of component is visible in HMI designer property grid.
            </summary>
        </member>
        <member name="M:HMI.HMIBrowsableAttribute.#ctor(System.Boolean)">
            <summary>
            Constructs new object of HMIBrowsableAttribute.
            </summary>
            <param name="value">true when described property should be visible in property editor.</param>
        </member>
        <member name="P:HMI.HMIBrowsableAttribute.Value">
            <summary>
            Returns true when described property should be visible in property editor.
            </summary>
        </member>
        <member name="T:HMI.HMIPortDirection">
            <summary>
            Specifies type of HMI designer ports for component property described by HMIPortPropertyAttribute attribute.
            </summary>
        </member>
        <member name="F:HMI.HMIPortDirection.None">
            <summary>Indicates that property is not a HMI port.</summary>
        </member>
        <member name="F:HMI.HMIPortDirection.Input">
            <summary>Indicates that property should be visible in designer as an input of HMI control.</summary>
        </member>
        <member name="F:HMI.HMIPortDirection.Output">
            <summary>Indicates that property should be visible in designer as an output of HMI control.</summary>
        </member>
        <member name="F:HMI.HMIPortDirection.HiddenInput">
            <summary>Indicates that property should be accessible in designer as an input of HMI control, but should be hidden by default.</summary>
        </member>
        <member name="F:HMI.HMIPortDirection.HiddenOutput">
            <summary>Indicates that property should be accessible in designer as an input of HMI control, but should be hidden by default.</summary>
        </member>
        <member name="F:HMI.HMIPortDirection.Volatile">
            <summary>Forbids property access optimizations based on value change detection.</summary>
        </member>
        <member name="T:HMI.HMIPortPropertyAttribute">
            <summary>
            Specifies if given component property or event is visible in designer as bindable HMI control port.
            </summary>
        </member>
        <member name="M:HMI.HMIPortPropertyAttribute.#ctor(HMI.HMIPortDirection)">
            <summary>
            Constructs new object of HMIPortPropertyAttribute.
            </summary>
            <param name="value">Specifies in which role described property should be visible in designer.</param>
        </member>
        <member name="P:HMI.HMIPortPropertyAttribute.IsInput">
            <summary>
            Returns true when described property should be visible in designer as an input port of HMI control.
            </summary>
        </member>
        <member name="P:HMI.HMIPortPropertyAttribute.IsInputHidden">
            <summary>
            Returns true when described property input port should be hidden by default.
            </summary>
        </member>
        <member name="P:HMI.HMIPortPropertyAttribute.IsOutput">
            <summary>
            Returns true when described property should be visible in designer as an output port of HMI control.
            </summary>
        </member>
        <member name="P:HMI.HMIPortPropertyAttribute.IsOutputHidden">
            <summary>
            Returns true when described property output port should be hidden by default.
            </summary>
        </member>
        <member name="P:HMI.HMIPortPropertyAttribute.IsVolatile">
            <summary>
            Returns true when port is marked as volatile and forbids property access optimizations based on value change detection.
            </summary>
        </member>
        <member name="P:HMI.HMIPortPropertyAttribute.SortingOrder">
            <summary>
            Gets or sets value determining the port sorting order in HMI editor.
            </summary>
        </member>
        <member name="T:HMI.HMIStatePortAttribute">
            <summary>
            Specifies if given component property is a part of component state and its value should be saved with HMI state.
            </summary>
        </member>
        <member name="M:HMI.HMIStatePortAttribute.#ctor">
            <summary>
            Constructs new object of HMIStatePortAttribute.
            </summary>
        </member>
        <member name="T:HMI.AmrTypeAttribute">
            <summary>
            Allows to define details of runtime AMR data type converted from component property value and a default AMR type
            name that given property will be serialized to, to populate designed property grid.
            </summary>
        </member>
        <member name="M:HMI.AmrTypeAttribute.#ctor(System.String)">
            <summary>
            Constructs new object of AmrTypeAttribute.
            </summary>
            <param name="TypeName">Name of AMR type (without nillability modifiers and ranges).</param>
        </member>
        <member name="P:HMI.AmrTypeAttribute.Name">
            <summary>
            Gets name of AMR type for this property.
            </summary>
        </member>
        <member name="P:HMI.AmrTypeAttribute.Max">
            <summary>
            Gets or sets a maximum value of allowed range for this property that will be used in designed property grid.
            </summary>
        </member>
        <member name="P:HMI.AmrTypeAttribute.HasMax">
            <summary>
            Returns true when maximum value of allowed range is defined for described property.
            </summary>
        </member>
        <member name="P:HMI.AmrTypeAttribute.Min">
            <summary>
            Gets or sets a minimum value of allowed range for this property that will be used in designed property grid.
            </summary>
        </member>
        <member name="P:HMI.AmrTypeAttribute.HasMin">
            <summary>
            Returns true when minimum value of allowed range is defined for described property.
            </summary>
        </member>
        <member name="P:HMI.AmrTypeAttribute.IsNillable">
            <summary>
            Gets or sets flag indicating if described property can be assigned with nil value.
            </summary>
        </member>
        <member name="M:HMI.AmrTypeAttribute.GetAmrType">
            <summary>
            Creates and returns AMR type definition described by this attribute.
            </summary>
        </member>
        <member name="T:HMI.HMIToolboxAttribute">
            <summary>
            Allows to specify a catalog tree category name in which described HMI control should be placed.
            </summary>
        </member>
        <member name="M:HMI.HMIToolboxAttribute.#ctor(System.String)">
            <summary>
            Constructs a new object of HMIToolboxAttribute that bounds given control type to specified category.
            </summary>
            <param name="visibleCategoryName">Name of category in which control should be placed in catalog.</param>
        </member>
        <member name="M:HMI.HMIToolboxAttribute.#ctor(System.Boolean)">
            <summary>
            Constructs new object of HMIToolboxAttribute that can hide given control type in HMI controls catalog.
            </summary>
            <param name="visible">Flag indicating if this control should be visible in catalog. When set to false described HMI control will
            not be available in catalog for manual placing in designer.</param>
        </member>
        <member name="P:HMI.HMIToolboxAttribute.CategoryName">
            <summary>
            Gets category name in which control should be placed in HMI controls catalog.
            </summary>
        </member>
        <member name="P:HMI.HMIToolboxAttribute.IsVisible">
            <summary>
            Gets flag indicating if described control should be visible in HMI controls catalog.
            </summary>
        </member>
        <member name="T:HMI.HMIComponentAssociationPropertyAttribute">
            <summary>
            Specifies if given component property is used to associate control with other component in application
            by assigning its instance reference to it.
            </summary>
        </member>
        <member name="M:HMI.HMIComponentAssociationPropertyAttribute.#ctor">
            <summary>
            Constructs new object of HMIComponentAssociationPropertyAttribute.
            </summary>
        </member>
        <member name="T:HMI.HMISingletonComponentAttribute">
            <summary>
            Specifies that there should be at most one component of specified type in HMI design.
            </summary>
        </member>
        <member name="T:HMI.Data.AmrConversionMode">
            <summary>
            Describes resulting mode of types pair conversion on AMR/CLR types boundary.
            </summary>
        </member>
        <member name="F:HMI.Data.AmrConversionMode.None">
            <summary>Unable to convert objects.</summary>
        </member>
        <member name="F:HMI.Data.AmrConversionMode.Normal">
            <summary>Objects are converted without type representation change.</summary>
        </member>
        <member name="F:HMI.Data.AmrConversionMode.WithTypeConversion">
            <summary>Objects are converted, but their type representation is changed.</summary>
        </member>
        <member name="T:HMI.Data.IAmrConverter">
            <summary>
            Provides interface for converter, that handles conversion of single CLR data type to and from AMR types.
            </summary>
        </member>
        <member name="M:HMI.Data.IAmrConverter.GetConverterType">
            <summary>
            Returns runtime data type that this converter handles.
            </summary>
        </member>
        <member name="M:HMI.Data.IAmrConverter.GetTypeName">
            <summary>
            Returns name of suggested amr type that will be shown in designer tips.
            </summary>
        </member>
        <member name="M:HMI.Data.IAmrConverter.CheckConversionFrom(Amr.Type)">
            <summary>
            Determines if this data converter can convert data from specified amr type.
            </summary>
            <returns>Determined conversion mode.</returns>
        </member>
        <member name="M:HMI.Data.IAmrConverter.CheckConversionTo(Amr.Type)">
            <summary>
            Determines if this data converter can convert data to specified amr type and returns conversion mode.
            </summary>
            <returns>Determined conversion mode.</returns>
        </member>
        <member name="M:HMI.Data.IAmrConverter.ShouldDispose(System.Object)">
            <summary>
            Determines if instance of type handled by this converter, that is not needed any more, should be disposed.
            </summary>
        </member>
        <member name="M:HMI.Data.IAmrConverter.ConvertFromAmr(Amr.Data,System.Object@)">
            <summary>
            Converts AMR data into CLR data.
            </summary>
            <param name="sourceData">Source amr data, can be null when source is equal nil.</param>
            <param name="destinationData">Variable to store new runtime data or instance of (packed) object to reuse. This parameter must 
            be an instance of type handled by converter or null. Converter can reuse object resource or discard specified object
            and create new instance returned by ref parameter.</param>
            <returns>true when object was successfully converted and can be used, false when object does not have to be converted (eg. is nil)
            or when specified runtime instance was not changed and also does not have to be updated.</returns>
        </member>
        <member name="M:HMI.Data.IAmrConverter.ConvertToAmr(System.Object,Amr.Data@)">
            <summary>
            Converts CLR data and writes it into specified AMR data object.
            </summary>
            <param name="sourceData">Instance (packed) of type handled by converter. Can not be null when type is not nullable.</param>
            <param name="destinationData">Initialized and typed object of concrete amr data type to change. Can not be null.</param>
        </member>
        <member name="M:HMI.Data.IAmrConverter.ConvertToDefaultAmr(System.Object)">
            <summary>
            Converts CLR data into AMR data object of converter default AMR type. Used to populate designed property grid.
            </summary>
        </member>
        <member name="T:HMI.Data.ConversionModeHelper">
            <summary>
            Helper class with common routines used in AMR converter implementations.
            </summary>
        </member>
        <member name="M:HMI.Data.ConversionModeHelper.CanConvertFrom(HMI.Data.IAmrConverter,Amr.Type)">
            <summary>
            Determines if this data converter can convert data from specified amr type.
            </summary>
        </member>
        <member name="M:HMI.Data.ConversionModeHelper.CanConvertTo(HMI.Data.IAmrConverter,Amr.Type)">
            <summary>
            Determines if this data converter can convert data to specified amr type.
            </summary>
        </member>
        <member name="M:HMI.Data.ConversionModeHelper.FromBool(System.Boolean)">
            <summary>
            Converts boolean value determining existence of normal conversion into conversion mode.
            </summary>
        </member>
        <member name="T:HMI.Data.BadAmrConversionException">
            <summary>
            Exception class that implementation can throw when requested AMR/CLR types conversion can not be performed.
            </summary>
        </member>
        <member name="M:HMI.Data.BadAmrConversionException.#ctor(HMI.Data.IAmrConverter,Amr.Data)">
            <summary>
            Constructs a new object of BadAmrConversionException class.
            </summary>
            <param name="sourceConverter">Parent converter instance that throws this exception.</param>
            <param name="data">Data object that can not be converted.</param>
        </member>
        <member name="M:HMI.Data.BadAmrConversionException.#ctor(System.String)">
            <summary>
            Constructs a new object of BadAmrConversionException class.
            </summary>
        </member>
        <member name="M:HMI.Data.BadAmrConversionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new object of BadAmrConversionException class.
            </summary>
        </member>
        <member name="M:HMI.Data.BadAmrConversionException.FormatMessage(HMI.Data.IAmrConverter,Amr.Data)">
            <summary>
            Formats message text for BadAmrConversionException aut of specified conversion types pair.
            </summary>
        </member>
        <member name="T:HMI.ProgramEventType">
            <summary>
            Defines identifiers for different program events that control can be notified about.
            </summary>
        </member>
        <member name="F:HMI.ProgramEventType.ApplicationLoad">
            <summary>Application was just loaded.</summary>
        </member>
        <member name="F:HMI.ProgramEventType.ApplicationClosing">
            <summary>Application is just about to be closed.</summary>
        </member>
        <member name="F:HMI.ProgramEventType.ProgramStart">
            <summary>Program execution is starting.</summary>
        </member>
        <member name="F:HMI.ProgramEventType.ProgramStop">
            <summary>Program execution has been stopped.</summary>
        </member>
        <member name="T:HMI.ProgramStateChangedEventArgs">
            <summary>
            Encapsulates arguments passed in IProgramControlService.ProgramStateChanged event.
            </summary>
        </member>
        <member name="M:HMI.ProgramStateChangedEventArgs.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs new instance of ProgramStateChangedEventArgs passing argument about program execution state.
            </summary>
        </member>
        <member name="P:HMI.ProgramStateChangedEventArgs.IsExecuting">
            <summary>
            When true program is currently executing.
            </summary>
        </member>
        <member name="P:HMI.ProgramStateChangedEventArgs.CanStart">
            <summary>
            When true current program state allows to execute StartProgram to start program execution.
            </summary>
        </member>
        <member name="P:HMI.ProgramStateChangedEventArgs.CanIterate">
            <summary>
            When true current program state allows to execute IterateProgram to start single program iteration execution.
            </summary>
        </member>
        <member name="P:HMI.ProgramStateChangedEventArgs.CanPause">
            <summary>
            When true current program state allows to execute PauseProgram to pause program execution.
            </summary>
        </member>
        <member name="P:HMI.ProgramStateChangedEventArgs.CanStop">
            <summary>
            When true current program state allows to execute StopProgram to stop program execution.
            </summary>
        </member>
        <member name="T:HMI.ProgramEventArgs">
            <summary>
            Encapsulates arguments passed in IProgramControlService.ProgramEvent event.
            </summary>
        </member>
        <member name="M:HMI.ProgramEventArgs.#ctor(HMI.ProgramEventType)">
            <summary>
            Construct new instance of ProgramEventArgs class with arguments for IProgramControlService.ProgramEvent event.
            </summary>
            <param name="eventType"></param>
        </member>
        <member name="P:HMI.ProgramEventArgs.EventType">
            <summary>
            Gets type of program event that occurred.
            </summary>
        </member>
        <member name="T:HMI.ProgramStateChangedEventHandler">
            <summary>
            Represents the method that will handle the IProgramControlService.ProgramStateChanged event.
            </summary>
        </member>
        <member name="T:HMI.ProgramEventHandler">
            <summary>
            Represents the method that will handle the IProgramControlService.ProgramEvent event.
            </summary>
        </member>
        <member name="T:HMI.IProgramControlService">
            <summary>
            Defines interface of program controlling HMI service.
            </summary>
        </member>
        <member name="M:HMI.IProgramControlService.StartProgram">
            <summary>
            Sends request to external program executing unit to start or resume program execution.
            </summary>
        </member>
        <member name="M:HMI.IProgramControlService.IterateProgram">
            <summary>
            Sends request to external program executing unit to perform single iteration of program execution.
            </summary>
        </member>
        <member name="M:HMI.IProgramControlService.PauseProgram">
            <summary>
            Sends request to external program executing unit to suspend program execution.
            </summary>
        </member>
        <member name="M:HMI.IProgramControlService.StopProgram">
            <summary>
            Sends request to external program executing unit to stop program execution and terminate program state.
            </summary>
        </member>
        <member name="E:HMI.IProgramControlService.ProgramStateChanged">
            <summary>
            Occurs after program execution state has changed, notifying about new allowed action that can be performed on program controller.
            </summary>
        </member>
        <member name="E:HMI.IProgramControlService.ProgramEvent">
            <summary>
            Occurs after specific event in program load, run and close lifetime.
            </summary>
        </member>
        <member name="T:HMI.IServiceConsumer">
            <summary>
            Implemented by HMI controls that requires access to HMI system service provider.
            </summary>
        </member>
        <member name="M:HMI.IServiceConsumer.SetHMIServiceProvider(System.IServiceProvider)">
            <summary>
            Sets instance of current HMI service provider.
            </summary>
        </member>
        <member name="T:HMI.StateLoadEventHandler">
            <summary>
            Used to notify about HMI application state loading and saving.
            </summary>
            <param name="fileName">Full path of file to which HMI controls state was saved or loaded from.</param>
            <param name="container">Container control which child controls state will be saved or loaded, or null to save/load state of whole HMI application.</param>
        </member>
        <member name="T:HMI.IStateManager">
            <summary>
            Defines interface of HMI controls state manager, capable of saving and loading state of active HMI to/from a file.
            </summary>
        </member>
        <member name="M:HMI.IStateManager.AddComponent(System.String,System.Object)">
            <summary>
            Adds component to be included in state saving. This method is used internally by HMI runtime and should not be used
            explicitly on top level components.
            </summary>
            <param name="name">Name identifying component in state file.</param>
            <param name="component">Component which properties will be saved in state file.</param>
        </member>
        <member name="M:HMI.IStateManager.SaveState(System.String,System.Windows.Forms.Control)">
            <summary>
            Saves active HMI state to specified file.
            </summary>
            <param name="fileName">Full path of file to be created with saved HMI controls state.</param>
            <param name="container">Container control which child controls state will be saved or null to save state of whole HMI application.</param>
        </member>
        <member name="M:HMI.IStateManager.LoadState(System.String,System.Windows.Forms.Control)">
            <summary>
            Loads state to active HMI from specified file.
            </summary>
            <param name="fileName">Full path of file from which saved HMI controls state will be restored.</param>
            <param name="container">Container control which child controls state will be restored or null to save state of whole HMI application.</param>
        </member>
        <member name="P:HMI.IStateManager.ProjectDirectory">
            <summary>
            Returns project parent directory path, or null when project is not saved.
            </summary>
        </member>
        <member name="E:HMI.IStateManager.StateLoaded">
            <summary>
            Notifies that state was loaded to HMI application controlled by this manager.
            </summary>
        </member>
        <member name="E:HMI.IStateManager.StateSaved">
            <summary>
            Notifies that state was saved from HMI application controlled by this manager.
            </summary>
        </member>
        <member name="T:HMI.IUserHMIControlsProvider">
            <summary>
            Interface for user HMI controls provider host module.
            </summary>
        </member>
        <member name="M:HMI.IUserHMIControlsProvider.GetCustomControlTypes">
            <summary>
            Generates a list of control types provided by user module.
            </summary>
            <remarks>
            Every type reported by this method must be assignable to <code>System.Windows.Forms.Control</code>.
            </remarks>
            <returns>Array of runtime type descriptors of control types.</returns>
        </member>
        <member name="T:HMI.IUserAmrConvertersProvider">
            <summary>
            Interface for user AMR converters provider host module.
            </summary>
        </member>
        <member name="M:HMI.IUserAmrConvertersProvider.GetCustomConverters">
            <summary>
            Generates a list of instances of custom AMR converters required by user module controls.
            </summary>
            <returns>Array of IAmrConverter instances.</returns>
        </member>
        <member name="T:HMI.IValueSourceControl">
            <summary>
            Represents a control that is editing single value that can be displayed by other control in application.
            </summary>
        </member>
        <member name="E:HMI.IValueSourceControl.ValueChanged">
            <summary>
            Notifies that edited value has been changed.
            </summary>
        </member>
        <member name="M:HMI.IValueSourceControl.GetValue">
            <summary>
            Gets edited value as formatted text.
            </summary>
        </member>
        <member name="T:HMI.IBooleanSourceControl">
            <summary>
            Represents a control that is editing single value that can be represented as boolean value and used for state
            automation by other application components.
            </summary>
        </member>
        <member name="E:HMI.IBooleanSourceControl.ValueChanged">
            <summary>
            Notifies that edited value has been changed.
            </summary>
        </member>
        <member name="M:HMI.IBooleanSourceControl.GetValue">
            <summary>
            Gets the state of edited value.
            </summary>
        </member>
        <member name="T:HMI.VirtualKeyboardType">
            <summary>
            Specifies the type of virtual keyboard shown to the user.
            </summary>
        </member>
        <member name="F:HMI.VirtualKeyboardType.Auto">
            <summary>Request to determine keyboard type automatically from specified control.</summary>
        </member>
        <member name="F:HMI.VirtualKeyboardType.Regular">
            <summary>Regular alpha-numeric keyboard for general editing.</summary>
        </member>
        <member name="F:HMI.VirtualKeyboardType.NumPad">
            <summary>Num pad only keyboard for numeric values editing.</summary>
        </member>
        <member name="T:HMI.VirtualKeyboardControlVisibility">
            <summary>
            Determines how control interacts with virtual keyboard management.
            </summary>
        </member>
        <member name="F:HMI.VirtualKeyboardControlVisibility.Default">
            <summary>Default behavior. Type of control is determined automatically and for container controls child controls are scanned.</summary>
        </member>
        <member name="F:HMI.VirtualKeyboardControlVisibility.Hidden">
            <summary>Keyboard is not shown automatically for specified control and child controls are not scanned.</summary>
        </member>
        <member name="F:HMI.VirtualKeyboardControlVisibility.RegularText">
            <summary>Virtual keyboard is show automatically for specified control in regular editing mode.</summary>
        </member>
        <member name="F:HMI.VirtualKeyboardControlVisibility.NumericText">
            <summary>Virtual keyboard is show automatically for specified control in num pad only editing mode.</summary>
        </member>
        <member name="T:HMI.IVirtualKeyboardService">
            <summary>
            Provides access to HMI on-screen virtual keyboard.
            </summary>
        </member>
        <member name="P:HMI.IVirtualKeyboardService.IsShown">
            <summary>
            Gets flag indicating if virtual keyboard is currently active on screen.
            </summary>
        </member>
        <member name="M:HMI.IVirtualKeyboardService.Show(HMI.VirtualKeyboardType)">
            <summary>
            Requests to show virtual keyboard (when keyboard is active and not yet visible).
            </summary>
            <param name="type">Type of keyboard to be shown.</param>
        </member>
        <member name="M:HMI.IVirtualKeyboardService.Show(System.Windows.Forms.Control,HMI.VirtualKeyboardType,System.Boolean)">
            <summary>
            Requests to show virtual keyboard (when keyboard is active and not yet visible) for editing specified control content.
            </summary>
            <param name="control">Control which content will be edited using virtual keyboard.</param>
            <param name="type">Type of keyboard to be shown.</param>
            <param name="relocate">When true forces already visible keyboard to be relocated to not obstruct specified control.</param>
        </member>
        <member name="M:HMI.IVirtualKeyboardService.Show(System.Drawing.Rectangle,HMI.VirtualKeyboardType,System.Boolean)">
            <summary>
            Requests to show virtual keyboard (when keyboard is active and not yet visible) for editing data in specified screen area.
            </summary>
            <param name="rectangle">Area in screen space coordinates that should stay visible after showing virtual keyboard.</param>
            <param name="type">Type of keyboard to be shown.</param>
            <param name="relocate">When true forces already visible keyboard to be relocated to not obstruct specified screen area.</param>
        </member>
        <member name="M:HMI.IVirtualKeyboardService.Hide">
            <summary>
            Requests to hide virtual keyboard (when visible).
            </summary>
        </member>
        <member name="M:HMI.IVirtualKeyboardService.Suspend">
            <summary>
            Suspends automatic tracking of keyboard showing and replacing when controls are focused or clicked. Every call must be balanced
            by a call to Resume().
            </summary>
        </member>
        <member name="M:HMI.IVirtualKeyboardService.Resume">
            <summary>
            Resumes automatic tracking of keyboard showing and replacing when controls are focused or clicked.
            </summary>
        </member>
        <member name="T:HMI.VirtualKeyboardVisibilityAttribute">
            <summary>
            Determines how control interacts with automatic virtual keyboard management.
            </summary>
        </member>
        <member name="M:HMI.VirtualKeyboardVisibilityAttribute.#ctor(HMI.VirtualKeyboardControlVisibility)">
            <summary>
            Constructs new instance of VirtualKeyboardVisibilityAttribute attribute.
            </summary>
            <param name="visibility">Type of control visibility for virtual keyboard manager.</param>
        </member>
        <member name="P:HMI.VirtualKeyboardVisibilityAttribute.Visibility">
            <summary>
            Gets value of visibility specified for control.
            </summary>
        </member>
    </members>
</doc>
